
nucleo_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c15c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800c330  0800c330  0001c330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce08  0800ce08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce08  0800ce08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce10  0800ce10  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce10  0800ce10  0001ce10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce14  0800ce14  0001ce14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ce18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000946c  200001e0  0800cff8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000964c  0800cff8  0002964c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba25  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a27  00000000  00000000  0003bc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  00040ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a281  00000000  00000000  00041d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013950  00000000  00000000  0006bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101b5c  00000000  00000000  0007f8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018144d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006078  00000000  00000000  001814c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c314 	.word	0x0800c314

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c314 	.word	0x0800c314

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <MX_ADC1_Init+0xf4>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fe6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001004:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800100c:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800101a:	2204      	movs	r2, #4
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800102e:	f001 fb57 	bl	80026e0 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001038:	f000 fdca 	bl	8001bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800103c:	2304      	movs	r3, #4
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001044:	2302      	movs	r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800104e:	f001 fdd9 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001058:	f000 fdba 	bl	8001bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800105c:	2305      	movs	r3, #5
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001060:	2302      	movs	r3, #2
 8001062:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800106a:	f001 fdcb 	bl	8002c04 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001074:	f000 fdac 	bl	8001bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001078:	2309      	movs	r3, #9
 800107a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800107c:	2303      	movs	r3, #3
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001086:	f001 fdbd 	bl	8002c04 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001090:	f000 fd9e 	bl	8001bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001094:	230a      	movs	r3, #10
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001098:	2304      	movs	r3, #4
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0xf0>)
 80010a2:	f001 fdaf 	bl	8002c04 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80010ac:	f000 fd90 	bl	8001bd0 <Error_Handler>
  }

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000020c 	.word	0x2000020c
 80010bc:	40012000 	.word	0x40012000

080010c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_ADC_MspInit+0x148>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	f040 808d 	bne.w	80011fe <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	4a48      	ldr	r2, [pc, #288]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6453      	str	r3, [r2, #68]	; 0x44
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a42      	ldr	r2, [pc, #264]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a3c      	ldr	r2, [pc, #240]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a36      	ldr	r2, [pc, #216]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = Angle_Rotor_Pin;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Angle_Rotor_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	482e      	ldr	r0, [pc, #184]	; (8001210 <HAL_ADC_MspInit+0x150>)
 8001158:	f003 f93a 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRENT_Ia_Pin|CURRENT_Ib_Pin;
 800115c:	2330      	movs	r3, #48	; 0x30
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4829      	ldr	r0, [pc, #164]	; (8001214 <HAL_ADC_MspInit+0x154>)
 8001170:	f003 f92e 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRENT_Ic_Pin;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CURRENT_Ic_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4824      	ldr	r0, [pc, #144]	; (8001218 <HAL_ADC_MspInit+0x158>)
 8001188:	f003 f922 	bl	80043d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_ADC_MspInit+0x15c>)
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_ADC_MspInit+0x160>)
 8001190:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_ADC_MspInit+0x15c>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_ADC_MspInit+0x15c>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011d4:	f002 f8f8 	bl	80033c8 <HAL_DMA_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80011de:	f000 fcf7 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	2012      	movs	r0, #18
 80011f4:	f002 f8b1 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011f8:	2012      	movs	r0, #18
 80011fa:	f002 f8ca 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012000 	.word	0x40012000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020800 	.word	0x40020800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	20000254 	.word	0x20000254
 8001220:	40026410 	.word	0x40026410

08001224 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_DMA_Init+0x60>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_DMA_Init+0x60>)
 8001230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_DMA_Init+0x60>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_DMA_Init+0x60>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <MX_DMA_Init+0x60>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_DMA_Init+0x60>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2104      	movs	r1, #4
 800125e:	200e      	movs	r0, #14
 8001260:	f002 f87b 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001264:	200e      	movs	r0, #14
 8001266:	f002 f894 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2102      	movs	r1, #2
 800126e:	2038      	movs	r0, #56	; 0x38
 8001270:	f002 f873 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001274:	2038      	movs	r0, #56	; 0x38
 8001276:	f002 f88c 	bl	8003392 <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_ETH_Init+0x78>)
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_ETH_Init+0x7c>)
 8001290:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_ETH_Init+0x78>)
 8001294:	2201      	movs	r2, #1
 8001296:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_ETH_Init+0x78>)
 800129a:	2200      	movs	r2, #0
 800129c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_ETH_Init+0x78>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_ETH_Init+0x78>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ETH_Init+0x78>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	3302      	adds	r3, #2
 80012b6:	22e1      	movs	r2, #225	; 0xe1
 80012b8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_ETH_Init+0x78>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	3303      	adds	r3, #3
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_ETH_Init+0x78>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_ETH_Init+0x78>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	3305      	adds	r3, #5
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_ETH_Init+0x78>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_ETH_Init+0x78>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_ETH_Init+0x78>)
 80012e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ea:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_ETH_Init+0x78>)
 80012ee:	f002 fc03 	bl	8003af8 <HAL_ETH_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80012f8:	f000 fc6a 	bl	8001bd0 <Error_Handler>
  }

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002b4 	.word	0x200002b4
 8001304:	40028000 	.word	0x40028000

08001308 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_ETH_MspInit+0x158>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 8096 	bne.w	8001458 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a46      	ldr	r2, [pc, #280]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800134a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a3a      	ldr	r2, [pc, #232]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a34      	ldr	r2, [pc, #208]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013d4:	2332      	movs	r3, #50	; 0x32
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <HAL_ETH_MspInit+0x160>)
 80013f0:	f002 ffee 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013f4:	2386      	movs	r3, #134	; 0x86
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001404:	230b      	movs	r3, #11
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4817      	ldr	r0, [pc, #92]	; (800146c <HAL_ETH_MspInit+0x164>)
 8001410:	f002 ffde 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001426:	230b      	movs	r3, #11
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	480f      	ldr	r0, [pc, #60]	; (8001470 <HAL_ETH_MspInit+0x168>)
 8001432:	f002 ffcd 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001448:	230b      	movs	r3, #11
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <HAL_ETH_MspInit+0x16c>)
 8001454:	f002 ffbc 	bl	80043d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40028000 	.word	0x40028000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40021800 	.word	0x40021800

08001478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <MX_GPIO_Init+0x158>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a3d      	ldr	r2, [pc, #244]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <MX_GPIO_Init+0x158>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x158>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f244 0181 	movw	r1, #16513	; 0x4081
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <MX_GPIO_Init+0x15c>)
 800153e:	f003 f909 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <MX_GPIO_Init+0x160>)
 8001548:	f003 f904 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_GPIO_Init+0x164>)
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <MX_GPIO_Init+0x168>)
 8001562:	f002 ff35 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001566:	f244 0381 	movw	r3, #16513	; 0x4081
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4815      	ldr	r0, [pc, #84]	; (80015d4 <MX_GPIO_Init+0x15c>)
 8001580:	f002 ff26 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <MX_GPIO_Init+0x160>)
 800159c:	f002 ff18 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4809      	ldr	r0, [pc, #36]	; (80015d8 <MX_GPIO_Init+0x160>)
 80015b4:	f002 ff0c 	bl	80043d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	210a      	movs	r1, #10
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f001 fecc 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f001 fee5 	bl	8003392 <HAL_NVIC_EnableIRQ>

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40020800 	.word	0x40020800

080015e4 <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d105      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x1e>
		{

z++;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001600:	801a      	strh	r2, [r3, #0]
         }
         **/

		}

}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40010000 	.word	0x40010000
 8001614:	20009010 	.word	0x20009010

08001618 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_TIMEx_CommutCallback+0x128>)
 8001626:	4293      	cmp	r3, r2
 8001628:	f040 8081 	bne.w	800172e <HAL_TIMEx_CommutCallback+0x116>
		{
	   /// TIM3 CLK 80 MHz, PSC =499,  80MGz/(PSC+1)*(TIM1->CCR1+1)
		/// 80 000 000/ 500 = 160 000 Hz
		/// T 1/160000 = 0,000000625
		okres_COM=	0.00000625 * TIM3->CCR1;
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_TIMEx_CommutCallback+0x12c>)
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff87 	bl	8000544 <__aeabi_ui2d>
 8001636:	a340      	add	r3, pc, #256	; (adr r3, 8001738 <HAL_TIMEx_CommutCallback+0x120>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe fffc 	bl	8000638 <__aeabi_dmul>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	4618      	mov	r0, r3
 8001646:	4621      	mov	r1, r4
 8001648:	f7ff faee 	bl	8000c28 <__aeabi_d2f>
 800164c:	4602      	mov	r2, r0
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <HAL_TIMEx_CommutCallback+0x130>)
 8001650:	601a      	str	r2, [r3, #0]
		// speed = 60 * 1/(12*okres_COM) [obr/min]
		speed=5 / okres_COM;
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_TIMEx_CommutCallback+0x130>)
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800165c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_TIMEx_CommutCallback+0x134>)
 8001662:	edc3 7a00 	vstr	s15, [r3]

		speed_tab[0]=okres_COM;
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_TIMEx_CommutCallback+0x130>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_TIMEx_CommutCallback+0x138>)
 800166c:	6013      	str	r3, [r2, #0]

		while (d>0)
 800166e:	e013      	b.n	8001698 <HAL_TIMEx_CommutCallback+0x80>
		{
			speed_tab[d]=speed_tab[d-1];
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <HAL_TIMEx_CommutCallback+0x13c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	4a37      	ldr	r2, [pc, #220]	; (8001754 <HAL_TIMEx_CommutCallback+0x13c>)
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	4610      	mov	r0, r2
 800167c:	4a34      	ldr	r2, [pc, #208]	; (8001750 <HAL_TIMEx_CommutCallback+0x138>)
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4932      	ldr	r1, [pc, #200]	; (8001750 <HAL_TIMEx_CommutCallback+0x138>)
 8001686:	0083      	lsls	r3, r0, #2
 8001688:	440b      	add	r3, r1
 800168a:	601a      	str	r2, [r3, #0]
			d--;
 800168c:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_TIMEx_CommutCallback+0x13c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <HAL_TIMEx_CommutCallback+0x13c>)
 8001696:	701a      	strb	r2, [r3, #0]
		while (d>0)
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_TIMEx_CommutCallback+0x13c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e7      	bne.n	8001670 <HAL_TIMEx_CommutCallback+0x58>
		}
		d=(ilosc_probek-1);
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_TIMEx_CommutCallback+0x13c>)
 80016a2:	220b      	movs	r2, #11
 80016a4:	701a      	strb	r2, [r3, #0]

		if(g<ilosc_probek)
 80016a6:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <HAL_TIMEx_CommutCallback+0x140>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b0b      	cmp	r3, #11
 80016ac:	d806      	bhi.n	80016bc <HAL_TIMEx_CommutCallback+0xa4>
			g++;
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_TIMEx_CommutCallback+0x140>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_TIMEx_CommutCallback+0x140>)
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e002      	b.n	80016c2 <HAL_TIMEx_CommutCallback+0xaa>

		else
			g=ilosc_probek;
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_TIMEx_CommutCallback+0x140>)
 80016be:	220c      	movs	r2, #12
 80016c0:	701a      	strb	r2, [r3, #0]



		f=0;
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_TIMEx_CommutCallback+0x144>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		while(f<g)
 80016c8:	e014      	b.n	80016f4 <HAL_TIMEx_CommutCallback+0xdc>
		{
			sum_speed=sum_speed + speed_tab[f];
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_TIMEx_CommutCallback+0x144>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4a20      	ldr	r2, [pc, #128]	; (8001750 <HAL_TIMEx_CommutCallback+0x138>)
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_TIMEx_CommutCallback+0x148>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_TIMEx_CommutCallback+0x148>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]
			f++;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_TIMEx_CommutCallback+0x144>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_TIMEx_CommutCallback+0x144>)
 80016f2:	701a      	strb	r2, [r3, #0]
		while(f<g)
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_TIMEx_CommutCallback+0x144>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_TIMEx_CommutCallback+0x140>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3e4      	bcc.n	80016ca <HAL_TIMEx_CommutCallback+0xb2>

		}

		average_speed= 5 / (sum_speed/(f+1));
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_TIMEx_CommutCallback+0x148>)
 8001702:	edd3 6a00 	vldr	s13, [r3]
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_TIMEx_CommutCallback+0x144>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001718:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800171c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_TIMEx_CommutCallback+0x14c>)
 8001722:	edc3 7a00 	vstr	s15, [r3]

		sum_speed=0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_TIMEx_CommutCallback+0x148>)
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

		}
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bd90      	pop	{r4, r7, pc}
 8001736:	bf00      	nop
 8001738:	eb1c432d 	.word	0xeb1c432d
 800173c:	3eda36e2 	.word	0x3eda36e2
 8001740:	40010000 	.word	0x40010000
 8001744:	40000400 	.word	0x40000400
 8001748:	20009024 	.word	0x20009024
 800174c:	20009044 	.word	0x20009044
 8001750:	20000338 	.word	0x20000338
 8001754:	20000000 	.word	0x20000000
 8001758:	200001fc 	.word	0x200001fc
 800175c:	20000368 	.word	0x20000368
 8001760:	2000903c 	.word	0x2000903c
 8001764:	20000304 	.word	0x20000304

08001768 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart3, &recive, 1);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13)
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001778:	d106      	bne.n	8001788 <HAL_GPIO_EXTI_Callback+0x20>
	{

		 HAL_TIM_Base_Start_IT(&htim1);
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_GPIO_EXTI_Callback+0x28>)
 800177c:	f004 fa2a 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
		 HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <HAL_GPIO_EXTI_Callback+0x28>)
 8001784:	f004 faba 	bl	8005cfc <HAL_TIM_PWM_Start_IT>
		**/


	}

}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200090a0 	.word	0x200090a0
 8001794:	00000000 	.word	0x00000000

08001798 <HAL_ADC_ConvCpltCallback>:

void   HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08d      	sub	sp, #52	; 0x34
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

				Ia=(pomiar[0]-2800) * 0.0044;  // 2.5 v / 3.6 v x 4095 = 2843
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe feda 	bl	8000564 <__aeabi_i2d>
 80017b0:	a35d      	add	r3, pc, #372	; (adr r3, 8001928 <HAL_ADC_ConvCpltCallback+0x190>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe ff3f 	bl	8000638 <__aeabi_dmul>
 80017ba:	4603      	mov	r3, r0
 80017bc:	460c      	mov	r4, r1
 80017be:	4618      	mov	r0, r3
 80017c0:	4621      	mov	r1, r4
 80017c2:	f7ff fa31 	bl	8000c28 <__aeabi_d2f>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_ADC_ConvCpltCallback+0x1a4>)
 80017ca:	601a      	str	r2, [r3, #0]
			    Ib=(pomiar[1]-2800) * 0.0044;  // 3.3/4095 * 1/0.185 [v/a] == 0,00435 A
 80017cc:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017ce:	885b      	ldrh	r3, [r3, #2]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fec4 	bl	8000564 <__aeabi_i2d>
 80017dc:	a352      	add	r3, pc, #328	; (adr r3, 8001928 <HAL_ADC_ConvCpltCallback+0x190>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ff29 	bl	8000638 <__aeabi_dmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	4618      	mov	r0, r3
 80017ec:	4621      	mov	r1, r4
 80017ee:	f7ff fa1b 	bl	8000c28 <__aeabi_d2f>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80017f6:	601a      	str	r2, [r3, #0]
			    Ic=(pomiar[2]-2800) * 0.0044;
 80017f8:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017fa:	889b      	ldrh	r3, [r3, #4]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feae 	bl	8000564 <__aeabi_i2d>
 8001808:	a347      	add	r3, pc, #284	; (adr r3, 8001928 <HAL_ADC_ConvCpltCallback+0x190>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff fa05 	bl	8000c28 <__aeabi_d2f>
 800181e:	4602      	mov	r2, r0
 8001820:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001822:	601a      	str	r2, [r3, #0]
			    theta_mech=((int16_t)(pomiar[3] * 0.0879));
 8001824:	4b44      	ldr	r3, [pc, #272]	; (8001938 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001826:	88db      	ldrh	r3, [r3, #6]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe9a 	bl	8000564 <__aeabi_i2d>
 8001830:	a33f      	add	r3, pc, #252	; (adr r3, 8001930 <HAL_ADC_ConvCpltCallback+0x198>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	4618      	mov	r0, r3
 8001840:	4621      	mov	r1, r4
 8001842:	f7ff f9a9 	bl	8000b98 <__aeabi_d2iz>
 8001846:	4603      	mov	r3, r0
 8001848:	b21b      	sxth	r3, r3
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
			    theta_el=theta_mech*2;
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001862:	4b3a      	ldr	r3, [pc, #232]	; (800194c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001864:	edc3 7a00 	vstr	s15, [r3]


			    arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_ADC_ConvCpltCallback+0x1a4>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	617a      	str	r2, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800187a:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001882:	edd7 7a05 	vldr	s15, [r7, #20]
 8001886:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001958 <HAL_ADC_ConvCpltCallback+0x1c0>
 800188a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800188e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001892:	eddf 6a32 	vldr	s13, [pc, #200]	; 800195c <HAL_ADC_ConvCpltCallback+0x1c4>
 8001896:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	edc3 7a00 	vstr	s15, [r3]
			    arm_sin_cos_f32(theta_el, &sinVal, &cosVal);
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_ADC_ConvCpltCallback+0x1b4>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	492d      	ldr	r1, [pc, #180]	; (8001960 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80018ac:	482d      	ldr	r0, [pc, #180]	; (8001964 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	f006 fe4b 	bl	800854c <arm_sin_cos_f32>
			    arm_park_f32(Ialpha, Ibeta, &pId, &pIq, sinVal, cosVal);
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80018bc:	6819      	ldr	r1, [r3, #0]
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80018cc:	6279      	str	r1, [r7, #36]	; 0x24
 80018ce:	4927      	ldr	r1, [pc, #156]	; (800196c <HAL_ADC_ConvCpltCallback+0x1d4>)
 80018d0:	6239      	str	r1, [r7, #32]
 80018d2:	61fa      	str	r2, [r7, #28]
 80018d4:	61bb      	str	r3, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80018d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018da:	edd7 7a06 	vldr	s15, [r7, #24]
 80018de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80018e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80018f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001900:	edd7 7a07 	vldr	s15, [r7, #28]
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800190c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	edc3 7a00 	vstr	s15, [r3]

						}

**/

}
 800191e:	bf00      	nop
 8001920:	3734      	adds	r7, #52	; 0x34
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	01a36e2f 	.word	0x01a36e2f
 800192c:	3f7205bc 	.word	0x3f7205bc
 8001930:	495182aa 	.word	0x495182aa
 8001934:	3fb6809d 	.word	0x3fb6809d
 8001938:	20009014 	.word	0x20009014
 800193c:	20000334 	.word	0x20000334
 8001940:	2000901c 	.word	0x2000901c
 8001944:	20009038 	.word	0x20009038
 8001948:	2000904c 	.word	0x2000904c
 800194c:	200002fc 	.word	0x200002fc
 8001950:	20009030 	.word	0x20009030
 8001954:	2000902c 	.word	0x2000902c
 8001958:	3f13cd3a 	.word	0x3f13cd3a
 800195c:	3f93cd3a 	.word	0x3f93cd3a
 8001960:	20009058 	.word	0x20009058
 8001964:	2000030c 	.word	0x2000030c
 8001968:	20009034 	.word	0x20009034
 800196c:	20000308 	.word	0x20000308

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001974:	f000 fe35 	bl	80025e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f88a 	bl	8001a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f7ff fd7c 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 8001980:	f7ff fc50 	bl	8001224 <MX_DMA_Init>
  MX_ETH_Init();
 8001984:	f7ff fc80 	bl	8001288 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001988:	f000 fc74 	bl	8002274 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800198c:	f000 fd76 	bl	800247c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001990:	f000 faca 	bl	8001f28 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001994:	f000 fc3e 	bl	8002214 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001998:	f7ff fb16 	bl	8000fc8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800199c:	f000 fa02 	bl	8001da4 <MX_TIM1_Init>
  ////////konfiguracja USART ///////////
//  HAL_UART_Receive_IT(&huart3, &recive, 1);


  //////// konfiguracja Timer 1  ////////////
   TIM1->ARR=0xFFFE;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <main+0xec>)
 80019a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->PSC=0;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <main+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
   TIM1->CCR1=63000;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <main+0xec>)
 80019b0:	f24f 6218 	movw	r2, #63000	; 0xf618
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34

   HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 80019b6:	2204      	movs	r2, #4
 80019b8:	2120      	movs	r1, #32
 80019ba:	4829      	ldr	r0, [pc, #164]	; (8001a60 <main+0xf0>)
 80019bc:	f005 fb86 	bl	80070cc <HAL_TIMEx_ConfigCommutEvent_IT>


   //////// konfiguracja Timer 3  ////////////
    TIM3->ARR=0xFFFE;
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <main+0xf4>)
 80019c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->PSC=499;
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <main+0xf4>)
 80019ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->CCR2=1;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <main+0xf4>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	639a      	str	r2, [r3, #56]	; 0x38
  //  TIM3->CCR4=1;
    HAL_TIMEx_HallSensor_Start(&htim3);
 80019d6:	4824      	ldr	r0, [pc, #144]	; (8001a68 <main+0xf8>)
 80019d8:	f005 fb50 	bl	800707c <HAL_TIMEx_HallSensor_Start>
  //  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);



 /////////// inicjalizacja pid ////////////////
    pid.Kp=1;
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <main+0xfc>)
 80019de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019e2:	619a      	str	r2, [r3, #24]
    pid.Ki=5;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <main+0xfc>)
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <main+0x100>)
 80019e8:	61da      	str	r2, [r3, #28]
    pid.Kd=0;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <main+0xfc>)
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&pid, 1);
 80019f2:	2101      	movs	r1, #1
 80019f4:	481d      	ldr	r0, [pc, #116]	; (8001a6c <main+0xfc>)
 80019f6:	f006 fd73 	bl	80084e0 <arm_pid_init_f32>


    //////// konfiguracja ADC  ////////////
     HAL_ADC_Start_DMA(&hadc1,pomiar,4);
 80019fa:	2204      	movs	r2, #4
 80019fc:	491d      	ldr	r1, [pc, #116]	; (8001a74 <main+0x104>)
 80019fe:	481e      	ldr	r0, [pc, #120]	; (8001a78 <main+0x108>)
 8001a00:	f000 fff4 	bl	80029ec <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8001a04:	2140      	movs	r1, #64	; 0x40
 8001a06:	481d      	ldr	r0, [pc, #116]	; (8001a7c <main+0x10c>)
 8001a08:	f002 fe8c 	bl	8004724 <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <main+0xaa>
		  a=1;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <main+0x110>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e002      	b.n	8001a20 <main+0xb0>
	  else
		  a=0;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <main+0x110>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	4818      	ldr	r0, [pc, #96]	; (8001a84 <main+0x114>)
 8001a24:	f002 fe7e 	bl	8004724 <HAL_GPIO_ReadPin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <main+0xc6>
	  		  b=1;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <main+0x118>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e002      	b.n	8001a3c <main+0xcc>
	  else
		  b=0;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <main+0x118>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))
 8001a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a40:	4810      	ldr	r0, [pc, #64]	; (8001a84 <main+0x114>)
 8001a42:	f002 fe6f 	bl	8004724 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <main+0xe4>
	  		  c=1;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <main+0x11c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	e7d7      	b.n	8001a04 <main+0x94>
	  else
		  c=0;
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <main+0x11c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8001a5a:	e7d3      	b.n	8001a04 <main+0x94>
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	200090a0 	.word	0x200090a0
 8001a64:	40000400 	.word	0x40000400
 8001a68:	20009060 	.word	0x20009060
 8001a6c:	20000310 	.word	0x20000310
 8001a70:	40a00000 	.word	0x40a00000
 8001a74:	20009014 	.word	0x20009014
 8001a78:	2000020c 	.word	0x2000020c
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	20009050 	.word	0x20009050
 8001a84:	40020800 	.word	0x40020800
 8001a88:	20000300 	.word	0x20000300
 8001a8c:	20009028 	.word	0x20009028

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0b4      	sub	sp, #208	; 0xd0
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a9a:	2230      	movs	r2, #48	; 0x30
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 fef8 	bl	8008894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	2284      	movs	r2, #132	; 0x84
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 fee9 	bl	8008894 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001ac2:	f002 ffc1 	bl	8004a48 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <SystemClock_Config+0x134>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a3e      	ldr	r2, [pc, #248]	; (8001bc4 <SystemClock_Config+0x134>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <SystemClock_Config+0x134>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <SystemClock_Config+0x138>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ae6:	4a38      	ldr	r2, [pc, #224]	; (8001bc8 <SystemClock_Config+0x138>)
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <SystemClock_Config+0x138>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b16:	2304      	movs	r3, #4
 8001b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b1c:	23a0      	movs	r3, #160	; 0xa0
 8001b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b28:	2309      	movs	r3, #9
 8001b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 ff98 	bl	8004a68 <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b3e:	f000 f847 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	230f      	movs	r3, #15
 8001b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b68:	2105      	movs	r1, #5
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fa20 	bl	8004fb0 <HAL_RCC_ClockConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001b76:	f000 f82b 	bl	8001bd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <SystemClock_Config+0x13c>)
 8001b7c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b96:	2304      	movs	r3, #4
 8001b98:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001b9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fbf8 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8001bb6:	f000 f80b 	bl	8001bd0 <Error_Handler>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	37d0      	adds	r7, #208	; 0xd0
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	00200180 	.word	0x00200180

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_MspInit+0x44>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_MspInit+0x44>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_MspInit+0x44>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x44>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_MspInit+0x44>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_MspInit+0x44>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 fcee 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA1_Stream3_IRQHandler+0x10>)
 8001c8a:	f001 fccd 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20009160 	.word	0x20009160

08001c98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <ADC_IRQHandler+0x10>)
 8001c9e:	f000 fd63 	bl	8002768 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000020c 	.word	0x2000020c

08001cac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cb2:	f004 f8ad 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200090a0 	.word	0x200090a0

08001cc0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cc6:	f004 f8a3 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200090a0 	.word	0x200090a0

08001cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART2_IRQHandler+0x10>)
 8001cda:	f005 fbc5 	bl	8007468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200091c0 	.word	0x200091c0

08001ce8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART3_IRQHandler+0x10>)
 8001cee:	f005 fbbb 	bl	8007468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200090e0 	.word	0x200090e0

08001cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d04:	f002 fd40 	bl	8004788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <DMA2_Stream0_IRQHandler+0x10>)
 8001d12:	f001 fc89 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000254 	.word	0x20000254

08001d20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x50>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x16>
		heap_end = &end;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <_sbrk+0x50>)
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <_sbrk+0x54>)
 8001d34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <_sbrk+0x50>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <_sbrk+0x50>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	466a      	mov	r2, sp
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d907      	bls.n	8001d5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d4a:	f006 fd79 	bl	8008840 <__errno>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	230c      	movs	r3, #12
 8001d52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e006      	b.n	8001d68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <_sbrk+0x50>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <_sbrk+0x50>)
 8001d64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000200 	.word	0x20000200
 8001d74:	20009650 	.word	0x20009650

08001d78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <SystemInit+0x28>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <SystemInit+0x28>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SystemInit+0x28>)
 8001d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d92:	609a      	str	r2, [r3, #8]
#endif
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b09e      	sub	sp, #120	; 0x78
 8001da8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001db8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de8:	463b      	mov	r3, r7
 8001dea:	222c      	movs	r2, #44	; 0x2c
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f006 fd50 	bl	8008894 <memset>

  htim1.Instance = TIM1;
 8001df4:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001df6:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <MX_TIM1_Init+0x180>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dfa:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e02:	2220      	movs	r2, #32
 8001e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e1e:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e20:	f003 feac 	bl	8005b7c <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001e2a:	f7ff fed1 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4839      	ldr	r0, [pc, #228]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e3c:	f004 fa9e 	bl	800637c <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e46:	f7ff fec3 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4a:	4835      	ldr	r0, [pc, #212]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e4c:	f003 ff21 	bl	8005c92 <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001e56:	f7ff febb 	bl	8001bd0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e66:	4619      	mov	r1, r3
 8001e68:	482d      	ldr	r0, [pc, #180]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e6a:	f004 fb41 	bl	80064f0 <HAL_TIM_SlaveConfigSynchro>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001e74:	f7ff feac 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4825      	ldr	r0, [pc, #148]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001e8c:	f005 f97e 	bl	800718c <HAL_TIMEx_MasterConfigSynchronization>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001e96:	f7ff fe9b 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9a:	2360      	movs	r3, #96	; 0x60
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001ec0:	f004 f944 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001eca:	f7ff fe81 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4619      	mov	r1, r3
 8001f02:	4807      	ldr	r0, [pc, #28]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001f04:	f005 f9d0 	bl	80072a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8001f0e:	f7ff fe5f 	bl	8001bd0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <MX_TIM1_Init+0x17c>)
 8001f14:	f000 f91e 	bl	8002154 <HAL_TIM_MspPostInit>

}
 8001f18:	bf00      	nop
 8001f1a:	3778      	adds	r7, #120	; 0x78
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200090a0 	.word	0x200090a0
 8001f24:	40010000 	.word	0x40010000

08001f28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b092      	sub	sp, #72	; 0x48
 8001f2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001f68:	4b35      	ldr	r3, [pc, #212]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f6a:	4a36      	ldr	r2, [pc, #216]	; (8002044 <MX_TIM3_Init+0x11c>)
 8001f6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f8c:	482c      	ldr	r0, [pc, #176]	; (8002040 <MX_TIM3_Init+0x118>)
 8001f8e:	f003 fdf5 	bl	8005b7c <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001f98:	f7ff fe1a 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4825      	ldr	r0, [pc, #148]	; (8002040 <MX_TIM3_Init+0x118>)
 8001faa:	f004 f9e7 	bl	800637c <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001fb4:	f7ff fe0c 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001fb8:	4821      	ldr	r0, [pc, #132]	; (8002040 <MX_TIM3_Init+0x118>)
 8001fba:	f003 fe35 	bl	8005c28 <HAL_TIM_OC_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001fc4:	f7ff fe04 	bl	8001bd0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Filter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.Commutation_Delay = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4818      	ldr	r0, [pc, #96]	; (8002040 <MX_TIM3_Init+0x118>)
 8001fe0:	f004 ffaa 	bl	8006f38 <HAL_TIMEx_HallSensor_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001fea:	f7ff fdf1 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001fee:	2350      	movs	r3, #80	; 0x50
 8001ff0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4810      	ldr	r0, [pc, #64]	; (8002040 <MX_TIM3_Init+0x118>)
 8001ffe:	f005 f8c5 	bl	800718c <HAL_TIMEx_MasterConfigSynchronization>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002008:	f7ff fde2 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800200c:	2330      	movs	r3, #48	; 0x30
 800200e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	220c      	movs	r2, #12
 8002020:	4619      	mov	r1, r3
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <MX_TIM3_Init+0x118>)
 8002024:	f004 f814 	bl	8006050 <HAL_TIM_OC_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 800202e:	f7ff fdcf 	bl	8001bd0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002032:	4803      	ldr	r0, [pc, #12]	; (8002040 <MX_TIM3_Init+0x118>)
 8002034:	f000 f88e 	bl	8002154 <HAL_TIM_MspPostInit>

}
 8002038:	bf00      	nop
 800203a:	3748      	adds	r7, #72	; 0x48
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20009060 	.word	0x20009060
 8002044:	40000400 	.word	0x40000400

08002048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a36      	ldr	r2, [pc, #216]	; (8002140 <HAL_TIM_Base_MspInit+0xf8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d11c      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a35      	ldr	r2, [pc, #212]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2103      	movs	r1, #3
 8002086:	2019      	movs	r0, #25
 8002088:	f001 f967 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800208c:	2019      	movs	r0, #25
 800208e:	f001 f980 	bl	8003392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2105      	movs	r1, #5
 8002096:	201a      	movs	r0, #26
 8002098:	f001 f95f 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800209c:	201a      	movs	r0, #26
 800209e:	f001 f978 	bl	8003392 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020a2:	e049      	b.n	8002138 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_TIM_Base_MspInit+0x100>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d144      	bne.n	8002138 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a24      	ldr	r2, [pc, #144]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_TIM_Base_MspInit+0xfc>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HALL_W_Pin;
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fe:	2301      	movs	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002102:	2302      	movs	r3, #2
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002106:	2302      	movs	r3, #2
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HALL_W_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	480e      	ldr	r0, [pc, #56]	; (800214c <HAL_TIM_Base_MspInit+0x104>)
 8002112:	f002 f95d 	bl	80043d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_V_Pin|HALL_U_Pin;
 8002116:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002120:	2301      	movs	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002124:	2302      	movs	r3, #2
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002128:	2302      	movs	r3, #2
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <HAL_TIM_Base_MspInit+0x108>)
 8002134:	f002 f94c 	bl	80043d0 <HAL_GPIO_Init>
}
 8002138:	bf00      	nop
 800213a:	3730      	adds	r7, #48	; 0x30
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40010000 	.word	0x40010000
 8002144:	40023800 	.word	0x40023800
 8002148:	40000400 	.word	0x40000400
 800214c:	40020000 	.word	0x40020000
 8002150:	40020800 	.word	0x40020800

08002154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a23      	ldr	r2, [pc, #140]	; (8002200 <HAL_TIM_MspPostInit+0xac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d11d      	bne.n	80021b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_TIM_MspPostInit+0xb0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_TIM_MspPostInit+0xb0>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_TIM_MspPostInit+0xb0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 800218e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002198:	2302      	movs	r3, #2
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4817      	ldr	r0, [pc, #92]	; (8002208 <HAL_TIM_MspPostInit+0xb4>)
 80021ac:	f002 f910 	bl	80043d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021b0:	e021      	b.n	80021f6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_TIM_MspPostInit+0xb8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d11c      	bne.n	80021f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_TIM_MspPostInit+0xb0>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_TIM_MspPostInit+0xb0>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6313      	str	r3, [r2, #48]	; 0x30
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_TIM_MspPostInit+0xb0>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH4_HALL_OUT_Pin;
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021e6:	2302      	movs	r3, #2
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_CH4_HALL_OUT_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	; (8002210 <HAL_TIM_MspPostInit+0xbc>)
 80021f2:	f002 f8ed 	bl	80043d0 <HAL_GPIO_Init>
}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800
 8002208:	40021000 	.word	0x40021000
 800220c:	40000400 	.word	0x40000400
 8002210:	40020800 	.word	0x40020800

08002214 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_USART2_UART_Init+0x58>)
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <MX_USART2_UART_Init+0x5c>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_USART2_UART_Init+0x58>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_USART2_UART_Init+0x58>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_USART2_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002258:	f005 f8b8 	bl	80073cc <HAL_UART_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002262:	f7ff fcb5 	bl	8001bd0 <Error_Handler>
  }

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200091c0 	.word	0x200091c0
 8002270:	40004400 	.word	0x40004400

08002274 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <MX_USART3_UART_Init+0x58>)
 800227a:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <MX_USART3_UART_Init+0x5c>)
 800227c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <MX_USART3_UART_Init+0x58>)
 8002280:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002284:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <MX_USART3_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_USART3_UART_Init+0x58>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_USART3_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_USART3_UART_Init+0x58>)
 800229a:	220c      	movs	r2, #12
 800229c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_USART3_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_USART3_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_USART3_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_USART3_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_USART3_UART_Init+0x58>)
 80022b8:	f005 f888 	bl	80073cc <HAL_UART_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022c2:	f7ff fc85 	bl	8001bd0 <Error_Handler>
  }

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200090e0 	.word	0x200090e0
 80022d0:	40004800 	.word	0x40004800

080022d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5b      	ldr	r2, [pc, #364]	; (8002460 <HAL_UART_MspInit+0x18c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d14c      	bne.n	8002390 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f6:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_UART_MspInit+0x190>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_UART_MspInit+0x190>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_UART_MspInit+0x190>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b55      	ldr	r3, [pc, #340]	; (8002464 <HAL_UART_MspInit+0x190>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a54      	ldr	r2, [pc, #336]	; (8002464 <HAL_UART_MspInit+0x190>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_UART_MspInit+0x190>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002326:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_UART_MspInit+0x190>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a4e      	ldr	r2, [pc, #312]	; (8002464 <HAL_UART_MspInit+0x190>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_UART_MspInit+0x190>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800233e:	2308      	movs	r3, #8
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800234e:	2307      	movs	r3, #7
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4843      	ldr	r0, [pc, #268]	; (8002468 <HAL_UART_MspInit+0x194>)
 800235a:	f002 f839 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235e:	2320      	movs	r3, #32
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800236e:	2307      	movs	r3, #7
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	483c      	ldr	r0, [pc, #240]	; (800246c <HAL_UART_MspInit+0x198>)
 800237a:	f002 f829 	bl	80043d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2108      	movs	r1, #8
 8002382:	2026      	movs	r0, #38	; 0x26
 8002384:	f000 ffe9 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002388:	2026      	movs	r0, #38	; 0x26
 800238a:	f001 f802 	bl	8003392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800238e:	e063      	b.n	8002458 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART3)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a36      	ldr	r2, [pc, #216]	; (8002470 <HAL_UART_MspInit+0x19c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d15e      	bne.n	8002458 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_UART_MspInit+0x190>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a31      	ldr	r2, [pc, #196]	; (8002464 <HAL_UART_MspInit+0x190>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_UART_MspInit+0x190>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_UART_MspInit+0x190>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <HAL_UART_MspInit+0x190>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_UART_MspInit+0x190>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023dc:	2307      	movs	r3, #7
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4821      	ldr	r0, [pc, #132]	; (800246c <HAL_UART_MspInit+0x198>)
 80023e8:	f001 fff2 	bl	80043d0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_UART_MspInit+0x1a4>)
 80023f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 80023f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800242c:	4811      	ldr	r0, [pc, #68]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 800242e:	f000 ffcb 	bl	80033c8 <HAL_DMA_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0x168>
      Error_Handler();
 8002438:	f7ff fbca 	bl	8001bd0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002440:	669a      	str	r2, [r3, #104]	; 0x68
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_UART_MspInit+0x1a0>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 9, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2109      	movs	r1, #9
 800244c:	2027      	movs	r0, #39	; 0x27
 800244e:	f000 ff84 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002452:	2027      	movs	r0, #39	; 0x27
 8002454:	f000 ff9d 	bl	8003392 <HAL_NVIC_EnableIRQ>
}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	; 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40004400 	.word	0x40004400
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40004800 	.word	0x40004800
 8002474:	20009160 	.word	0x20009160
 8002478:	40026058 	.word	0x40026058

0800247c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800248a:	2206      	movs	r2, #6
 800248c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002490:	2202      	movs	r2, #2
 8002492:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800249c:	2202      	movs	r2, #2
 800249e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c0:	f002 f97a 	bl	80047b8 <HAL_PCD_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024ca:	f7ff fb81 	bl	8001bd0 <Error_Handler>
  }

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20009240 	.word	0x20009240

080024d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f8:	d141      	bne.n	800257e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002512:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002524:	230a      	movs	r3, #10
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	4817      	ldr	r0, [pc, #92]	; (800258c <HAL_PCD_MspInit+0xb4>)
 8002530:	f001 ff4e 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4810      	ldr	r0, [pc, #64]	; (800258c <HAL_PCD_MspInit+0xb4>)
 800254a:	f001 ff41 	bl	80043d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	6353      	str	r3, [r2, #52]	; 0x34
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_PCD_MspInit+0xb0>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40020000 	.word	0x40020000

08002590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002594:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002596:	e003      	b.n	80025a0 <LoopCopyDataInit>

08002598 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800259a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800259c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800259e:	3104      	adds	r1, #4

080025a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025a8:	d3f6      	bcc.n	8002598 <CopyDataInit>
  ldr  r2, =_sbss
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025ac:	e002      	b.n	80025b4 <LoopFillZerobss>

080025ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025b0:	f842 3b04 	str.w	r3, [r2], #4

080025b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025b8:	d3f9      	bcc.n	80025ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ba:	f7ff fbdd 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025be:	f006 f945 	bl	800884c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c2:	f7ff f9d5 	bl	8001970 <main>
  bx  lr    
 80025c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80025cc:	0800ce18 	.word	0x0800ce18
  ldr  r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025d4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80025d8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80025dc:	2000964c 	.word	0x2000964c

080025e0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <CAN1_RX0_IRQHandler>

080025e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e6:	2003      	movs	r0, #3
 80025e8:	f000 feac 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f000 f805 	bl	80025fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80025f2:	f7ff faf5 	bl	8001be0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x54>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fec7 	bl	80033ae <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00e      	b.n	8002648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d80a      	bhi.n	8002646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f000 fe8f 	bl	800335a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <HAL_InitTick+0x5c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000004 	.word	0x20000004
 8002654:	2000000c 	.word	0x2000000c
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c
 8002680:	20009644 	.word	0x20009644

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20009644 	.word	0x20009644

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_Delay+0x40>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e031      	b.n	800275a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fcde 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_ADC_Init+0x84>)
 8002724:	4013      	ands	r3, r2
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fbb2 	bl	8002e98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
 800274a:	e001      	b.n	8002750 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	ffffeefd 	.word	0xffffeefd

08002768 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b20      	cmp	r3, #32
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d049      	beq.n	800283e <HAL_ADC_IRQHandler+0xd6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d046      	beq.n	800283e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d12b      	bne.n	800282e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d127      	bne.n	800282e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d119      	bne.n	800282e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0220 	bic.w	r2, r2, #32
 8002808:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe ffb2 	bl	8001798 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0212 	mvn.w	r2, #18
 800283c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d057      	beq.n	8002920 <HAL_ADC_IRQHandler+0x1b8>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d054      	beq.n	8002920 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d139      	bne.n	8002910 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d12b      	bne.n	8002910 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d124      	bne.n	8002910 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11d      	bne.n	8002910 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d119      	bne.n	8002910 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fc3d 	bl	8003190 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 020c 	mvn.w	r2, #12
 800291e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d017      	beq.n	8002982 <HAL_ADC_IRQHandler+0x21a>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d014      	beq.n	8002982 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10d      	bne.n	8002982 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f932 	bl	8002bdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0201 	mvn.w	r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b20      	cmp	r3, #32
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x27a>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f043 0202 	orr.w	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0220 	mvn.w	r2, #32
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f90c 	bl	8002bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0220 	mvn.w	r2, #32
 80029e0:	601a      	str	r2, [r3, #0]
  }
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Start_DMA+0x1e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0c7      	b.n	8002b9a <HAL_ADC_Start_DMA+0x1ae>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d018      	beq.n	8002a52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a30:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_ADC_Start_DMA+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5c      	ldr	r2, [pc, #368]	; (8002ba8 <HAL_ADC_Start_DMA+0x1bc>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9a      	lsrs	r2, r3, #18
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 809b 	bne.w	8002b98 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_ADC_Start_DMA+0x1c0>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d106      	bne.n	8002aac <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f023 0206 	bic.w	r2, r3, #6
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aaa:	e002      	b.n	8002ab2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <HAL_ADC_Start_DMA+0x1c4>)
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4a3b      	ldr	r2, [pc, #236]	; (8002bb4 <HAL_ADC_Start_DMA+0x1c8>)
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	4a3a      	ldr	r2, [pc, #232]	; (8002bb8 <HAL_ADC_Start_DMA+0x1cc>)
 8002ad0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ada:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002aea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	334c      	adds	r3, #76	; 0x4c
 8002b06:	4619      	mov	r1, r3
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f000 fd0a 	bl	8003524 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_ADC_Start_DMA+0x1d0>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10f      	bne.n	8002b3c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d136      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	e02d      	b.n	8002b98 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_ADC_Start_DMA+0x1d4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10e      	bne.n	8002b64 <HAL_ADC_Start_DMA+0x178>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b62:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_ADC_Start_DMA+0x1d0>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d113      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_ADC_Start_DMA+0x1d8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10e      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x1ac>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b96:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	fffff8fe 	.word	0xfffff8fe
 8002bb0:	0800308d 	.word	0x0800308d
 8002bb4:	08003147 	.word	0x08003147
 8002bb8:	08003163 	.word	0x08003163
 8002bbc:	40012300 	.word	0x40012300
 8002bc0:	40012000 	.word	0x40012000
 8002bc4:	40012200 	.word	0x40012200

08002bc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e12a      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x272>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	d93a      	bls.n	8002ca6 <HAL_ADC_ConfigChannel+0xa2>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c38:	d035      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68d9      	ldr	r1, [r3, #12]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b1e      	subs	r3, #30
 8002c50:	2207      	movs	r2, #7
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a87      	ldr	r2, [pc, #540]	; (8002e84 <HAL_ADC_ConfigChannel+0x280>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	061a      	lsls	r2, r3, #24
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c7e:	e035      	b.n	8002cec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68d9      	ldr	r1, [r3, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4403      	add	r3, r0
 8002c98:	3b1e      	subs	r3, #30
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ca4:	e022      	b.n	8002cec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6919      	ldr	r1, [r3, #16]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	2207      	movs	r2, #7
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6919      	ldr	r1, [r3, #16]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4603      	mov	r3, r0
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4403      	add	r3, r0
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b06      	cmp	r3, #6
 8002cf2:	d824      	bhi.n	8002d3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	3b05      	subs	r3, #5
 8002d06:	221f      	movs	r2, #31
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	400a      	ands	r2, r1
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b05      	subs	r3, #5
 8002d30:	fa00 f203 	lsl.w	r2, r0, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3c:	e04c      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d824      	bhi.n	8002d90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	3b23      	subs	r3, #35	; 0x23
 8002d58:	221f      	movs	r2, #31
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	400a      	ands	r2, r1
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b23      	subs	r3, #35	; 0x23
 8002d82:	fa00 f203 	lsl.w	r2, r0, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d8e:	e023      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b41      	subs	r3, #65	; 0x41
 8002da2:	221f      	movs	r2, #31
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b41      	subs	r3, #65	; 0x41
 8002dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <HAL_ADC_ConfigChannel+0x284>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10a      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1f4>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_ADC_ConfigChannel+0x288>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <HAL_ADC_ConfigChannel+0x288>)
 8002df2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002df6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_ADC_ConfigChannel+0x284>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d109      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x212>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d105      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_ADC_ConfigChannel+0x288>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_ADC_ConfigChannel+0x288>)
 8002e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <HAL_ADC_ConfigChannel+0x284>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d125      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x268>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_ADC_ConfigChannel+0x280>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <HAL_ADC_ConfigChannel+0x22e>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b11      	cmp	r3, #17
 8002e30:	d11c      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_ADC_ConfigChannel+0x288>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_ADC_ConfigChannel+0x288>)
 8002e38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_ADC_ConfigChannel+0x280>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_ADC_ConfigChannel+0x28c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_ADC_ConfigChannel+0x290>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0c9a      	lsrs	r2, r3, #18
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e5e:	e002      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f9      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	10000012 	.word	0x10000012
 8002e88:	40012000 	.word	0x40012000
 8002e8c:	40012300 	.word	0x40012300
 8002e90:	20000004 	.word	0x20000004
 8002e94:	431bde83 	.word	0x431bde83

08002e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <ADC_Init+0x1ec>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <ADC_Init+0x1ec>)
 8002ea6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002eaa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002eac:	4b75      	ldr	r3, [pc, #468]	; (8003084 <ADC_Init+0x1ec>)
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4973      	ldr	r1, [pc, #460]	; (8003084 <ADC_Init+0x1ec>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	4a58      	ldr	r2, [pc, #352]	; (8003088 <ADC_Init+0x1f0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6899      	ldr	r1, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e00f      	b.n	8002f92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0202 	bic.w	r2, r2, #2
 8002fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	005a      	lsls	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	3b01      	subs	r3, #1
 8002fec:	035a      	lsls	r2, r3, #13
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	e007      	b.n	8003008 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003006:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	3b01      	subs	r3, #1
 8003024:	051a      	lsls	r2, r3, #20
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800303c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800304a:	025a      	lsls	r2, r3, #9
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	029a      	lsls	r2, r3, #10
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40012300 	.word	0x40012300
 8003088:	0f000001 	.word	0x0f000001

0800308c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d13c      	bne.n	8003120 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d12b      	bne.n	8003118 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d127      	bne.n	8003118 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d119      	bne.n	8003118 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0220 	bic.w	r2, r2, #32
 80030f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7fe fb3d 	bl	8001798 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800311e:	e00e      	b.n	800313e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fd5f 	bl	8002bf0 <HAL_ADC_ErrorCallback>
}
 8003132:	e004      	b.n	800313e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff fd37 	bl	8002bc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f043 0204 	orr.w	r2, r3, #4
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff fd34 	bl	8002bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <__NVIC_SetPriorityGrouping+0x40>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x40>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00
 80031e8:	05fa0000 	.word	0x05fa0000

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d301      	bcc.n	8003316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <SysTick_Config+0x40>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331e:	210f      	movs	r1, #15
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f7ff ff8e 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <SysTick_Config+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SysTick_Config+0x40>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010

08003344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff29 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800336c:	f7ff ff3e 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7ff ff8e 	bl	8003298 <NVIC_EncodePriority>
 800337c:	4602      	mov	r2, r0
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff5d 	bl	8003244 <__NVIC_SetPriority>
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff31 	bl	8003208 <__NVIC_EnableIRQ>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffa2 	bl	8003300 <SysTick_Config>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033d4:	f7ff f956 	bl	8002684 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e099      	b.n	8003518 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003404:	e00f      	b.n	8003426 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003406:	f7ff f93d 	bl	8002684 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b05      	cmp	r3, #5
 8003412:	d908      	bls.n	8003426 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e078      	b.n	8003518 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e8      	bne.n	8003406 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_DMA_Init+0x158>)
 8003440:	4013      	ands	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003452:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b04      	cmp	r3, #4
 800347e:	d107      	bne.n	8003490 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4313      	orrs	r3, r2
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d117      	bne.n	80034ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00e      	beq.n	80034ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fa99 	bl	8003a04 <DMA_CheckFifoParam>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034e6:	2301      	movs	r3, #1
 80034e8:	e016      	b.n	8003518 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa50 	bl	8003998 <DMA_CalcBaseAndBitshift>
 80034f8:	4603      	mov	r3, r0
 80034fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	223f      	movs	r2, #63	; 0x3f
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	f010803f 	.word	0xf010803f

08003524 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_DMA_Start_IT+0x26>
 8003546:	2302      	movs	r3, #2
 8003548:	e048      	b.n	80035dc <HAL_DMA_Start_IT+0xb8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d137      	bne.n	80035ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f9e2 	bl	800393c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	223f      	movs	r2, #63	; 0x3f
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0216 	orr.w	r2, r2, #22
 8003592:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0208 	orr.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e005      	b.n	80035da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00c      	b.n	800361c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003634:	4b92      	ldr	r3, [pc, #584]	; (8003880 <HAL_DMA_IRQHandler+0x258>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a92      	ldr	r2, [pc, #584]	; (8003884 <HAL_DMA_IRQHandler+0x25c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2208      	movs	r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2210      	movs	r2, #16
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	2210      	movs	r2, #16
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e01f      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e016      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0208 	bic.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	2220      	movs	r2, #32
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 808e 	beq.w	80038c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8086 	beq.w	80038c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d136      	bne.n	8003840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0216 	bic.w	r2, r2, #22
 80037e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_DMA_IRQHandler+0x1da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	223f      	movs	r2, #63	; 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07d      	beq.n	8003932 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        }
        return;
 800383e:	e078      	b.n	8003932 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01c      	beq.n	8003888 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d030      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e02b      	b.n	80038c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d027      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
 800387e:	e022      	b.n	80038c6 <HAL_DMA_IRQHandler+0x29e>
 8003880:	20000004 	.word	0x20000004
 8003884:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0210 	bic.w	r2, r2, #16
 80038a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d032      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d022      	beq.n	8003920 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2205      	movs	r2, #5
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3301      	adds	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d307      	bcc.n	800390e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f2      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x2ca>
 800390c:	e000      	b.n	8003910 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800390e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
 8003930:	e000      	b.n	8003934 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003932:	bf00      	nop
    }
  }
}
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop

0800393c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d108      	bne.n	800397c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397a:	e007      	b.n	800398c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b10      	subs	r3, #16
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <DMA_CalcBaseAndBitshift+0x60>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <DMA_CalcBaseAndBitshift+0x64>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d908      	bls.n	80039d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <DMA_CalcBaseAndBitshift+0x68>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	659a      	str	r2, [r3, #88]	; 0x58
 80039d6:	e006      	b.n	80039e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <DMA_CalcBaseAndBitshift+0x68>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	aaaaaaab 	.word	0xaaaaaaab
 80039fc:	0800c348 	.word	0x0800c348
 8003a00:	fffffc00 	.word	0xfffffc00

08003a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11f      	bne.n	8003a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d855      	bhi.n	8003ad0 <DMA_CheckFifoParam+0xcc>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x28>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003ad1 	.word	0x08003ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d045      	beq.n	8003ad4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e042      	b.n	8003ad4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a56:	d13f      	bne.n	8003ad8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5c:	e03c      	b.n	8003ad8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	d121      	bne.n	8003aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d836      	bhi.n	8003adc <DMA_CheckFifoParam+0xd8>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <DMA_CheckFifoParam+0x70>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a8b 	.word	0x08003a8b
 8003a7c:	08003a85 	.word	0x08003a85
 8003a80:	08003a9d 	.word	0x08003a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e02f      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d024      	beq.n	8003ae0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9a:	e021      	b.n	8003ae0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa4:	d11e      	bne.n	8003ae4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aaa:	e01b      	b.n	8003ae4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d902      	bls.n	8003ab8 <DMA_CheckFifoParam+0xb4>
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d003      	beq.n	8003abe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab6:	e018      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e015      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ace:	e00b      	b.n	8003ae8 <DMA_CheckFifoParam+0xe4>
      break;
 8003ad0:	bf00      	nop
 8003ad2:	e00a      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003ad4:	bf00      	nop
 8003ad6:	e008      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003ad8:	bf00      	nop
 8003ada:	e006      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003adc:	bf00      	nop
 8003ade:	e004      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003ae0:	bf00      	nop
 8003ae2:	e002      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;   
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003ae8:	bf00      	nop
    }
  } 
  
  return status; 
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003b08:	4ba9      	ldr	r3, [pc, #676]	; (8003db0 <HAL_ETH_Init+0x2b8>)
 8003b0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e183      	b.n	8003e26 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fbe8 	bl	8001308 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b38:	4b9e      	ldr	r3, [pc, #632]	; (8003db4 <HAL_ETH_Init+0x2bc>)
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	4a9d      	ldr	r2, [pc, #628]	; (8003db4 <HAL_ETH_Init+0x2bc>)
 8003b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b42:	6453      	str	r3, [r2, #68]	; 0x44
 8003b44:	4b9b      	ldr	r3, [pc, #620]	; (8003db4 <HAL_ETH_Init+0x2bc>)
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b50:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <HAL_ETH_Init+0x2c0>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a98      	ldr	r2, [pc, #608]	; (8003db8 <HAL_ETH_Init+0x2c0>)
 8003b56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b5a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b5c:	4b96      	ldr	r3, [pc, #600]	; (8003db8 <HAL_ETH_Init+0x2c0>)
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4994      	ldr	r1, [pc, #592]	; (8003db8 <HAL_ETH_Init+0x2c0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b80:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b82:	f7fe fd7f 	bl	8002684 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003b88:	e011      	b.n	8003bae <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003b8a:	f7fe fd7b 	bl	8002684 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b98:	d909      	bls.n	8003bae <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e13b      	b.n	8003e26 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e4      	bne.n	8003b8a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f023 031c 	bic.w	r3, r3, #28
 8003bce:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003bd0:	f001 fbb2 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8003bd4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4a78      	ldr	r2, [pc, #480]	; (8003dbc <HAL_ETH_Init+0x2c4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d908      	bls.n	8003bf0 <HAL_ETH_Init+0xf8>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4a77      	ldr	r2, [pc, #476]	; (8003dc0 <HAL_ETH_Init+0x2c8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d804      	bhi.n	8003bf0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e027      	b.n	8003c40 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	4a73      	ldr	r2, [pc, #460]	; (8003dc0 <HAL_ETH_Init+0x2c8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d908      	bls.n	8003c0a <HAL_ETH_Init+0x112>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4a72      	ldr	r2, [pc, #456]	; (8003dc4 <HAL_ETH_Init+0x2cc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d804      	bhi.n	8003c0a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f043 030c 	orr.w	r3, r3, #12
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	e01a      	b.n	8003c40 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4a6d      	ldr	r2, [pc, #436]	; (8003dc4 <HAL_ETH_Init+0x2cc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d903      	bls.n	8003c1a <HAL_ETH_Init+0x122>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4a6c      	ldr	r2, [pc, #432]	; (8003dc8 <HAL_ETH_Init+0x2d0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d911      	bls.n	8003c3e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4a6a      	ldr	r2, [pc, #424]	; (8003dc8 <HAL_ETH_Init+0x2d0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d908      	bls.n	8003c34 <HAL_ETH_Init+0x13c>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4a69      	ldr	r2, [pc, #420]	; (8003dcc <HAL_ETH_Init+0x2d4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d804      	bhi.n	8003c34 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e005      	b.n	8003c40 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f043 0310 	orr.w	r3, r3, #16
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e000      	b.n	8003c40 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003c3e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003c48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f956 	bl	8003f00 <HAL_ETH_WritePHYRegister>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003c5e:	6939      	ldr	r1, [r7, #16]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f9b3 	bl	8003fcc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0d9      	b.n	8003e26 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003c72:	20ff      	movs	r0, #255	; 0xff
 8003c74:	f7fe fd12 	bl	800269c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a7 	beq.w	8003dd0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c82:	f7fe fcff 	bl	8002684 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2101      	movs	r1, #1
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8cd 	bl	8003e30 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003c96:	f7fe fcf5 	bl	8002684 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d90f      	bls.n	8003cc8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f98c 	bl	8003fcc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0ae      	b.n	8003e26 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0da      	beq.n	8003c88 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003cd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f911 	bl	8003f00 <HAL_ETH_WritePHYRegister>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003ce8:	6939      	ldr	r1, [r7, #16]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f96e 	bl	8003fcc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e094      	b.n	8003e26 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe fcc2 	bl	8002684 <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	461a      	mov	r2, r3
 8003d08:	2101      	movs	r1, #1
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f890 	bl	8003e30 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003d10:	f7fe fcb8 	bl	8002684 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d90f      	bls.n	8003d42 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d26:	6939      	ldr	r1, [r7, #16]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f94f 	bl	8003fcc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e071      	b.n	8003e26 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0da      	beq.n	8003d02 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	461a      	mov	r2, r3
 8003d52:	211f      	movs	r1, #31
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f86b 	bl	8003e30 <HAL_ETH_ReadPHYRegister>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00b      	beq.n	8003d78 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003d64:	6939      	ldr	r1, [r7, #16]
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f930 	bl	8003fcc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003d74:	2301      	movs	r3, #1
 8003d76:	e056      	b.n	8003e26 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	e002      	b.n	8003d92 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	e037      	b.n	8003e14 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	e032      	b.n	8003e14 <HAL_ETH_Init+0x31c>
 8003dae:	bf00      	nop
 8003db0:	03938700 	.word	0x03938700
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	01312cff 	.word	0x01312cff
 8003dc0:	02160ebf 	.word	0x02160ebf
 8003dc4:	039386ff 	.word	0x039386ff
 8003dc8:	05f5e0ff 	.word	0x05f5e0ff
 8003dcc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	08db      	lsrs	r3, r3, #3
 8003dd6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003de0:	4313      	orrs	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	2100      	movs	r1, #0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f889 	bl	8003f00 <HAL_ETH_WritePHYRegister>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003df8:	6939      	ldr	r1, [r7, #16]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8e6 	bl	8003fcc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e00c      	b.n	8003e26 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003e0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003e10:	f7fe fc44 	bl	800269c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003e14:	6939      	ldr	r1, [r7, #16]
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8d8 	bl	8003fcc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop

08003e30 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b82      	cmp	r3, #130	; 0x82
 8003e50:	d101      	bne.n	8003e56 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e050      	b.n	8003ef8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2282      	movs	r2, #130	; 0x82
 8003e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 031c 	and.w	r3, r3, #28
 8003e6c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8a1b      	ldrh	r3, [r3, #16]
 8003e72:	02db      	lsls	r3, r3, #11
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003e7c:	897b      	ldrh	r3, [r7, #10]
 8003e7e:	019b      	lsls	r3, r3, #6
 8003e80:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea2:	f7fe fbef 	bl	8002684 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ea8:	e015      	b.n	8003ed6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003eaa:	f7fe fbeb 	bl	8002684 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d309      	bcc.n	8003ece <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e014      	b.n	8003ef8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e4      	bne.n	8003eaa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b42      	cmp	r3, #66	; 0x42
 8003f20:	d101      	bne.n	8003f26 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
 8003f24:	e04e      	b.n	8003fc4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2242      	movs	r2, #66	; 0x42
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 031c 	and.w	r3, r3, #28
 8003f3c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8a1b      	ldrh	r3, [r3, #16]
 8003f42:	02db      	lsls	r3, r3, #11
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003f4c:	897b      	ldrh	r3, [r7, #10]
 8003f4e:	019b      	lsls	r3, r3, #6
 8003f50:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f7c:	f7fe fb82 	bl	8002684 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f82:	e015      	b.n	8003fb0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003f84:	f7fe fb7e 	bl	8002684 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d309      	bcc.n	8003fa8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00d      	b.n	8003fc4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e4      	bne.n	8003f84 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b0b0      	sub	sp, #192	; 0xc0
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ff0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004016:	663b      	str	r3, [r7, #96]	; 0x60
 8004018:	e001      	b.n	800401e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800401e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004028:	2300      	movs	r3, #0
 800402a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004038:	2340      	movs	r3, #64	; 0x40
 800403a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004072:	2300      	movs	r3, #0
 8004074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80040a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040a4:	4bab      	ldr	r3, [pc, #684]	; (8004354 <ETH_MACDMAConfig+0x388>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80040ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80040ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80040b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80040b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80040b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80040b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80040be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80040c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80040c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80040c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80040c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80040cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80040ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80040d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80040d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80040d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80040d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80040d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80040dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80040e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80040e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fe facb 	bl	800269c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800410e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004110:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004114:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004118:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800411a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800411e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004124:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800412a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800412c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004130:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004134:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800413c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800413e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800414a:	2001      	movs	r0, #1
 800414c:	f7fe faa6 	bl	800269c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004158:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004162:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800416c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800417c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004180:	4013      	ands	r3, r2
 8004182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800418a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800418c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004190:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004196:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800419c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800419e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80041a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80041a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80041a8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80041aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80041c8:	2001      	movs	r0, #1
 80041ca:	f7fe fa67 	bl	800269c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80041d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80041dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f7fe fa52 	bl	800269c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004200:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004210:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004214:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004226:	2304      	movs	r3, #4
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800422a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800423c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004246:	2300      	movs	r3, #0
 8004248:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800424a:	2300      	movs	r3, #0
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f241 0318 	movw	r3, #4120	; 0x1018
 8004256:	4413      	add	r3, r2
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800425e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <ETH_MACDMAConfig+0x38c>)
 8004264:	4013      	ands	r3, r2
 8004266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800426a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800426c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800426e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004270:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004272:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004274:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004276:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004278:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800427a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800427c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800427e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004280:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004282:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004286:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800428a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800428c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f241 0318 	movw	r3, #4120	; 0x1018
 800429e:	4413      	add	r3, r2
 80042a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80042ae:	4413      	add	r3, r2
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80042b6:	2001      	movs	r0, #1
 80042b8:	f7fe f9f0 	bl	800269c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80042c4:	4413      	add	r3, r2
 80042c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80042cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80042d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80042d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80042dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80042de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80042e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80042e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004304:	2001      	movs	r0, #1
 8004306:	f7fe f9c9 	bl	800269c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004316:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10d      	bne.n	800433c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	f241 031c 	movw	r3, #4124	; 0x101c
 8004328:	4413      	add	r3, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6811      	ldr	r1, [r2, #0]
 8004330:	4a0a      	ldr	r2, [pc, #40]	; (800435c <ETH_MACDMAConfig+0x390>)
 8004332:	431a      	orrs	r2, r3
 8004334:	f241 031c 	movw	r3, #4124	; 0x101c
 8004338:	440b      	add	r3, r1
 800433a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	461a      	mov	r2, r3
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f80b 	bl	8004360 <ETH_MACAddressConfig>
}
 800434a:	bf00      	nop
 800434c:	37c0      	adds	r7, #192	; 0xc0
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	ff20810f 	.word	0xff20810f
 8004358:	f8de3f23 	.word	0xf8de3f23
 800435c:	00010040 	.word	0x00010040

08004360 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3305      	adds	r3, #5
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	3204      	adds	r2, #4
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <ETH_MACAddressConfig+0x68>)
 8004382:	4413      	add	r3, r2
 8004384:	461a      	mov	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3303      	adds	r3, #3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	061a      	lsls	r2, r3, #24
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3302      	adds	r3, #2
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3301      	adds	r3, #1
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4313      	orrs	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	7812      	ldrb	r2, [r2, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <ETH_MACAddressConfig+0x6c>)
 80043b2:	4413      	add	r3, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6013      	str	r3, [r2, #0]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40028040 	.word	0x40028040
 80043cc:	40028044 	.word	0x40028044

080043d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e175      	b.n	80046dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	f040 8164 	bne.w	80046d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d00b      	beq.n	800442e <HAL_GPIO_Init+0x5e>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004422:	2b11      	cmp	r3, #17
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b12      	cmp	r3, #18
 800442c:	d130      	bne.n	8004490 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004464:	2201      	movs	r2, #1
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 0201 	and.w	r2, r3, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x100>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d123      	bne.n	8004518 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	08da      	lsrs	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3208      	adds	r2, #8
 80044d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	220f      	movs	r2, #15
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	08da      	lsrs	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3208      	adds	r2, #8
 8004512:	69b9      	ldr	r1, [r7, #24]
 8004514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0203 	and.w	r2, r3, #3
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80be 	beq.w	80046d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_GPIO_Init+0x320>)
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	4a64      	ldr	r2, [pc, #400]	; (80046f0 <HAL_GPIO_Init+0x320>)
 8004560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004564:	6453      	str	r3, [r2, #68]	; 0x44
 8004566:	4b62      	ldr	r3, [pc, #392]	; (80046f0 <HAL_GPIO_Init+0x320>)
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004572:	4a60      	ldr	r2, [pc, #384]	; (80046f4 <HAL_GPIO_Init+0x324>)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	3302      	adds	r3, #2
 800457a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	220f      	movs	r2, #15
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a57      	ldr	r2, [pc, #348]	; (80046f8 <HAL_GPIO_Init+0x328>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d037      	beq.n	800460e <HAL_GPIO_Init+0x23e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a56      	ldr	r2, [pc, #344]	; (80046fc <HAL_GPIO_Init+0x32c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d031      	beq.n	800460a <HAL_GPIO_Init+0x23a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a55      	ldr	r2, [pc, #340]	; (8004700 <HAL_GPIO_Init+0x330>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02b      	beq.n	8004606 <HAL_GPIO_Init+0x236>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a54      	ldr	r2, [pc, #336]	; (8004704 <HAL_GPIO_Init+0x334>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d025      	beq.n	8004602 <HAL_GPIO_Init+0x232>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a53      	ldr	r2, [pc, #332]	; (8004708 <HAL_GPIO_Init+0x338>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01f      	beq.n	80045fe <HAL_GPIO_Init+0x22e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a52      	ldr	r2, [pc, #328]	; (800470c <HAL_GPIO_Init+0x33c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d019      	beq.n	80045fa <HAL_GPIO_Init+0x22a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a51      	ldr	r2, [pc, #324]	; (8004710 <HAL_GPIO_Init+0x340>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_GPIO_Init+0x226>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a50      	ldr	r2, [pc, #320]	; (8004714 <HAL_GPIO_Init+0x344>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00d      	beq.n	80045f2 <HAL_GPIO_Init+0x222>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4f      	ldr	r2, [pc, #316]	; (8004718 <HAL_GPIO_Init+0x348>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <HAL_GPIO_Init+0x21e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4e      	ldr	r2, [pc, #312]	; (800471c <HAL_GPIO_Init+0x34c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_GPIO_Init+0x21a>
 80045e6:	2309      	movs	r3, #9
 80045e8:	e012      	b.n	8004610 <HAL_GPIO_Init+0x240>
 80045ea:	230a      	movs	r3, #10
 80045ec:	e010      	b.n	8004610 <HAL_GPIO_Init+0x240>
 80045ee:	2308      	movs	r3, #8
 80045f0:	e00e      	b.n	8004610 <HAL_GPIO_Init+0x240>
 80045f2:	2307      	movs	r3, #7
 80045f4:	e00c      	b.n	8004610 <HAL_GPIO_Init+0x240>
 80045f6:	2306      	movs	r3, #6
 80045f8:	e00a      	b.n	8004610 <HAL_GPIO_Init+0x240>
 80045fa:	2305      	movs	r3, #5
 80045fc:	e008      	b.n	8004610 <HAL_GPIO_Init+0x240>
 80045fe:	2304      	movs	r3, #4
 8004600:	e006      	b.n	8004610 <HAL_GPIO_Init+0x240>
 8004602:	2303      	movs	r3, #3
 8004604:	e004      	b.n	8004610 <HAL_GPIO_Init+0x240>
 8004606:	2302      	movs	r3, #2
 8004608:	e002      	b.n	8004610 <HAL_GPIO_Init+0x240>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_GPIO_Init+0x240>
 800460e:	2300      	movs	r3, #0
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	f002 0203 	and.w	r2, r2, #3
 8004616:	0092      	lsls	r2, r2, #2
 8004618:	4093      	lsls	r3, r2
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004620:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_GPIO_Init+0x324>)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	3302      	adds	r3, #2
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800462e:	4b3c      	ldr	r3, [pc, #240]	; (8004720 <HAL_GPIO_Init+0x350>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004652:	4a33      	ldr	r2, [pc, #204]	; (8004720 <HAL_GPIO_Init+0x350>)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_GPIO_Init+0x350>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800467c:	4a28      	ldr	r2, [pc, #160]	; (8004720 <HAL_GPIO_Init+0x350>)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_GPIO_Init+0x350>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	43db      	mvns	r3, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4013      	ands	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_GPIO_Init+0x350>)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046ac:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <HAL_GPIO_Init+0x350>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_GPIO_Init+0x350>)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3301      	adds	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	f67f ae86 	bls.w	80043f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80046e4:	bf00      	nop
 80046e6:	3724      	adds	r7, #36	; 0x24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40013800 	.word	0x40013800
 80046f8:	40020000 	.word	0x40020000
 80046fc:	40020400 	.word	0x40020400
 8004700:	40020800 	.word	0x40020800
 8004704:	40020c00 	.word	0x40020c00
 8004708:	40021000 	.word	0x40021000
 800470c:	40021400 	.word	0x40021400
 8004710:	40021800 	.word	0x40021800
 8004714:	40021c00 	.word	0x40021c00
 8004718:	40022000 	.word	0x40022000
 800471c:	40022400 	.word	0x40022400
 8004720:	40013c00 	.word	0x40013c00

08004724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e001      	b.n	8004746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
 8004760:	4613      	mov	r3, r2
 8004762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004764:	787b      	ldrb	r3, [r7, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800476a:	887a      	ldrh	r2, [r7, #2]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004770:	e003      	b.n	800477a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	041a      	lsls	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	619a      	str	r2, [r3, #24]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800479e:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fc ffde 	bl	8001768 <HAL_GPIO_EXTI_Callback>
  }
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40013c00 	.word	0x40013c00

080047b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b08f      	sub	sp, #60	; 0x3c
 80047bc:	af0a      	add	r7, sp, #40	; 0x28
 80047be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e116      	b.n	80049f8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fd fe77 	bl	80024d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fc11 	bl	8008030 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	687e      	ldr	r6, [r7, #4]
 8004816:	466d      	mov	r5, sp
 8004818:	f106 0410 	add.w	r4, r6, #16
 800481c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004828:	e885 0003 	stmia.w	r5, {r0, r1}
 800482c:	1d33      	adds	r3, r6, #4
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f003 fba5 	bl	8007f80 <USB_CoreInit>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0d7      	b.n	80049f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f003 fbff 	bl	8008052 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e04a      	b.n	80048f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800485a:	7bfa      	ldrb	r2, [r7, #15]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	333d      	adds	r3, #61	; 0x3d
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	333c      	adds	r3, #60	; 0x3c
 800487e:	7bfa      	ldrb	r2, [r7, #15]
 8004880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	b298      	uxth	r0, r3
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3342      	adds	r3, #66	; 0x42
 8004896:	4602      	mov	r2, r0
 8004898:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	333f      	adds	r3, #63	; 0x3f
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3344      	adds	r3, #68	; 0x44
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3348      	adds	r3, #72	; 0x48
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3350      	adds	r3, #80	; 0x50
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	3301      	adds	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3af      	bcc.n	800485a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	e044      	b.n	800498a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004900:	7bfa      	ldrb	r2, [r7, #15]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004928:	7bfa      	ldrb	r2, [r7, #15]
 800492a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	3301      	adds	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d3b5      	bcc.n	8004900 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	687e      	ldr	r6, [r7, #4]
 800499c:	466d      	mov	r5, sp
 800499e:	f106 0410 	add.w	r4, r6, #16
 80049a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80049b2:	1d33      	adds	r3, r6, #4
 80049b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b6:	6838      	ldr	r0, [r7, #0]
 80049b8:	f003 fb76 	bl	80080a8 <USB_DevInit>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e014      	b.n	80049f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f80a 	bl	8004a00 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fd28 	bl	8008446 <USB_DevDisconnect>

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	10000003 	.word	0x10000003

08004a48 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a56:	6013      	str	r3, [r2, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a70:	2300      	movs	r3, #0
 8004a72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e291      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8087 	beq.w	8004b9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a8c:	4b96      	ldr	r3, [pc, #600]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d00c      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a98:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d112      	bne.n	8004aca <HAL_RCC_OscConfig+0x62>
 8004aa4:	4b90      	ldr	r3, [pc, #576]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab0:	d10b      	bne.n	8004aca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab2:	4b8d      	ldr	r3, [pc, #564]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d06c      	beq.n	8004b98 <HAL_RCC_OscConfig+0x130>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d168      	bne.n	8004b98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e26b      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x7a>
 8004ad4:	4b84      	ldr	r3, [pc, #528]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a83      	ldr	r2, [pc, #524]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	e02e      	b.n	8004b40 <HAL_RCC_OscConfig+0xd8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x9c>
 8004aea:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a7e      	ldr	r2, [pc, #504]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b7c      	ldr	r3, [pc, #496]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7b      	ldr	r2, [pc, #492]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e01d      	b.n	8004b40 <HAL_RCC_OscConfig+0xd8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b0e:	4b76      	ldr	r3, [pc, #472]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a75      	ldr	r2, [pc, #468]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b73      	ldr	r3, [pc, #460]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a72      	ldr	r2, [pc, #456]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0xd8>
 8004b28:	4b6f      	ldr	r3, [pc, #444]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6e      	ldr	r2, [pc, #440]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4b6c      	ldr	r3, [pc, #432]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a6b      	ldr	r2, [pc, #428]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d013      	beq.n	8004b70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fd9c 	bl	8002684 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd fd98 	bl	8002684 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e21f      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0xe8>
 8004b6e:	e014      	b.n	8004b9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd fd88 	bl	8002684 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b78:	f7fd fd84 	bl	8002684 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e20b      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8a:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x110>
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d069      	beq.n	8004c7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ba6:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb2:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d11c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x190>
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d116      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_RCC_OscConfig+0x17a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e1df      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be2:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	493d      	ldr	r1, [pc, #244]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	e040      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d023      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c00:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a38      	ldr	r2, [pc, #224]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fd3a 	bl	8002684 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd fd36 	bl	8002684 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1bd      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4929      	ldr	r1, [pc, #164]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
 8004c46:	e018      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c48:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a26      	ldr	r2, [pc, #152]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fd16 	bl	8002684 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fd12 	bl	8002684 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e199      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d038      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d019      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fd fcf3 	bl	8002684 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fd fcef 	bl	8002684 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e176      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x23a>
 8004cc0:	e01a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fd fcd9 	bl	8002684 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fd fcd5 	bl	8002684 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d903      	bls.n	8004cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e15c      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
 8004ce8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cec:	4b91      	ldr	r3, [pc, #580]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1ee      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a4 	beq.w	8004e4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	4a87      	ldr	r2, [pc, #540]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1e:	4b85      	ldr	r3, [pc, #532]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d2e:	4b82      	ldr	r3, [pc, #520]	; (8004f38 <HAL_RCC_OscConfig+0x4d0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d118      	bne.n	8004d6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d3a:	4b7f      	ldr	r3, [pc, #508]	; (8004f38 <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7e      	ldr	r2, [pc, #504]	; (8004f38 <HAL_RCC_OscConfig+0x4d0>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d46:	f7fd fc9d 	bl	8002684 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fd fc99 	bl	8002684 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	; 0x64
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e120      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d60:	4b75      	ldr	r3, [pc, #468]	; (8004f38 <HAL_RCC_OscConfig+0x4d0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d106      	bne.n	8004d82 <HAL_RCC_OscConfig+0x31a>
 8004d74:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	4a6e      	ldr	r2, [pc, #440]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d80:	e02d      	b.n	8004dde <HAL_RCC_OscConfig+0x376>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x33c>
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a69      	ldr	r2, [pc, #420]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
 8004d96:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a66      	ldr	r2, [pc, #408]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	e01c      	b.n	8004dde <HAL_RCC_OscConfig+0x376>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d10c      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x35e>
 8004dac:	4b61      	ldr	r3, [pc, #388]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a60      	ldr	r2, [pc, #384]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004db2:	f043 0304 	orr.w	r3, r3, #4
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	4b5e      	ldr	r3, [pc, #376]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a5d      	ldr	r2, [pc, #372]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e00b      	b.n	8004dde <HAL_RCC_OscConfig+0x376>
 8004dc6:	4b5b      	ldr	r3, [pc, #364]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	4a5a      	ldr	r2, [pc, #360]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd2:	4b58      	ldr	r3, [pc, #352]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a57      	ldr	r2, [pc, #348]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d015      	beq.n	8004e12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fd fc4d 	bl	8002684 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fd fc49 	bl	8002684 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e0ce      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ee      	beq.n	8004dee <HAL_RCC_OscConfig+0x386>
 8004e10:	e014      	b.n	8004e3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e12:	f7fd fc37 	bl	8002684 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fd fc33 	bl	8002684 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e0b8      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e30:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ee      	bne.n	8004e1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4b3c      	ldr	r3, [pc, #240]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a4 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e58:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d06b      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d149      	bne.n	8004f00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6c:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a30      	ldr	r2, [pc, #192]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fd fc04 	bl	8002684 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fd fc00 	bl	8002684 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e087      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	019b      	lsls	r3, r3, #6
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	061b      	lsls	r3, r3, #24
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	4a1b      	ldr	r2, [pc, #108]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fbd4 	bl	8002684 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd fbd0 	bl	8002684 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e057      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x478>
 8004efe:	e04f      	b.n	8004fa0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0b      	ldr	r2, [pc, #44]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd fbba 	bl	8002684 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f14:	f7fd fbb6 	bl	8002684 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e03d      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <HAL_RCC_OscConfig+0x4cc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4ac>
 8004f32:	e035      	b.n	8004fa0 <HAL_RCC_OscConfig+0x538>
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <HAL_RCC_OscConfig+0x544>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d028      	beq.n	8004f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d121      	bne.n	8004f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d11a      	bne.n	8004f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d111      	bne.n	8004f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	3b01      	subs	r3, #1
 8004f86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800

08004fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0d0      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b6a      	ldr	r3, [pc, #424]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d910      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b67      	ldr	r3, [pc, #412]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 020f 	bic.w	r2, r3, #15
 8004fde:	4965      	ldr	r1, [pc, #404]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b63      	ldr	r3, [pc, #396]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0b8      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005010:	4b59      	ldr	r3, [pc, #356]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a58      	ldr	r2, [pc, #352]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800501a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005028:	4b53      	ldr	r3, [pc, #332]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a52      	ldr	r2, [pc, #328]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 800502e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b50      	ldr	r3, [pc, #320]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	494d      	ldr	r1, [pc, #308]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d040      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d115      	bne.n	8005092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e07f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005072:	4b41      	ldr	r3, [pc, #260]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e073      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005082:	4b3d      	ldr	r3, [pc, #244]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e06b      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005092:	4b39      	ldr	r3, [pc, #228]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 0203 	bic.w	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4936      	ldr	r1, [pc, #216]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fd faee 	bl	8002684 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f7fd faea 	bl	8002684 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e053      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 020c 	and.w	r2, r3, #12
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d1eb      	bne.n	80050ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d4:	4b27      	ldr	r3, [pc, #156]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d210      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 020f 	bic.w	r2, r3, #15
 80050ea:	4922      	ldr	r1, [pc, #136]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e032      	b.n	800516a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4916      	ldr	r1, [pc, #88]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	490e      	ldr	r1, [pc, #56]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005142:	f000 f821 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8005146:	4601      	mov	r1, r0
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCC_ClockConfig+0x1c8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	4a0a      	ldr	r2, [pc, #40]	; (800517c <HAL_RCC_ClockConfig+0x1cc>)
 8005154:	5cd3      	ldrb	r3, [r2, r3]
 8005156:	fa21 f303 	lsr.w	r3, r1, r3
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <HAL_RCC_ClockConfig+0x1d0>)
 800515c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <HAL_RCC_ClockConfig+0x1d4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fa4a 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023c00 	.word	0x40023c00
 8005178:	40023800 	.word	0x40023800
 800517c:	0800c330 	.word	0x0800c330
 8005180:	20000004 	.word	0x20000004
 8005184:	20000008 	.word	0x20000008

08005188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	2300      	movs	r3, #0
 8005198:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800519e:	4b63      	ldr	r3, [pc, #396]	; (800532c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d007      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x32>
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d008      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x38>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 80b4 	bne.w	800531c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b4:	4b5e      	ldr	r3, [pc, #376]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051b6:	60bb      	str	r3, [r7, #8]
      break;
 80051b8:	e0b3      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ba:	4b5e      	ldr	r3, [pc, #376]	; (8005334 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051bc:	60bb      	str	r3, [r7, #8]
      break;
 80051be:	e0b0      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c0:	4b5a      	ldr	r3, [pc, #360]	; (800532c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051ca:	4b58      	ldr	r3, [pc, #352]	; (800532c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d04a      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d6:	4b55      	ldr	r3, [pc, #340]	; (800532c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	ea03 0501 	and.w	r5, r3, r1
 80051ec:	ea04 0602 	and.w	r6, r4, r2
 80051f0:	4629      	mov	r1, r5
 80051f2:	4632      	mov	r2, r6
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	0154      	lsls	r4, r2, #5
 80051fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005202:	014b      	lsls	r3, r1, #5
 8005204:	4619      	mov	r1, r3
 8005206:	4622      	mov	r2, r4
 8005208:	1b49      	subs	r1, r1, r5
 800520a:	eb62 0206 	sbc.w	r2, r2, r6
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	f04f 0400 	mov.w	r4, #0
 8005216:	0194      	lsls	r4, r2, #6
 8005218:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800521c:	018b      	lsls	r3, r1, #6
 800521e:	1a5b      	subs	r3, r3, r1
 8005220:	eb64 0402 	sbc.w	r4, r4, r2
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	00e2      	lsls	r2, r4, #3
 800522e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005232:	00d9      	lsls	r1, r3, #3
 8005234:	460b      	mov	r3, r1
 8005236:	4614      	mov	r4, r2
 8005238:	195b      	adds	r3, r3, r5
 800523a:	eb44 0406 	adc.w	r4, r4, r6
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	0262      	lsls	r2, r4, #9
 8005248:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800524c:	0259      	lsls	r1, r3, #9
 800524e:	460b      	mov	r3, r1
 8005250:	4614      	mov	r4, r2
 8005252:	4618      	mov	r0, r3
 8005254:	4621      	mov	r1, r4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	461a      	mov	r2, r3
 800525e:	4623      	mov	r3, r4
 8005260:	f7fb fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8005264:	4603      	mov	r3, r0
 8005266:	460c      	mov	r4, r1
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e049      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526c:	4b2f      	ldr	r3, [pc, #188]	; (800532c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	099b      	lsrs	r3, r3, #6
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	f240 11ff 	movw	r1, #511	; 0x1ff
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	ea03 0501 	and.w	r5, r3, r1
 8005282:	ea04 0602 	and.w	r6, r4, r2
 8005286:	4629      	mov	r1, r5
 8005288:	4632      	mov	r2, r6
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	0154      	lsls	r4, r2, #5
 8005294:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005298:	014b      	lsls	r3, r1, #5
 800529a:	4619      	mov	r1, r3
 800529c:	4622      	mov	r2, r4
 800529e:	1b49      	subs	r1, r1, r5
 80052a0:	eb62 0206 	sbc.w	r2, r2, r6
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	f04f 0400 	mov.w	r4, #0
 80052ac:	0194      	lsls	r4, r2, #6
 80052ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052b2:	018b      	lsls	r3, r1, #6
 80052b4:	1a5b      	subs	r3, r3, r1
 80052b6:	eb64 0402 	sbc.w	r4, r4, r2
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	00e2      	lsls	r2, r4, #3
 80052c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052c8:	00d9      	lsls	r1, r3, #3
 80052ca:	460b      	mov	r3, r1
 80052cc:	4614      	mov	r4, r2
 80052ce:	195b      	adds	r3, r3, r5
 80052d0:	eb44 0406 	adc.w	r4, r4, r6
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	02a2      	lsls	r2, r4, #10
 80052de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052e2:	0299      	lsls	r1, r3, #10
 80052e4:	460b      	mov	r3, r1
 80052e6:	4614      	mov	r4, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	4621      	mov	r1, r4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f04f 0400 	mov.w	r4, #0
 80052f2:	461a      	mov	r2, r3
 80052f4:	4623      	mov	r3, r4
 80052f6:	f7fb fce7 	bl	8000cc8 <__aeabi_uldivmod>
 80052fa:	4603      	mov	r3, r0
 80052fc:	460c      	mov	r4, r1
 80052fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	60bb      	str	r3, [r7, #8]
      break;
 800531a:	e002      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800531e:	60bb      	str	r3, [r7, #8]
      break;
 8005320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005322:	68bb      	ldr	r3, [r7, #8]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532c:	40023800 	.word	0x40023800
 8005330:	00f42400 	.word	0x00f42400
 8005334:	007a1200 	.word	0x007a1200

08005338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000004 	.word	0x20000004

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005354:	f7ff fff0 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005358:	4601      	mov	r1, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0a9b      	lsrs	r3, r3, #10
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4a03      	ldr	r2, [pc, #12]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	0800c340 	.word	0x0800c340

08005378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800537c:	f7ff ffdc 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005380:	4601      	mov	r1, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0b5b      	lsrs	r3, r3, #13
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4a03      	ldr	r2, [pc, #12]	; (800539c <HAL_RCC_GetPCLK2Freq+0x24>)
 800538e:	5cd3      	ldrb	r3, [r2, r3]
 8005390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40023800 	.word	0x40023800
 800539c:	0800c340 	.word	0x0800c340

080053a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d012      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053c8:	4b69      	ldr	r3, [pc, #420]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a68      	ldr	r2, [pc, #416]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053d2:	6093      	str	r3, [r2, #8]
 80053d4:	4b66      	ldr	r3, [pc, #408]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	4964      	ldr	r1, [pc, #400]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053fa:	4b5d      	ldr	r3, [pc, #372]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	4959      	ldr	r1, [pc, #356]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005418:	d101      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800541a:	2301      	movs	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005436:	4b4e      	ldr	r3, [pc, #312]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	494a      	ldr	r1, [pc, #296]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005454:	d101      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 808b 	beq.w	800559a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	4b3a      	ldr	r3, [pc, #232]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	4a39      	ldr	r2, [pc, #228]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548e:	6413      	str	r3, [r2, #64]	; 0x40
 8005490:	4b37      	ldr	r3, [pc, #220]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a34      	ldr	r2, [pc, #208]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a8:	f7fd f8ec 	bl	8002684 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b0:	f7fd f8e8 	bl	8002684 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e355      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054c2:	4b2c      	ldr	r3, [pc, #176]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ce:	4b28      	ldr	r3, [pc, #160]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d035      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d02e      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054ec:	4b20      	ldr	r3, [pc, #128]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054f6:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005502:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005514:	4b16      	ldr	r3, [pc, #88]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d114      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fd f8b0 	bl	8002684 <HAL_GetTick>
 8005524:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	e00a      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fd f8ac 	bl	8002684 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e317      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ee      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005556:	d111      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005566:	400b      	ands	r3, r1
 8005568:	4901      	ldr	r1, [pc, #4]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
 800556e:	e00b      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005570:	40023800 	.word	0x40023800
 8005574:	40007000 	.word	0x40007000
 8005578:	0ffffcff 	.word	0x0ffffcff
 800557c:	4bb0      	ldr	r3, [pc, #704]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4aaf      	ldr	r2, [pc, #700]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005582:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005586:	6093      	str	r3, [r2, #8]
 8005588:	4bad      	ldr	r3, [pc, #692]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800558a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005594:	49aa      	ldr	r1, [pc, #680]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d010      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055a6:	4ba6      	ldr	r3, [pc, #664]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ac:	4aa4      	ldr	r2, [pc, #656]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055b6:	4ba2      	ldr	r3, [pc, #648]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	499f      	ldr	r1, [pc, #636]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d4:	4b9a      	ldr	r3, [pc, #616]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e2:	4997      	ldr	r1, [pc, #604]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055f6:	4b92      	ldr	r3, [pc, #584]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005604:	498e      	ldr	r1, [pc, #568]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005618:	4b89      	ldr	r3, [pc, #548]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005626:	4986      	ldr	r1, [pc, #536]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800563a:	4b81      	ldr	r3, [pc, #516]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	497d      	ldr	r1, [pc, #500]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565c:	4b78      	ldr	r3, [pc, #480]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	4975      	ldr	r1, [pc, #468]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567e:	4b70      	ldr	r3, [pc, #448]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f023 020c 	bic.w	r2, r3, #12
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568c:	496c      	ldr	r1, [pc, #432]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056a0:	4b67      	ldr	r3, [pc, #412]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ae:	4964      	ldr	r1, [pc, #400]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056c2:	4b5f      	ldr	r3, [pc, #380]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d0:	495b      	ldr	r1, [pc, #364]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e4:	4b56      	ldr	r3, [pc, #344]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	4953      	ldr	r1, [pc, #332]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005706:	4b4e      	ldr	r3, [pc, #312]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	494a      	ldr	r1, [pc, #296]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005728:	4b45      	ldr	r3, [pc, #276]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	4942      	ldr	r1, [pc, #264]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800574a:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005758:	4939      	ldr	r1, [pc, #228]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800576c:	4b34      	ldr	r3, [pc, #208]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800577a:	4931      	ldr	r1, [pc, #196]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d011      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800578e:	4b2c      	ldr	r3, [pc, #176]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005794:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800579c:	4928      	ldr	r1, [pc, #160]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ac:	d101      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057be:	2301      	movs	r3, #1
 80057c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ce:	4b1c      	ldr	r3, [pc, #112]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	4918      	ldr	r1, [pc, #96]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005800:	490f      	ldr	r1, [pc, #60]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d005      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005816:	f040 80d8 	bne.w	80059ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a08      	ldr	r2, [pc, #32]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005820:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fc ff2d 	bl	8002684 <HAL_GetTick>
 800582a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800582e:	f7fc ff29 	bl	8002684 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d903      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e196      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005840:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005844:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ee      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d021      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	2b00      	cmp	r3, #0
 8005862:	d11d      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005864:	4b64      	ldr	r3, [pc, #400]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005872:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005878:	0e1b      	lsrs	r3, r3, #24
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	019a      	lsls	r2, r3, #6
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	071b      	lsls	r3, r3, #28
 8005898:	4957      	ldr	r1, [pc, #348]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d02e      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ca:	d129      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058cc:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e0:	0f1b      	lsrs	r3, r3, #28
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	019a      	lsls	r2, r3, #6
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	061b      	lsls	r3, r3, #24
 80058fa:	431a      	orrs	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	071b      	lsls	r3, r3, #28
 8005900:	493d      	ldr	r1, [pc, #244]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005908:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800590a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800590e:	f023 021f 	bic.w	r2, r3, #31
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	3b01      	subs	r3, #1
 8005918:	4937      	ldr	r1, [pc, #220]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01d      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800592e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005932:	0e1b      	lsrs	r3, r3, #24
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800593a:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005940:	0f1b      	lsrs	r3, r3, #28
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	019a      	lsls	r2, r3, #6
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	431a      	orrs	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	061b      	lsls	r3, r3, #24
 800595a:	431a      	orrs	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	071b      	lsls	r3, r3, #28
 8005960:	4925      	ldr	r1, [pc, #148]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d011      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	019a      	lsls	r2, r3, #6
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	071b      	lsls	r3, r3, #28
 8005990:	4919      	ldr	r1, [pc, #100]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800599e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a4:	f7fc fe6e 	bl	8002684 <HAL_GetTick>
 80059a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059ac:	f7fc fe6a 	bl	8002684 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	; 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0d7      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 80cd 	bne.w	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059de:	f7fc fe51 	bl	8002684 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059e4:	e00a      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059e6:	f7fc fe4d 	bl	8002684 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b64      	cmp	r3, #100	; 0x64
 80059f2:	d903      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e0ba      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80059f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059fc:	4b5e      	ldr	r3, [pc, #376]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a08:	d0ed      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d02e      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d12a      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a32:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a40:	4b4d      	ldr	r3, [pc, #308]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	0f1b      	lsrs	r3, r3, #28
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	019a      	lsls	r2, r3, #6
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	071b      	lsls	r3, r3, #28
 8005a66:	4944      	ldr	r1, [pc, #272]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a6e:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	493d      	ldr	r1, [pc, #244]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d022      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9c:	d11d      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	0e1b      	lsrs	r3, r3, #24
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005aac:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	0f1b      	lsrs	r3, r3, #28
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	019a      	lsls	r2, r3, #6
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	431a      	orrs	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	071b      	lsls	r3, r3, #28
 8005ad2:	4929      	ldr	r1, [pc, #164]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d028      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	0e1b      	lsrs	r3, r3, #24
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afa:	0c1b      	lsrs	r3, r3, #16
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	019a      	lsls	r2, r3, #6
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	071b      	lsls	r3, r3, #28
 8005b1a:	4917      	ldr	r1, [pc, #92]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4911      	ldr	r1, [pc, #68]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0e      	ldr	r2, [pc, #56]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b44:	f7fc fd9e 	bl	8002684 <HAL_GetTick>
 8005b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b4c:	f7fc fd9a 	bl	8002684 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	; 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e007      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b6a:	d1ef      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800

08005b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e01d      	b.n	8005bca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fc fa50 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fd02 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_TIM_Base_Start_IT+0x50>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d00b      	beq.n	8005c16 <HAL_TIM_Base_Start_IT+0x42>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d007      	beq.n	8005c16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	00010007 	.word	0x00010007

08005c28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e01d      	b.n	8005c76 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f815 	bl	8005c7e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f000 fcac 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e01d      	b.n	8005ce0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f815 	bl	8005ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fc77 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d841      	bhi.n	8005d90 <HAL_TIM_PWM_Start_IT+0x94>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_TIM_PWM_Start_IT+0x18>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d5b 	.word	0x08005d5b
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d7f 	.word	0x08005d7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0202 	orr.w	r2, r2, #2
 8005d56:	60da      	str	r2, [r3, #12]
      break;
 8005d58:	e01b      	b.n	8005d92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0204 	orr.w	r2, r2, #4
 8005d68:	60da      	str	r2, [r3, #12]
      break;
 8005d6a:	e012      	b.n	8005d92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0208 	orr.w	r2, r2, #8
 8005d7a:	60da      	str	r2, [r3, #12]
      break;
 8005d7c:	e009      	b.n	8005d92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0210 	orr.w	r2, r2, #16
 8005d8c:	60da      	str	r2, [r3, #12]
      break;
 8005d8e:	e000      	b.n	8005d92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8005d90:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f8a6 	bl	8006eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <HAL_TIM_PWM_Start_IT+0x108>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <HAL_TIM_PWM_Start_IT+0xb8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <HAL_TIM_PWM_Start_IT+0x10c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d101      	bne.n	8005db8 <HAL_TIM_PWM_Start_IT+0xbc>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_TIM_PWM_Start_IT+0xbe>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <HAL_TIM_PWM_Start_IT+0x110>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d00b      	beq.n	8005df8 <HAL_TIM_PWM_Start_IT+0xfc>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d007      	beq.n	8005df8 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40010400 	.word	0x40010400
 8005e0c:	00010007 	.word	0x00010007

08005e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d122      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d11b      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0202 	mvn.w	r2, #2
 8005e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb98 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fb8a 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb9b 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0204 	mvn.w	r2, #4
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb6e 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb60 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fb71 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0208 	mvn.w	r2, #8
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb44 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fb36 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fb47 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0210 	mvn.w	r2, #16
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fb1a 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fb0c 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb1d 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10e      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d107      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0201 	mvn.w	r2, #1
 8005f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb fb28 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b80      	cmp	r3, #128	; 0x80
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 f9f2 	bl	80073a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fce:	d10e      	bne.n	8005fee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fda:	2b80      	cmp	r3, #128	; 0x80
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 f9e5 	bl	80073b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d10e      	bne.n	800601a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d107      	bne.n	800601a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 facb 	bl	80065b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b20      	cmp	r3, #32
 8006026:	d10e      	bne.n	8006046 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b20      	cmp	r3, #32
 8006034:	d107      	bne.n	8006046 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f06f 0220 	mvn.w	r2, #32
 800603e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fb fae9 	bl	8001618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006066:	2302      	movs	r3, #2
 8006068:	e06c      	b.n	8006144 <HAL_TIM_OC_ConfigChannel+0xf4>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b14      	cmp	r3, #20
 800607e:	d857      	bhi.n	8006130 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006131 	.word	0x08006131
 8006090:	08006131 	.word	0x08006131
 8006094:	08006131 	.word	0x08006131
 8006098:	080060eb 	.word	0x080060eb
 800609c:	08006131 	.word	0x08006131
 80060a0:	08006131 	.word	0x08006131
 80060a4:	08006131 	.word	0x08006131
 80060a8:	080060f9 	.word	0x080060f9
 80060ac:	08006131 	.word	0x08006131
 80060b0:	08006131 	.word	0x08006131
 80060b4:	08006131 	.word	0x08006131
 80060b8:	08006107 	.word	0x08006107
 80060bc:	08006131 	.word	0x08006131
 80060c0:	08006131 	.word	0x08006131
 80060c4:	08006131 	.word	0x08006131
 80060c8:	08006115 	.word	0x08006115
 80060cc:	08006131 	.word	0x08006131
 80060d0:	08006131 	.word	0x08006131
 80060d4:	08006131 	.word	0x08006131
 80060d8:	08006123 	.word	0x08006123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fb0e 	bl	8006704 <TIM_OC1_SetConfig>
      break;
 80060e8:	e023      	b.n	8006132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fb79 	bl	80067e8 <TIM_OC2_SetConfig>
      break;
 80060f6:	e01c      	b.n	8006132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fbea 	bl	80068d8 <TIM_OC3_SetConfig>
      break;
 8006104:	e015      	b.n	8006132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fc59 	bl	80069c4 <TIM_OC4_SetConfig>
      break;
 8006112:	e00e      	b.n	8006132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fcaa 	bl	8006a74 <TIM_OC5_SetConfig>
      break;
 8006120:	e007      	b.n	8006132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fcf5 	bl	8006b18 <TIM_OC6_SetConfig>
      break;
 800612e:	e000      	b.n	8006132 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8006130:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006162:	2302      	movs	r3, #2
 8006164:	e105      	b.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b14      	cmp	r3, #20
 800617a:	f200 80f0 	bhi.w	800635e <HAL_TIM_PWM_ConfigChannel+0x212>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061d9 	.word	0x080061d9
 8006188:	0800635f 	.word	0x0800635f
 800618c:	0800635f 	.word	0x0800635f
 8006190:	0800635f 	.word	0x0800635f
 8006194:	08006219 	.word	0x08006219
 8006198:	0800635f 	.word	0x0800635f
 800619c:	0800635f 	.word	0x0800635f
 80061a0:	0800635f 	.word	0x0800635f
 80061a4:	0800625b 	.word	0x0800625b
 80061a8:	0800635f 	.word	0x0800635f
 80061ac:	0800635f 	.word	0x0800635f
 80061b0:	0800635f 	.word	0x0800635f
 80061b4:	0800629b 	.word	0x0800629b
 80061b8:	0800635f 	.word	0x0800635f
 80061bc:	0800635f 	.word	0x0800635f
 80061c0:	0800635f 	.word	0x0800635f
 80061c4:	080062dd 	.word	0x080062dd
 80061c8:	0800635f 	.word	0x0800635f
 80061cc:	0800635f 	.word	0x0800635f
 80061d0:	0800635f 	.word	0x0800635f
 80061d4:	0800631d 	.word	0x0800631d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fa90 	bl	8006704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0208 	orr.w	r2, r2, #8
 80061f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0204 	bic.w	r2, r2, #4
 8006202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6999      	ldr	r1, [r3, #24]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	619a      	str	r2, [r3, #24]
      break;
 8006216:	e0a3      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fae2 	bl	80067e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	619a      	str	r2, [r3, #24]
      break;
 8006258:	e082      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fb39 	bl	80068d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0208 	orr.w	r2, r2, #8
 8006274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0204 	bic.w	r2, r2, #4
 8006284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69d9      	ldr	r1, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	61da      	str	r2, [r3, #28]
      break;
 8006298:	e062      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fb8f 	bl	80069c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	021a      	lsls	r2, r3, #8
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	61da      	str	r2, [r3, #28]
      break;
 80062da:	e041      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fbc6 	bl	8006a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0208 	orr.w	r2, r2, #8
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0204 	bic.w	r2, r2, #4
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800631a:	e021      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fbf8 	bl	8006b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	021a      	lsls	r2, r3, #8
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800635c:	e000      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800635e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_TIM_ConfigClockSource+0x18>
 8006390:	2302      	movs	r3, #2
 8006392:	e0a6      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x166>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4b4f      	ldr	r3, [pc, #316]	; (80064ec <HAL_TIM_ConfigClockSource+0x170>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d067      	beq.n	800649c <HAL_TIM_ConfigClockSource+0x120>
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d80b      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x6c>
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d073      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0x140>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d802      	bhi.n	80063de <HAL_TIM_ConfigClockSource+0x62>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d06f      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063dc:	e078      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d06c      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0x140>
 80063e2:	2b30      	cmp	r3, #48	; 0x30
 80063e4:	d06a      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063e6:	e073      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063e8:	2b70      	cmp	r3, #112	; 0x70
 80063ea:	d00d      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0x8c>
 80063ec:	2b70      	cmp	r3, #112	; 0x70
 80063ee:	d804      	bhi.n	80063fa <HAL_TIM_ConfigClockSource+0x7e>
 80063f0:	2b50      	cmp	r3, #80	; 0x50
 80063f2:	d033      	beq.n	800645c <HAL_TIM_ConfigClockSource+0xe0>
 80063f4:	2b60      	cmp	r3, #96	; 0x60
 80063f6:	d041      	beq.n	800647c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063f8:	e06a      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fe:	d066      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x152>
 8006400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006404:	d017      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006406:	e063      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f000 fd48 	bl	8006eac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800642a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	609a      	str	r2, [r3, #8]
      break;
 8006434:	e04c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6899      	ldr	r1, [r3, #8]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f000 fd31 	bl	8006eac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006458:	609a      	str	r2, [r3, #8]
      break;
 800645a:	e039      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6859      	ldr	r1, [r3, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	461a      	mov	r2, r3
 800646a:	f000 fca5 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2150      	movs	r1, #80	; 0x50
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fcfe 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 800647a:	e029      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6859      	ldr	r1, [r3, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	461a      	mov	r2, r3
 800648a:	f000 fcc4 	bl	8006e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2160      	movs	r1, #96	; 0x60
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fcee 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 800649a:	e019      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	6859      	ldr	r1, [r3, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	461a      	mov	r2, r3
 80064aa:	f000 fc85 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2140      	movs	r1, #64	; 0x40
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fcde 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 80064ba:	e009      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fcd5 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 80064cc:	e000      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80064ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	fffeff88 	.word	0xfffeff88

080064f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e031      	b.n	800656c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb50 	bl	8006bc0 <TIM_SlaveTimer_SetConfig>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e018      	b.n	800656c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006548:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006558:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a40      	ldr	r2, [pc, #256]	; (80066d8 <TIM_Base_SetConfig+0x114>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d00f      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3d      	ldr	r2, [pc, #244]	; (80066dc <TIM_Base_SetConfig+0x118>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3c      	ldr	r2, [pc, #240]	; (80066e0 <TIM_Base_SetConfig+0x11c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a3b      	ldr	r2, [pc, #236]	; (80066e4 <TIM_Base_SetConfig+0x120>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3a      	ldr	r2, [pc, #232]	; (80066e8 <TIM_Base_SetConfig+0x124>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d108      	bne.n	8006616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2f      	ldr	r2, [pc, #188]	; (80066d8 <TIM_Base_SetConfig+0x114>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d02b      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006624:	d027      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2c      	ldr	r2, [pc, #176]	; (80066dc <TIM_Base_SetConfig+0x118>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d023      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2b      	ldr	r2, [pc, #172]	; (80066e0 <TIM_Base_SetConfig+0x11c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01f      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2a      	ldr	r2, [pc, #168]	; (80066e4 <TIM_Base_SetConfig+0x120>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01b      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a29      	ldr	r2, [pc, #164]	; (80066e8 <TIM_Base_SetConfig+0x124>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d017      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a28      	ldr	r2, [pc, #160]	; (80066ec <TIM_Base_SetConfig+0x128>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <TIM_Base_SetConfig+0x12c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00f      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <TIM_Base_SetConfig+0x130>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00b      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <TIM_Base_SetConfig+0x134>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <TIM_Base_SetConfig+0x138>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <TIM_Base_SetConfig+0x13c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d108      	bne.n	8006688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <TIM_Base_SetConfig+0x114>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_Base_SetConfig+0xf8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <TIM_Base_SetConfig+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d103      	bne.n	80066c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	615a      	str	r2, [r3, #20]
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800
 80066f8:	40001800 	.word	0x40001800
 80066fc:	40001c00 	.word	0x40001c00
 8006700:	40002000 	.word	0x40002000

08006704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0201 	bic.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <TIM_OC1_SetConfig+0xd8>)
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 0302 	bic.w	r3, r3, #2
 800674c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <TIM_OC1_SetConfig+0xdc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_OC1_SetConfig+0x64>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <TIM_OC1_SetConfig+0xe0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d10c      	bne.n	8006782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0308 	bic.w	r3, r3, #8
 800676e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 0304 	bic.w	r3, r3, #4
 8006780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a16      	ldr	r2, [pc, #88]	; (80067e0 <TIM_OC1_SetConfig+0xdc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC1_SetConfig+0x8e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <TIM_OC1_SetConfig+0xe0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d111      	bne.n	80067b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	621a      	str	r2, [r3, #32]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	fffeff8f 	.word	0xfffeff8f
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400

080067e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0210 	bic.w	r2, r3, #16
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <TIM_OC2_SetConfig+0xe4>)
 8006814:	4013      	ands	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a23      	ldr	r2, [pc, #140]	; (80068d0 <TIM_OC2_SetConfig+0xe8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC2_SetConfig+0x68>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <TIM_OC2_SetConfig+0xec>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10d      	bne.n	800686c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <TIM_OC2_SetConfig+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x94>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a17      	ldr	r2, [pc, #92]	; (80068d4 <TIM_OC2_SetConfig+0xec>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d113      	bne.n	80068a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	feff8fff 	.word	0xfeff8fff
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40010400 	.word	0x40010400

080068d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4b2d      	ldr	r3, [pc, #180]	; (80069b8 <TIM_OC3_SetConfig+0xe0>)
 8006904:	4013      	ands	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a22      	ldr	r2, [pc, #136]	; (80069bc <TIM_OC3_SetConfig+0xe4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_OC3_SetConfig+0x66>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <TIM_OC3_SetConfig+0xe8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d10d      	bne.n	800695a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <TIM_OC3_SetConfig+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_OC3_SetConfig+0x92>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <TIM_OC3_SetConfig+0xe8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d113      	bne.n	8006992 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	fffeff8f 	.word	0xfffeff8f
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40010400 	.word	0x40010400

080069c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <TIM_OC4_SetConfig+0xa4>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	031b      	lsls	r3, r3, #12
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <TIM_OC4_SetConfig+0xa8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC4_SetConfig+0x68>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <TIM_OC4_SetConfig+0xac>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d109      	bne.n	8006a40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	019b      	lsls	r3, r3, #6
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	feff8fff 	.word	0xfeff8fff
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400

08006a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <TIM_OC5_SetConfig+0x98>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ab4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <TIM_OC5_SetConfig+0x9c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC5_SetConfig+0x5e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a11      	ldr	r2, [pc, #68]	; (8006b14 <TIM_OC5_SetConfig+0xa0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d109      	bne.n	8006ae6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	621a      	str	r2, [r3, #32]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	fffeff8f 	.word	0xfffeff8f
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400

08006b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <TIM_OC6_SetConfig+0x9c>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	051b      	lsls	r3, r3, #20
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <TIM_OC6_SetConfig+0xa0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC6_SetConfig+0x60>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <TIM_OC6_SetConfig+0xa4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d109      	bne.n	8006b8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	029b      	lsls	r3, r3, #10
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	feff8fff 	.word	0xfeff8fff
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40010400 	.word	0x40010400

08006bc0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <TIM_SlaveTimer_SetConfig+0x10c>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	d05c      	beq.n	8006cc0 <TIM_SlaveTimer_SetConfig+0x100>
 8006c06:	2b30      	cmp	r3, #48	; 0x30
 8006c08:	d806      	bhi.n	8006c18 <TIM_SlaveTimer_SetConfig+0x58>
 8006c0a:	2b10      	cmp	r3, #16
 8006c0c:	d058      	beq.n	8006cc0 <TIM_SlaveTimer_SetConfig+0x100>
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d056      	beq.n	8006cc0 <TIM_SlaveTimer_SetConfig+0x100>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d054      	beq.n	8006cc0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006c16:	e054      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006c18:	2b50      	cmp	r3, #80	; 0x50
 8006c1a:	d03d      	beq.n	8006c98 <TIM_SlaveTimer_SetConfig+0xd8>
 8006c1c:	2b50      	cmp	r3, #80	; 0x50
 8006c1e:	d802      	bhi.n	8006c26 <TIM_SlaveTimer_SetConfig+0x66>
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d010      	beq.n	8006c46 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006c24:	e04d      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006c26:	2b60      	cmp	r3, #96	; 0x60
 8006c28:	d040      	beq.n	8006cac <TIM_SlaveTimer_SetConfig+0xec>
 8006c2a:	2b70      	cmp	r3, #112	; 0x70
 8006c2c:	d000      	beq.n	8006c30 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006c2e:	e048      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68d9      	ldr	r1, [r3, #12]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f000 f934 	bl	8006eac <TIM_ETR_SetConfig>
      break;
 8006c44:	e03d      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b05      	cmp	r3, #5
 8006c4c:	d101      	bne.n	8006c52 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e038      	b.n	8006cc4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6a1a      	ldr	r2, [r3, #32]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c78:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	621a      	str	r2, [r3, #32]
      break;
 8006c96:	e014      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6899      	ldr	r1, [r3, #8]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f000 f887 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      break;
 8006caa:	e00a      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6899      	ldr	r1, [r3, #8]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f000 f8ac 	bl	8006e16 <TIM_TI2_ConfigInputStage>
      break;
 8006cbe:	e000      	b.n	8006cc2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006cc0:	bf00      	nop
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	fffefff8 	.word	0xfffefff8

08006cd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a28      	ldr	r2, [pc, #160]	; (8006d9c <TIM_TI1_SetConfig+0xcc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01b      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d04:	d017      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a25      	ldr	r2, [pc, #148]	; (8006da0 <TIM_TI1_SetConfig+0xd0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d013      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a24      	ldr	r2, [pc, #144]	; (8006da4 <TIM_TI1_SetConfig+0xd4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00f      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a23      	ldr	r2, [pc, #140]	; (8006da8 <TIM_TI1_SetConfig+0xd8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00b      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4a22      	ldr	r2, [pc, #136]	; (8006dac <TIM_TI1_SetConfig+0xdc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d007      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a21      	ldr	r2, [pc, #132]	; (8006db0 <TIM_TI1_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a20      	ldr	r2, [pc, #128]	; (8006db4 <TIM_TI1_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <TIM_TI1_SetConfig+0x6a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <TIM_TI1_SetConfig+0x6c>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e003      	b.n	8006d5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 030a 	and.w	r3, r3, #10
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40001800 	.word	0x40001800

08006db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 030a 	bic.w	r3, r3, #10
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f023 0210 	bic.w	r2, r3, #16
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f043 0307 	orr.w	r3, r3, #7
 8006e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	609a      	str	r2, [r3, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	021a      	lsls	r2, r3, #8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	609a      	str	r2, [r3, #8]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2201      	movs	r2, #1
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	401a      	ands	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	431a      	orrs	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e086      	b.n	800705a <HAL_TIMEx_HallSensor_Init+0x122>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f881 	bl	8007068 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7ff fb23 	bl	80065c4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	f7ff fea0 	bl	8006cd0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 020c 	bic.w	r2, r2, #12
 8006f9e:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6999      	ldr	r1, [r3, #24]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006fd0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe0:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6899      	ldr	r1, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <HAL_TIMEx_HallSensor_Init+0x12c>)
 8006fee:	400b      	ands	r3, r1
 8006ff0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0204 	orr.w	r2, r2, #4
 8007000:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007006:	2300      	movs	r3, #0
 8007008:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800700a:	2370      	movs	r3, #112	; 0x70
 800700c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007012:	2300      	movs	r3, #0
 8007014:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f107 020c 	add.w	r2, r7, #12
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fbdc 	bl	80067e8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800703e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800704e:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	; 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	fffefff8 	.word	0xfffefff8

08007068 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2201      	movs	r2, #1
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff ff2d 	bl	8006eec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_TIMEx_HallSensor_Start+0x4c>)
 800709a:	4013      	ands	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b06      	cmp	r3, #6
 80070a2:	d00b      	beq.n	80070bc <HAL_TIMEx_HallSensor_Start+0x40>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070aa:	d007      	beq.n	80070bc <HAL_TIMEx_HallSensor_Start+0x40>
  {
    __HAL_TIM_ENABLE(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	00010007 	.word	0x00010007

080070cc <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e04c      	b.n	8007180 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d005      	beq.n	8007106 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d002      	beq.n	8007106 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b30      	cmp	r3, #48	; 0x30
 8007104:	d10f      	bne.n	8007126 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007114:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	430a      	orrs	r2, r1
 8007124:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0204 	bic.w	r2, r2, #4
 8007144:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007164:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0220 	orr.w	r2, r2, #32
 8007174:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e06d      	b.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a30      	ldr	r2, [pc, #192]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2f      	ldr	r2, [pc, #188]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d108      	bne.n	80071ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a20      	ldr	r2, [pc, #128]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d022      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007216:	d01d      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d018      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1c      	ldr	r2, [pc, #112]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d013      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1a      	ldr	r2, [pc, #104]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00e      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a15      	ldr	r2, [pc, #84]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d10c      	bne.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	4313      	orrs	r3, r2
 8007264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	40010000 	.word	0x40010000
 8007290:	40010400 	.word	0x40010400
 8007294:	40000400 	.word	0x40000400
 8007298:	40000800 	.word	0x40000800
 800729c:	40000c00 	.word	0x40000c00
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40001800 	.word	0x40001800

080072a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e065      	b.n	8007390 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a16      	ldr	r2, [pc, #88]	; (800739c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d115      	bne.n	800737e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	051b      	lsls	r3, r3, #20
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40010000 	.word	0x40010000
 80073a0:	40010400 	.word	0x40010400

080073a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e040      	b.n	8007460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d106      	bne.n	80073f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7fa ff70 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2224      	movs	r2, #36	; 0x24
 80073f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f972 	bl	80076f4 <UART_SetConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e022      	b.n	8007460 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fc10 	bl	8007c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fc97 	bl	8007d8c <UART_CheckIdleState>
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	f640 030f 	movw	r3, #2063	; 0x80f
 800748e:	4013      	ands	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d113      	bne.n	80074c0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00e      	beq.n	80074c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8100 	beq.w	80076b6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      }
      return;
 80074be:	e0fa      	b.n	80076b6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80d5 	beq.w	8007672 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80ca 	beq.w	8007672 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00e      	beq.n	8007506 <HAL_UART_IRQHandler+0x9e>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d009      	beq.n	8007506 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2201      	movs	r2, #1
 80074f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074fe:	f043 0201 	orr.w	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00e      	beq.n	800752e <HAL_UART_IRQHandler+0xc6>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2202      	movs	r2, #2
 8007520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007526:	f043 0204 	orr.w	r2, r3, #4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00e      	beq.n	8007556 <HAL_UART_IRQHandler+0xee>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2204      	movs	r2, #4
 8007548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d013      	beq.n	8007588 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2208      	movs	r2, #8
 800757a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007580:	f043 0208 	orr.w	r2, r3, #8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00f      	beq.n	80075b2 <HAL_UART_IRQHandler+0x14a>
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d07f      	beq.n	80076ba <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d004      	beq.n	80075fc <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d031      	beq.n	8007660 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fc6f 	bl	8007ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d123      	bne.n	8007658 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800761e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d013      	beq.n	8007650 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762c:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <HAL_UART_IRQHandler+0x260>)
 800762e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007634:	4618      	mov	r0, r3
 8007636:	f7fb ffd5 	bl	80035e4 <HAL_DMA_Abort_IT>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800764a:	4610      	mov	r0, r2
 800764c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764e:	e00e      	b.n	800766e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f845 	bl	80076e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007656:	e00a      	b.n	800766e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f841 	bl	80076e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765e:	e006      	b.n	800766e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f83d 	bl	80076e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800766c:	e025      	b.n	80076ba <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766e:	bf00      	nop
    return;
 8007670:	e023      	b.n	80076ba <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00d      	beq.n	8007698 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768a:	2b00      	cmp	r3, #0
 800768c:	d017      	beq.n	80076be <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
    }
    return;
 8007696:	e012      	b.n	80076be <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <HAL_UART_IRQHandler+0x258>
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc4d 	bl	8007f4c <UART_EndTransmit_IT>
    return;
 80076b2:	bf00      	nop
 80076b4:	e004      	b.n	80076c0 <HAL_UART_IRQHandler+0x258>
      return;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <HAL_UART_IRQHandler+0x258>
    return;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_UART_IRQHandler+0x258>
    return;
 80076be:	bf00      	nop
  }

}
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	08007f21 	.word	0x08007f21

080076cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4bb1      	ldr	r3, [pc, #708]	; (80079e8 <UART_SetConfig+0x2f4>)
 8007724:	4013      	ands	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	6939      	ldr	r1, [r7, #16]
 800772c:	430b      	orrs	r3, r1
 800772e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a9f      	ldr	r2, [pc, #636]	; (80079ec <UART_SetConfig+0x2f8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d121      	bne.n	80077b8 <UART_SetConfig+0xc4>
 8007774:	4b9e      	ldr	r3, [pc, #632]	; (80079f0 <UART_SetConfig+0x2fc>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d816      	bhi.n	80077b0 <UART_SetConfig+0xbc>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x94>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007799 	.word	0x08007799
 800778c:	080077a5 	.word	0x080077a5
 8007790:	0800779f 	.word	0x0800779f
 8007794:	080077ab 	.word	0x080077ab
 8007798:	2301      	movs	r3, #1
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e151      	b.n	8007a42 <UART_SetConfig+0x34e>
 800779e:	2302      	movs	r3, #2
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	e14e      	b.n	8007a42 <UART_SetConfig+0x34e>
 80077a4:	2304      	movs	r3, #4
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e14b      	b.n	8007a42 <UART_SetConfig+0x34e>
 80077aa:	2308      	movs	r3, #8
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e148      	b.n	8007a42 <UART_SetConfig+0x34e>
 80077b0:	2310      	movs	r3, #16
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	bf00      	nop
 80077b6:	e144      	b.n	8007a42 <UART_SetConfig+0x34e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a8d      	ldr	r2, [pc, #564]	; (80079f4 <UART_SetConfig+0x300>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d134      	bne.n	800782c <UART_SetConfig+0x138>
 80077c2:	4b8b      	ldr	r3, [pc, #556]	; (80079f0 <UART_SetConfig+0x2fc>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c8:	f003 030c 	and.w	r3, r3, #12
 80077cc:	2b0c      	cmp	r3, #12
 80077ce:	d829      	bhi.n	8007824 <UART_SetConfig+0x130>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0xe4>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	0800780d 	.word	0x0800780d
 80077dc:	08007825 	.word	0x08007825
 80077e0:	08007825 	.word	0x08007825
 80077e4:	08007825 	.word	0x08007825
 80077e8:	08007819 	.word	0x08007819
 80077ec:	08007825 	.word	0x08007825
 80077f0:	08007825 	.word	0x08007825
 80077f4:	08007825 	.word	0x08007825
 80077f8:	08007813 	.word	0x08007813
 80077fc:	08007825 	.word	0x08007825
 8007800:	08007825 	.word	0x08007825
 8007804:	08007825 	.word	0x08007825
 8007808:	0800781f 	.word	0x0800781f
 800780c:	2300      	movs	r3, #0
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e117      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007812:	2302      	movs	r3, #2
 8007814:	77fb      	strb	r3, [r7, #31]
 8007816:	e114      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007818:	2304      	movs	r3, #4
 800781a:	77fb      	strb	r3, [r7, #31]
 800781c:	e111      	b.n	8007a42 <UART_SetConfig+0x34e>
 800781e:	2308      	movs	r3, #8
 8007820:	77fb      	strb	r3, [r7, #31]
 8007822:	e10e      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007824:	2310      	movs	r3, #16
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	bf00      	nop
 800782a:	e10a      	b.n	8007a42 <UART_SetConfig+0x34e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a71      	ldr	r2, [pc, #452]	; (80079f8 <UART_SetConfig+0x304>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d120      	bne.n	8007878 <UART_SetConfig+0x184>
 8007836:	4b6e      	ldr	r3, [pc, #440]	; (80079f0 <UART_SetConfig+0x2fc>)
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007840:	2b10      	cmp	r3, #16
 8007842:	d00f      	beq.n	8007864 <UART_SetConfig+0x170>
 8007844:	2b10      	cmp	r3, #16
 8007846:	d802      	bhi.n	800784e <UART_SetConfig+0x15a>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <UART_SetConfig+0x164>
 800784c:	e010      	b.n	8007870 <UART_SetConfig+0x17c>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d005      	beq.n	800785e <UART_SetConfig+0x16a>
 8007852:	2b30      	cmp	r3, #48	; 0x30
 8007854:	d009      	beq.n	800786a <UART_SetConfig+0x176>
 8007856:	e00b      	b.n	8007870 <UART_SetConfig+0x17c>
 8007858:	2300      	movs	r3, #0
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e0f1      	b.n	8007a42 <UART_SetConfig+0x34e>
 800785e:	2302      	movs	r3, #2
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e0ee      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007864:	2304      	movs	r3, #4
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e0eb      	b.n	8007a42 <UART_SetConfig+0x34e>
 800786a:	2308      	movs	r3, #8
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e0e8      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007870:	2310      	movs	r3, #16
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	bf00      	nop
 8007876:	e0e4      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5f      	ldr	r2, [pc, #380]	; (80079fc <UART_SetConfig+0x308>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d120      	bne.n	80078c4 <UART_SetConfig+0x1d0>
 8007882:	4b5b      	ldr	r3, [pc, #364]	; (80079f0 <UART_SetConfig+0x2fc>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d00f      	beq.n	80078b0 <UART_SetConfig+0x1bc>
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d802      	bhi.n	800789a <UART_SetConfig+0x1a6>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <UART_SetConfig+0x1b0>
 8007898:	e010      	b.n	80078bc <UART_SetConfig+0x1c8>
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d005      	beq.n	80078aa <UART_SetConfig+0x1b6>
 800789e:	2bc0      	cmp	r3, #192	; 0xc0
 80078a0:	d009      	beq.n	80078b6 <UART_SetConfig+0x1c2>
 80078a2:	e00b      	b.n	80078bc <UART_SetConfig+0x1c8>
 80078a4:	2300      	movs	r3, #0
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0cb      	b.n	8007a42 <UART_SetConfig+0x34e>
 80078aa:	2302      	movs	r3, #2
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0c8      	b.n	8007a42 <UART_SetConfig+0x34e>
 80078b0:	2304      	movs	r3, #4
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e0c5      	b.n	8007a42 <UART_SetConfig+0x34e>
 80078b6:	2308      	movs	r3, #8
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e0c2      	b.n	8007a42 <UART_SetConfig+0x34e>
 80078bc:	2310      	movs	r3, #16
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	bf00      	nop
 80078c2:	e0be      	b.n	8007a42 <UART_SetConfig+0x34e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a4d      	ldr	r2, [pc, #308]	; (8007a00 <UART_SetConfig+0x30c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d124      	bne.n	8007918 <UART_SetConfig+0x224>
 80078ce:	4b48      	ldr	r3, [pc, #288]	; (80079f0 <UART_SetConfig+0x2fc>)
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078dc:	d012      	beq.n	8007904 <UART_SetConfig+0x210>
 80078de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e2:	d802      	bhi.n	80078ea <UART_SetConfig+0x1f6>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <UART_SetConfig+0x204>
 80078e8:	e012      	b.n	8007910 <UART_SetConfig+0x21c>
 80078ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ee:	d006      	beq.n	80078fe <UART_SetConfig+0x20a>
 80078f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f4:	d009      	beq.n	800790a <UART_SetConfig+0x216>
 80078f6:	e00b      	b.n	8007910 <UART_SetConfig+0x21c>
 80078f8:	2300      	movs	r3, #0
 80078fa:	77fb      	strb	r3, [r7, #31]
 80078fc:	e0a1      	b.n	8007a42 <UART_SetConfig+0x34e>
 80078fe:	2302      	movs	r3, #2
 8007900:	77fb      	strb	r3, [r7, #31]
 8007902:	e09e      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007904:	2304      	movs	r3, #4
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e09b      	b.n	8007a42 <UART_SetConfig+0x34e>
 800790a:	2308      	movs	r3, #8
 800790c:	77fb      	strb	r3, [r7, #31]
 800790e:	e098      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007910:	2310      	movs	r3, #16
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	bf00      	nop
 8007916:	e094      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a39      	ldr	r2, [pc, #228]	; (8007a04 <UART_SetConfig+0x310>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d124      	bne.n	800796c <UART_SetConfig+0x278>
 8007922:	4b33      	ldr	r3, [pc, #204]	; (80079f0 <UART_SetConfig+0x2fc>)
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800792c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007930:	d012      	beq.n	8007958 <UART_SetConfig+0x264>
 8007932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007936:	d802      	bhi.n	800793e <UART_SetConfig+0x24a>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <UART_SetConfig+0x258>
 800793c:	e012      	b.n	8007964 <UART_SetConfig+0x270>
 800793e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007942:	d006      	beq.n	8007952 <UART_SetConfig+0x25e>
 8007944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007948:	d009      	beq.n	800795e <UART_SetConfig+0x26a>
 800794a:	e00b      	b.n	8007964 <UART_SetConfig+0x270>
 800794c:	2301      	movs	r3, #1
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e077      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007952:	2302      	movs	r3, #2
 8007954:	77fb      	strb	r3, [r7, #31]
 8007956:	e074      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007958:	2304      	movs	r3, #4
 800795a:	77fb      	strb	r3, [r7, #31]
 800795c:	e071      	b.n	8007a42 <UART_SetConfig+0x34e>
 800795e:	2308      	movs	r3, #8
 8007960:	77fb      	strb	r3, [r7, #31]
 8007962:	e06e      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007964:	2310      	movs	r3, #16
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	bf00      	nop
 800796a:	e06a      	b.n	8007a42 <UART_SetConfig+0x34e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a25      	ldr	r2, [pc, #148]	; (8007a08 <UART_SetConfig+0x314>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d124      	bne.n	80079c0 <UART_SetConfig+0x2cc>
 8007976:	4b1e      	ldr	r3, [pc, #120]	; (80079f0 <UART_SetConfig+0x2fc>)
 8007978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007984:	d012      	beq.n	80079ac <UART_SetConfig+0x2b8>
 8007986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798a:	d802      	bhi.n	8007992 <UART_SetConfig+0x29e>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d007      	beq.n	80079a0 <UART_SetConfig+0x2ac>
 8007990:	e012      	b.n	80079b8 <UART_SetConfig+0x2c4>
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007996:	d006      	beq.n	80079a6 <UART_SetConfig+0x2b2>
 8007998:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800799c:	d009      	beq.n	80079b2 <UART_SetConfig+0x2be>
 800799e:	e00b      	b.n	80079b8 <UART_SetConfig+0x2c4>
 80079a0:	2300      	movs	r3, #0
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e04d      	b.n	8007a42 <UART_SetConfig+0x34e>
 80079a6:	2302      	movs	r3, #2
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e04a      	b.n	8007a42 <UART_SetConfig+0x34e>
 80079ac:	2304      	movs	r3, #4
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e047      	b.n	8007a42 <UART_SetConfig+0x34e>
 80079b2:	2308      	movs	r3, #8
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e044      	b.n	8007a42 <UART_SetConfig+0x34e>
 80079b8:	2310      	movs	r3, #16
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	bf00      	nop
 80079be:	e040      	b.n	8007a42 <UART_SetConfig+0x34e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <UART_SetConfig+0x318>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d139      	bne.n	8007a3e <UART_SetConfig+0x34a>
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <UART_SetConfig+0x2fc>)
 80079cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079d8:	d027      	beq.n	8007a2a <UART_SetConfig+0x336>
 80079da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079de:	d817      	bhi.n	8007a10 <UART_SetConfig+0x31c>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01c      	beq.n	8007a1e <UART_SetConfig+0x32a>
 80079e4:	e027      	b.n	8007a36 <UART_SetConfig+0x342>
 80079e6:	bf00      	nop
 80079e8:	efff69f3 	.word	0xefff69f3
 80079ec:	40011000 	.word	0x40011000
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40004400 	.word	0x40004400
 80079f8:	40004800 	.word	0x40004800
 80079fc:	40004c00 	.word	0x40004c00
 8007a00:	40005000 	.word	0x40005000
 8007a04:	40011400 	.word	0x40011400
 8007a08:	40007800 	.word	0x40007800
 8007a0c:	40007c00 	.word	0x40007c00
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	d006      	beq.n	8007a24 <UART_SetConfig+0x330>
 8007a16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a1a:	d009      	beq.n	8007a30 <UART_SetConfig+0x33c>
 8007a1c:	e00b      	b.n	8007a36 <UART_SetConfig+0x342>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	77fb      	strb	r3, [r7, #31]
 8007a22:	e00e      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007a24:	2302      	movs	r3, #2
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e00b      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007a2a:	2304      	movs	r3, #4
 8007a2c:	77fb      	strb	r3, [r7, #31]
 8007a2e:	e008      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007a30:	2308      	movs	r3, #8
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e005      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007a36:	2310      	movs	r3, #16
 8007a38:	77fb      	strb	r3, [r7, #31]
 8007a3a:	bf00      	nop
 8007a3c:	e001      	b.n	8007a42 <UART_SetConfig+0x34e>
 8007a3e:	2310      	movs	r3, #16
 8007a40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4a:	d17f      	bne.n	8007b4c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007a4c:	7ffb      	ldrb	r3, [r7, #31]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d85c      	bhi.n	8007b0c <UART_SetConfig+0x418>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x364>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007abd 	.word	0x08007abd
 8007a64:	08007b0d 	.word	0x08007b0d
 8007a68:	08007ad5 	.word	0x08007ad5
 8007a6c:	08007b0d 	.word	0x08007b0d
 8007a70:	08007b0d 	.word	0x08007b0d
 8007a74:	08007b0d 	.word	0x08007b0d
 8007a78:	08007af5 	.word	0x08007af5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7c:	f7fd fc68 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007a80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	005a      	lsls	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	441a      	add	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	61bb      	str	r3, [r7, #24]
        break;
 8007a9a:	e03a      	b.n	8007b12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a9c:	f7fd fc6c 	bl	8005378 <HAL_RCC_GetPCLK2Freq>
 8007aa0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	005a      	lsls	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	441a      	add	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	61bb      	str	r3, [r7, #24]
        break;
 8007aba:	e02a      	b.n	8007b12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	085a      	lsrs	r2, r3, #1
 8007ac2:	4b5f      	ldr	r3, [pc, #380]	; (8007c40 <UART_SetConfig+0x54c>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6852      	ldr	r2, [r2, #4]
 8007aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	61bb      	str	r3, [r7, #24]
        break;
 8007ad2:	e01e      	b.n	8007b12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad4:	f7fd fb58 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8007ad8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	005a      	lsls	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	61bb      	str	r3, [r7, #24]
        break;
 8007af2:	e00e      	b.n	8007b12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	61bb      	str	r3, [r7, #24]
        break;
 8007b0a:	e002      	b.n	8007b12 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b0f      	cmp	r3, #15
 8007b16:	d916      	bls.n	8007b46 <UART_SetConfig+0x452>
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b1e:	d212      	bcs.n	8007b46 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f023 030f 	bic.w	r3, r3, #15
 8007b28:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	897b      	ldrh	r3, [r7, #10]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	897a      	ldrh	r2, [r7, #10]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e070      	b.n	8007c28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e06d      	b.n	8007c28 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007b4c:	7ffb      	ldrb	r3, [r7, #31]
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d859      	bhi.n	8007c06 <UART_SetConfig+0x512>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x464>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b7d 	.word	0x08007b7d
 8007b5c:	08007b9b 	.word	0x08007b9b
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007c07 	.word	0x08007c07
 8007b68:	08007bd1 	.word	0x08007bd1
 8007b6c:	08007c07 	.word	0x08007c07
 8007b70:	08007c07 	.word	0x08007c07
 8007b74:	08007c07 	.word	0x08007c07
 8007b78:	08007bef 	.word	0x08007bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b7c:	f7fd fbe8 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007b80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	085a      	lsrs	r2, r3, #1
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	441a      	add	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	61bb      	str	r3, [r7, #24]
        break;
 8007b98:	e038      	b.n	8007c0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b9a:	f7fd fbed 	bl	8005378 <HAL_RCC_GetPCLK2Freq>
 8007b9e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	085a      	lsrs	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	441a      	add	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	61bb      	str	r3, [r7, #24]
        break;
 8007bb6:	e029      	b.n	8007c0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	085a      	lsrs	r2, r3, #1
 8007bbe:	4b21      	ldr	r3, [pc, #132]	; (8007c44 <UART_SetConfig+0x550>)
 8007bc0:	4413      	add	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6852      	ldr	r2, [r2, #4]
 8007bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	61bb      	str	r3, [r7, #24]
        break;
 8007bce:	e01d      	b.n	8007c0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd0:	f7fd fada 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8007bd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	085a      	lsrs	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	441a      	add	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	61bb      	str	r3, [r7, #24]
        break;
 8007bec:	e00e      	b.n	8007c0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	61bb      	str	r3, [r7, #24]
        break;
 8007c04:	e002      	b.n	8007c0c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
        break;
 8007c0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	d908      	bls.n	8007c24 <UART_SetConfig+0x530>
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c18:	d204      	bcs.n	8007c24 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	60da      	str	r2, [r3, #12]
 8007c22:	e001      	b.n	8007c28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	01e84800 	.word	0x01e84800
 8007c44:	00f42400 	.word	0x00f42400

08007c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d46:	d10a      	bne.n	8007d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d9a:	f7fa fc73 	bl	8002684 <HAL_GetTick>
 8007d9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d10e      	bne.n	8007dcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f814 	bl	8007dea <UART_WaitOnFlagUntilTimeout>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e00a      	b.n	8007de2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	603b      	str	r3, [r7, #0]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfa:	e05d      	b.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d059      	beq.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e04:	f7fa fc3e 	bl	8002684 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d302      	bcc.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d11b      	bne.n	8007e52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0201 	bic.w	r2, r2, #1
 8007e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e042      	b.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02b      	beq.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e6e:	d123      	bne.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0201 	bic.w	r2, r2, #1
 8007e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e00f      	b.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69da      	ldr	r2, [r3, #28]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d092      	beq.n	8007dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ef6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fbce 	bl	80076e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f44:	bf00      	nop
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fbab 	bl	80076cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f80:	b084      	sub	sp, #16
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	f107 001c 	add.w	r0, r7, #28
 8007f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d120      	bne.n	8007fda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <USB_CoreInit+0xac>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d105      	bne.n	8007fce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa52 	bl	8008478 <USB_CoreReset>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	e010      	b.n	8007ffc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa46 	bl	8008478 <USB_CoreReset>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d10b      	bne.n	800801a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f043 0206 	orr.w	r2, r3, #6
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008026:	b004      	add	sp, #16
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	ffbdffbf 	.word	0xffbdffbf

08008030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f023 0201 	bic.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d106      	bne.n	800807e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
 800807c:	e00b      	b.n	8008096 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60da      	str	r2, [r3, #12]
 8008090:	e001      	b.n	8008096 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e003      	b.n	800809e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008096:	2032      	movs	r0, #50	; 0x32
 8008098:	f7fa fb00 	bl	800269c <HAL_Delay>

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a8:	b084      	sub	sp, #16
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	e009      	b.n	80080dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3340      	adds	r3, #64	; 0x40
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	3301      	adds	r3, #1
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b0e      	cmp	r3, #14
 80080e0:	d9f2      	bls.n	80080c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11c      	bne.n	8008122 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080f6:	f043 0302 	orr.w	r3, r3, #2
 80080fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e005      	b.n	800812e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008140:	4619      	mov	r1, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008148:	461a      	mov	r2, r3
 800814a:	680b      	ldr	r3, [r1, #0]
 800814c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	2b01      	cmp	r3, #1
 8008152:	d10c      	bne.n	800816e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f959 	bl	8008414 <USB_SetDevSpeed>
 8008162:	e018      	b.n	8008196 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008164:	2101      	movs	r1, #1
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f954 	bl	8008414 <USB_SetDevSpeed>
 800816c:	e013      	b.n	8008196 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	2b03      	cmp	r3, #3
 8008172:	d10c      	bne.n	800818e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800817a:	2100      	movs	r1, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f949 	bl	8008414 <USB_SetDevSpeed>
 8008182:	e008      	b.n	8008196 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008184:	2101      	movs	r1, #1
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f944 	bl	8008414 <USB_SetDevSpeed>
 800818c:	e003      	b.n	8008196 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800818e:	2103      	movs	r1, #3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f93f 	bl	8008414 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008196:	2110      	movs	r1, #16
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8f3 	bl	8008384 <USB_FlushTxFifo>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f911 	bl	80083d0 <USB_FlushRxFifo>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	461a      	mov	r2, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	461a      	mov	r2, r3
 80081d8:	2300      	movs	r3, #0
 80081da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	e043      	b.n	800826a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f8:	d118      	bne.n	800822c <USB_DevInit+0x184>
    {
      if (i == 0U)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820c:	461a      	mov	r2, r3
 800820e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e013      	b.n	800823e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	461a      	mov	r2, r3
 8008224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	e008      	b.n	800823e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824a:	461a      	mov	r2, r3
 800824c:	2300      	movs	r3, #0
 800824e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	461a      	mov	r2, r3
 800825e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3301      	adds	r3, #1
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	d3b7      	bcc.n	80081e2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008272:	2300      	movs	r3, #0
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	e043      	b.n	8008300 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800828a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800828e:	d118      	bne.n	80082c2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10a      	bne.n	80082ac <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	461a      	mov	r2, r3
 80082a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	e013      	b.n	80082d4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	461a      	mov	r2, r3
 80082ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e008      	b.n	80082d4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	461a      	mov	r2, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e0:	461a      	mov	r2, r3
 80082e2:	2300      	movs	r3, #0
 80082e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	461a      	mov	r2, r3
 80082f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	3301      	adds	r3, #1
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	429a      	cmp	r2, r3
 8008306:	d3b7      	bcc.n	8008278 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f043 0210 	orr.w	r2, r3, #16
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	4b0e      	ldr	r3, [pc, #56]	; (800837c <USB_DevInit+0x2d4>)
 8008342:	4313      	orrs	r3, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f043 0208 	orr.w	r2, r3, #8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800835a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d105      	bne.n	800836c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699a      	ldr	r2, [r3, #24]
 8008364:	4b06      	ldr	r3, [pc, #24]	; (8008380 <USB_DevInit+0x2d8>)
 8008366:	4313      	orrs	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800836c:	7dfb      	ldrb	r3, [r7, #23]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008378:	b004      	add	sp, #16
 800837a:	4770      	bx	lr
 800837c:	803c3800 	.word	0x803c3800
 8008380:	40000004 	.word	0x40000004

08008384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	019b      	lsls	r3, r3, #6
 8008396:	f043 0220 	orr.w	r2, r3, #32
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <USB_FlushTxFifo+0x48>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d901      	bls.n	80083b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e006      	b.n	80083be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d0f0      	beq.n	800839e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	00030d40 	.word	0x00030d40

080083d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2210      	movs	r2, #16
 80083e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <USB_FlushRxFifo+0x40>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e006      	b.n	8008402 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d0f0      	beq.n	80083e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	00030d40 	.word	0x00030d40

08008414 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008434:	4313      	orrs	r3, r2
 8008436:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008460:	f043 0302 	orr.w	r3, r3, #2
 8008464:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008466:	2003      	movs	r0, #3
 8008468:	f7fa f918 	bl	800269c <HAL_Delay>

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4a13      	ldr	r2, [pc, #76]	; (80084dc <USB_CoreReset+0x64>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d901      	bls.n	8008496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e01b      	b.n	80084ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	daf2      	bge.n	8008484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f043 0201 	orr.w	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <USB_CoreReset+0x64>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d901      	bls.n	80084c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e006      	b.n	80084ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d0f0      	beq.n	80084ae <USB_CoreReset+0x36>

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	00030d40 	.word	0x00030d40

080084e0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80084f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8008500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008510:	eeb1 7a67 	vneg.f32	s14, s15
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	edd3 7a08 	vldr	s15, [r3, #32]
 800851a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800851e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d006      	beq.n	8008544 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	330c      	adds	r3, #12
 800853a:	220c      	movs	r2, #12
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f9a8 	bl	8008894 <memset>
  }

}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 800854c:	b480      	push	{r7}
 800854e:	b091      	sub	sp, #68	; 0x44
 8008550:	af00      	add	r7, sp, #0
 8008552:	ed87 0a03 	vstr	s0, [r7, #12]
 8008556:	60b8      	str	r0, [r7, #8]
 8008558:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 800855a:	edd7 7a03 	vldr	s15, [r7, #12]
 800855e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8008830 <arm_sin_cos_f32+0x2e4>
 8008562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008566:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 800856a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800856e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d505      	bpl.n	8008584 <arm_sin_cos_f32+0x38>
    {
        in = -in;
 8008578:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800857c:	eef1 7a67 	vneg.f32	s15, s15
 8008580:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 8008584:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800858c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008590:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008598:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800859c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80085a0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8008834 <arm_sin_cos_f32+0x2e8>
 80085a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 80085ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80085b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b4:	ee17 3a90 	vmov	r3, s15
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085be:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 80085c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085c2:	3380      	adds	r3, #128	; 0x80
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ca:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 80085cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80085da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 80085e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085e4:	4a94      	ldr	r2, [pc, #592]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 80085ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085f0:	3301      	adds	r3, #1
 80085f2:	4a91      	ldr	r2, [pc, #580]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 80085fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085fe:	4a8e      	ldr	r2, [pc, #568]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	edd3 7a00 	vldr	s15, [r3]
 8008608:	eef1 7a67 	vneg.f32	s15, s15
 800860c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 8008610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008612:	3301      	adds	r3, #1
 8008614:	4a88      	ldr	r2, [pc, #544]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	edd3 7a00 	vldr	s15, [r3]
 800861e:	eef1 7a67 	vneg.f32	s15, s15
 8008622:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 8008626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800862a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800862e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008632:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800863a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800863e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 800864e:	4b7b      	ldr	r3, [pc, #492]	; (800883c <arm_sin_cos_f32+0x2f0>)
 8008650:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 8008652:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008656:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800865a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800865e:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 8008662:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008666:	edd7 7a08 	vldr	s15, [r7, #32]
 800866a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800866e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008676:	edd7 7a05 	vldr	s15, [r7, #20]
 800867a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800867e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008682:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8008686:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800868a:	edd7 7a07 	vldr	s15, [r7, #28]
 800868e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008692:	edd7 7a05 	vldr	s15, [r7, #20]
 8008696:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800869a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800869e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086a2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80086a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80086aa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80086ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80086b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80086b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 80086c2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80086c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80086ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086ce:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80086d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80086d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086de:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 80086e2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80086e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80086ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 80086fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80086fe:	4a4e      	ldr	r2, [pc, #312]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 8008708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800870a:	3301      	adds	r3, #1
 800870c:	4a4a      	ldr	r2, [pc, #296]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 8008716:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008718:	4a47      	ldr	r2, [pc, #284]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 8008722:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008724:	3301      	adds	r3, #1
 8008726:	4a44      	ldr	r2, [pc, #272]	; (8008838 <arm_sin_cos_f32+0x2ec>)
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 8008730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008734:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800873c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008744:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008748:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800874c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008754:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 8008758:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800875c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008764:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 8008768:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800876c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008774:	edd7 7a06 	vldr	s15, [r7, #24]
 8008778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800877c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008780:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008788:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 800878c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008790:	edd7 7a07 	vldr	s15, [r7, #28]
 8008794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008798:	edd7 7a05 	vldr	s15, [r7, #20]
 800879c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80087a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80087a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087a8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80087ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80087b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80087b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80087b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087c4:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 80087c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80087cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80087d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80087d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80087dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087e4:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 80087e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80087ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80087f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 8008802:	edd7 7a03 	vldr	s15, [r7, #12]
 8008806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800880a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880e:	d400      	bmi.n	8008812 <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 8008810:	e007      	b.n	8008822 <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	edd3 7a00 	vldr	s15, [r3]
 8008818:	eef1 7a67 	vneg.f32	s15, s15
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	edc3 7a00 	vstr	s15, [r3]
}
 8008822:	bf00      	nop
 8008824:	3744      	adds	r7, #68	; 0x44
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	3b360b61 	.word	0x3b360b61
 8008834:	44000000 	.word	0x44000000
 8008838:	0800c350 	.word	0x0800c350
 800883c:	3c490fdb 	.word	0x3c490fdb

08008840 <__errno>:
 8008840:	4b01      	ldr	r3, [pc, #4]	; (8008848 <__errno+0x8>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	20000010 	.word	0x20000010

0800884c <__libc_init_array>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4e0d      	ldr	r6, [pc, #52]	; (8008884 <__libc_init_array+0x38>)
 8008850:	4c0d      	ldr	r4, [pc, #52]	; (8008888 <__libc_init_array+0x3c>)
 8008852:	1ba4      	subs	r4, r4, r6
 8008854:	10a4      	asrs	r4, r4, #2
 8008856:	2500      	movs	r5, #0
 8008858:	42a5      	cmp	r5, r4
 800885a:	d109      	bne.n	8008870 <__libc_init_array+0x24>
 800885c:	4e0b      	ldr	r6, [pc, #44]	; (800888c <__libc_init_array+0x40>)
 800885e:	4c0c      	ldr	r4, [pc, #48]	; (8008890 <__libc_init_array+0x44>)
 8008860:	f003 fd58 	bl	800c314 <_init>
 8008864:	1ba4      	subs	r4, r4, r6
 8008866:	10a4      	asrs	r4, r4, #2
 8008868:	2500      	movs	r5, #0
 800886a:	42a5      	cmp	r5, r4
 800886c:	d105      	bne.n	800887a <__libc_init_array+0x2e>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008874:	4798      	blx	r3
 8008876:	3501      	adds	r5, #1
 8008878:	e7ee      	b.n	8008858 <__libc_init_array+0xc>
 800887a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800887e:	4798      	blx	r3
 8008880:	3501      	adds	r5, #1
 8008882:	e7f2      	b.n	800886a <__libc_init_array+0x1e>
 8008884:	0800ce10 	.word	0x0800ce10
 8008888:	0800ce10 	.word	0x0800ce10
 800888c:	0800ce10 	.word	0x0800ce10
 8008890:	0800ce14 	.word	0x0800ce14

08008894 <memset>:
 8008894:	4402      	add	r2, r0
 8008896:	4603      	mov	r3, r0
 8008898:	4293      	cmp	r3, r2
 800889a:	d100      	bne.n	800889e <memset+0xa>
 800889c:	4770      	bx	lr
 800889e:	f803 1b01 	strb.w	r1, [r3], #1
 80088a2:	e7f9      	b.n	8008898 <memset+0x4>

080088a4 <__cvt>:
 80088a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	ec55 4b10 	vmov	r4, r5, d0
 80088ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80088ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088b2:	2d00      	cmp	r5, #0
 80088b4:	460e      	mov	r6, r1
 80088b6:	4691      	mov	r9, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	bfb8      	it	lt
 80088bc:	4622      	movlt	r2, r4
 80088be:	462b      	mov	r3, r5
 80088c0:	f027 0720 	bic.w	r7, r7, #32
 80088c4:	bfbb      	ittet	lt
 80088c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088ca:	461d      	movlt	r5, r3
 80088cc:	2300      	movge	r3, #0
 80088ce:	232d      	movlt	r3, #45	; 0x2d
 80088d0:	bfb8      	it	lt
 80088d2:	4614      	movlt	r4, r2
 80088d4:	2f46      	cmp	r7, #70	; 0x46
 80088d6:	700b      	strb	r3, [r1, #0]
 80088d8:	d004      	beq.n	80088e4 <__cvt+0x40>
 80088da:	2f45      	cmp	r7, #69	; 0x45
 80088dc:	d100      	bne.n	80088e0 <__cvt+0x3c>
 80088de:	3601      	adds	r6, #1
 80088e0:	2102      	movs	r1, #2
 80088e2:	e000      	b.n	80088e6 <__cvt+0x42>
 80088e4:	2103      	movs	r1, #3
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	ab02      	add	r3, sp, #8
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	4632      	mov	r2, r6
 80088f0:	4653      	mov	r3, sl
 80088f2:	ec45 4b10 	vmov	d0, r4, r5
 80088f6:	f001 fd77 	bl	800a3e8 <_dtoa_r>
 80088fa:	2f47      	cmp	r7, #71	; 0x47
 80088fc:	4680      	mov	r8, r0
 80088fe:	d102      	bne.n	8008906 <__cvt+0x62>
 8008900:	f019 0f01 	tst.w	r9, #1
 8008904:	d026      	beq.n	8008954 <__cvt+0xb0>
 8008906:	2f46      	cmp	r7, #70	; 0x46
 8008908:	eb08 0906 	add.w	r9, r8, r6
 800890c:	d111      	bne.n	8008932 <__cvt+0x8e>
 800890e:	f898 3000 	ldrb.w	r3, [r8]
 8008912:	2b30      	cmp	r3, #48	; 0x30
 8008914:	d10a      	bne.n	800892c <__cvt+0x88>
 8008916:	2200      	movs	r2, #0
 8008918:	2300      	movs	r3, #0
 800891a:	4620      	mov	r0, r4
 800891c:	4629      	mov	r1, r5
 800891e:	f7f8 f8f3 	bl	8000b08 <__aeabi_dcmpeq>
 8008922:	b918      	cbnz	r0, 800892c <__cvt+0x88>
 8008924:	f1c6 0601 	rsb	r6, r6, #1
 8008928:	f8ca 6000 	str.w	r6, [sl]
 800892c:	f8da 3000 	ldr.w	r3, [sl]
 8008930:	4499      	add	r9, r3
 8008932:	2200      	movs	r2, #0
 8008934:	2300      	movs	r3, #0
 8008936:	4620      	mov	r0, r4
 8008938:	4629      	mov	r1, r5
 800893a:	f7f8 f8e5 	bl	8000b08 <__aeabi_dcmpeq>
 800893e:	b938      	cbnz	r0, 8008950 <__cvt+0xac>
 8008940:	2230      	movs	r2, #48	; 0x30
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	454b      	cmp	r3, r9
 8008946:	d205      	bcs.n	8008954 <__cvt+0xb0>
 8008948:	1c59      	adds	r1, r3, #1
 800894a:	9103      	str	r1, [sp, #12]
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	e7f8      	b.n	8008942 <__cvt+0x9e>
 8008950:	f8cd 900c 	str.w	r9, [sp, #12]
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008958:	eba3 0308 	sub.w	r3, r3, r8
 800895c:	4640      	mov	r0, r8
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	b004      	add	sp, #16
 8008962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008966 <__exponent>:
 8008966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008968:	2900      	cmp	r1, #0
 800896a:	4604      	mov	r4, r0
 800896c:	bfba      	itte	lt
 800896e:	4249      	neglt	r1, r1
 8008970:	232d      	movlt	r3, #45	; 0x2d
 8008972:	232b      	movge	r3, #43	; 0x2b
 8008974:	2909      	cmp	r1, #9
 8008976:	f804 2b02 	strb.w	r2, [r4], #2
 800897a:	7043      	strb	r3, [r0, #1]
 800897c:	dd20      	ble.n	80089c0 <__exponent+0x5a>
 800897e:	f10d 0307 	add.w	r3, sp, #7
 8008982:	461f      	mov	r7, r3
 8008984:	260a      	movs	r6, #10
 8008986:	fb91 f5f6 	sdiv	r5, r1, r6
 800898a:	fb06 1115 	mls	r1, r6, r5, r1
 800898e:	3130      	adds	r1, #48	; 0x30
 8008990:	2d09      	cmp	r5, #9
 8008992:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008996:	f103 32ff 	add.w	r2, r3, #4294967295
 800899a:	4629      	mov	r1, r5
 800899c:	dc09      	bgt.n	80089b2 <__exponent+0x4c>
 800899e:	3130      	adds	r1, #48	; 0x30
 80089a0:	3b02      	subs	r3, #2
 80089a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80089a6:	42bb      	cmp	r3, r7
 80089a8:	4622      	mov	r2, r4
 80089aa:	d304      	bcc.n	80089b6 <__exponent+0x50>
 80089ac:	1a10      	subs	r0, r2, r0
 80089ae:	b003      	add	sp, #12
 80089b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b2:	4613      	mov	r3, r2
 80089b4:	e7e7      	b.n	8008986 <__exponent+0x20>
 80089b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ba:	f804 2b01 	strb.w	r2, [r4], #1
 80089be:	e7f2      	b.n	80089a6 <__exponent+0x40>
 80089c0:	2330      	movs	r3, #48	; 0x30
 80089c2:	4419      	add	r1, r3
 80089c4:	7083      	strb	r3, [r0, #2]
 80089c6:	1d02      	adds	r2, r0, #4
 80089c8:	70c1      	strb	r1, [r0, #3]
 80089ca:	e7ef      	b.n	80089ac <__exponent+0x46>

080089cc <_printf_float>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	b08d      	sub	sp, #52	; 0x34
 80089d2:	460c      	mov	r4, r1
 80089d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80089d8:	4616      	mov	r6, r2
 80089da:	461f      	mov	r7, r3
 80089dc:	4605      	mov	r5, r0
 80089de:	f002 fde7 	bl	800b5b0 <_localeconv_r>
 80089e2:	6803      	ldr	r3, [r0, #0]
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7f7 fc12 	bl	8000210 <strlen>
 80089ec:	2300      	movs	r3, #0
 80089ee:	930a      	str	r3, [sp, #40]	; 0x28
 80089f0:	f8d8 3000 	ldr.w	r3, [r8]
 80089f4:	9005      	str	r0, [sp, #20]
 80089f6:	3307      	adds	r3, #7
 80089f8:	f023 0307 	bic.w	r3, r3, #7
 80089fc:	f103 0208 	add.w	r2, r3, #8
 8008a00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a04:	f8d4 b000 	ldr.w	fp, [r4]
 8008a08:	f8c8 2000 	str.w	r2, [r8]
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a14:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a1c:	9307      	str	r3, [sp, #28]
 8008a1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295
 8008a26:	4ba7      	ldr	r3, [pc, #668]	; (8008cc4 <_printf_float+0x2f8>)
 8008a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a2c:	f7f8 f89e 	bl	8000b6c <__aeabi_dcmpun>
 8008a30:	bb70      	cbnz	r0, 8008a90 <_printf_float+0xc4>
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	4ba3      	ldr	r3, [pc, #652]	; (8008cc4 <_printf_float+0x2f8>)
 8008a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a3c:	f7f8 f878 	bl	8000b30 <__aeabi_dcmple>
 8008a40:	bb30      	cbnz	r0, 8008a90 <_printf_float+0xc4>
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f8 f867 	bl	8000b1c <__aeabi_dcmplt>
 8008a4e:	b110      	cbz	r0, 8008a56 <_printf_float+0x8a>
 8008a50:	232d      	movs	r3, #45	; 0x2d
 8008a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a56:	4a9c      	ldr	r2, [pc, #624]	; (8008cc8 <_printf_float+0x2fc>)
 8008a58:	4b9c      	ldr	r3, [pc, #624]	; (8008ccc <_printf_float+0x300>)
 8008a5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a5e:	bf8c      	ite	hi
 8008a60:	4690      	movhi	r8, r2
 8008a62:	4698      	movls	r8, r3
 8008a64:	2303      	movs	r3, #3
 8008a66:	f02b 0204 	bic.w	r2, fp, #4
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	f04f 0900 	mov.w	r9, #0
 8008a72:	9700      	str	r7, [sp, #0]
 8008a74:	4633      	mov	r3, r6
 8008a76:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f9e6 	bl	8008e4c <_printf_common>
 8008a80:	3001      	adds	r0, #1
 8008a82:	f040 808d 	bne.w	8008ba0 <_printf_float+0x1d4>
 8008a86:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8a:	b00d      	add	sp, #52	; 0x34
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f8 f868 	bl	8000b6c <__aeabi_dcmpun>
 8008a9c:	b110      	cbz	r0, 8008aa4 <_printf_float+0xd8>
 8008a9e:	4a8c      	ldr	r2, [pc, #560]	; (8008cd0 <_printf_float+0x304>)
 8008aa0:	4b8c      	ldr	r3, [pc, #560]	; (8008cd4 <_printf_float+0x308>)
 8008aa2:	e7da      	b.n	8008a5a <_printf_float+0x8e>
 8008aa4:	6861      	ldr	r1, [r4, #4]
 8008aa6:	1c4b      	adds	r3, r1, #1
 8008aa8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008aac:	a80a      	add	r0, sp, #40	; 0x28
 8008aae:	d13e      	bne.n	8008b2e <_printf_float+0x162>
 8008ab0:	2306      	movs	r3, #6
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008aba:	ab09      	add	r3, sp, #36	; 0x24
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	ec49 8b10 	vmov	d0, r8, r9
 8008ac2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	f8cd a004 	str.w	sl, [sp, #4]
 8008acc:	6861      	ldr	r1, [r4, #4]
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7ff fee8 	bl	80088a4 <__cvt>
 8008ad4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008ad8:	2b47      	cmp	r3, #71	; 0x47
 8008ada:	4680      	mov	r8, r0
 8008adc:	d109      	bne.n	8008af2 <_printf_float+0x126>
 8008ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae0:	1cd8      	adds	r0, r3, #3
 8008ae2:	db02      	blt.n	8008aea <_printf_float+0x11e>
 8008ae4:	6862      	ldr	r2, [r4, #4]
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	dd47      	ble.n	8008b7a <_printf_float+0x1ae>
 8008aea:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aee:	fa5f fa8a 	uxtb.w	sl, sl
 8008af2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008af6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008af8:	d824      	bhi.n	8008b44 <_printf_float+0x178>
 8008afa:	3901      	subs	r1, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b02:	9109      	str	r1, [sp, #36]	; 0x24
 8008b04:	f7ff ff2f 	bl	8008966 <__exponent>
 8008b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0a:	1813      	adds	r3, r2, r0
 8008b0c:	2a01      	cmp	r2, #1
 8008b0e:	4681      	mov	r9, r0
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	dc02      	bgt.n	8008b1a <_printf_float+0x14e>
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	07d1      	lsls	r1, r2, #31
 8008b18:	d501      	bpl.n	8008b1e <_printf_float+0x152>
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0a5      	beq.n	8008a72 <_printf_float+0xa6>
 8008b26:	232d      	movs	r3, #45	; 0x2d
 8008b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2c:	e7a1      	b.n	8008a72 <_printf_float+0xa6>
 8008b2e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008b32:	f000 8177 	beq.w	8008e24 <_printf_float+0x458>
 8008b36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008b3a:	d1bb      	bne.n	8008ab4 <_printf_float+0xe8>
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	d1b9      	bne.n	8008ab4 <_printf_float+0xe8>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7b6      	b.n	8008ab2 <_printf_float+0xe6>
 8008b44:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008b48:	d119      	bne.n	8008b7e <_printf_float+0x1b2>
 8008b4a:	2900      	cmp	r1, #0
 8008b4c:	6863      	ldr	r3, [r4, #4]
 8008b4e:	dd0c      	ble.n	8008b6a <_printf_float+0x19e>
 8008b50:	6121      	str	r1, [r4, #16]
 8008b52:	b913      	cbnz	r3, 8008b5a <_printf_float+0x18e>
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	07d2      	lsls	r2, r2, #31
 8008b58:	d502      	bpl.n	8008b60 <_printf_float+0x194>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	440b      	add	r3, r1
 8008b5e:	6123      	str	r3, [r4, #16]
 8008b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b62:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b64:	f04f 0900 	mov.w	r9, #0
 8008b68:	e7d9      	b.n	8008b1e <_printf_float+0x152>
 8008b6a:	b913      	cbnz	r3, 8008b72 <_printf_float+0x1a6>
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	07d0      	lsls	r0, r2, #31
 8008b70:	d501      	bpl.n	8008b76 <_printf_float+0x1aa>
 8008b72:	3302      	adds	r3, #2
 8008b74:	e7f3      	b.n	8008b5e <_printf_float+0x192>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e7f1      	b.n	8008b5e <_printf_float+0x192>
 8008b7a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008b7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b82:	4293      	cmp	r3, r2
 8008b84:	db05      	blt.n	8008b92 <_printf_float+0x1c6>
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	6123      	str	r3, [r4, #16]
 8008b8a:	07d1      	lsls	r1, r2, #31
 8008b8c:	d5e8      	bpl.n	8008b60 <_printf_float+0x194>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	e7e5      	b.n	8008b5e <_printf_float+0x192>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bfd4      	ite	le
 8008b96:	f1c3 0302 	rsble	r3, r3, #2
 8008b9a:	2301      	movgt	r3, #1
 8008b9c:	4413      	add	r3, r2
 8008b9e:	e7de      	b.n	8008b5e <_printf_float+0x192>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	055a      	lsls	r2, r3, #21
 8008ba4:	d407      	bmi.n	8008bb6 <_printf_float+0x1ea>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	4642      	mov	r2, r8
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d12b      	bne.n	8008c0c <_printf_float+0x240>
 8008bb4:	e767      	b.n	8008a86 <_printf_float+0xba>
 8008bb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008bba:	f240 80dc 	bls.w	8008d76 <_printf_float+0x3aa>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bc6:	f7f7 ff9f 	bl	8000b08 <__aeabi_dcmpeq>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d033      	beq.n	8008c36 <_printf_float+0x26a>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4a41      	ldr	r2, [pc, #260]	; (8008cd8 <_printf_float+0x30c>)
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f af54 	beq.w	8008a86 <_printf_float+0xba>
 8008bde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be2:	429a      	cmp	r2, r3
 8008be4:	db02      	blt.n	8008bec <_printf_float+0x220>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	07d8      	lsls	r0, r3, #31
 8008bea:	d50f      	bpl.n	8008c0c <_printf_float+0x240>
 8008bec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	47b8      	blx	r7
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	f43f af45 	beq.w	8008a86 <_printf_float+0xba>
 8008bfc:	f04f 0800 	mov.w	r8, #0
 8008c00:	f104 091a 	add.w	r9, r4, #26
 8008c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c06:	3b01      	subs	r3, #1
 8008c08:	4543      	cmp	r3, r8
 8008c0a:	dc09      	bgt.n	8008c20 <_printf_float+0x254>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	079b      	lsls	r3, r3, #30
 8008c10:	f100 8103 	bmi.w	8008e1a <_printf_float+0x44e>
 8008c14:	68e0      	ldr	r0, [r4, #12]
 8008c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c18:	4298      	cmp	r0, r3
 8008c1a:	bfb8      	it	lt
 8008c1c:	4618      	movlt	r0, r3
 8008c1e:	e734      	b.n	8008a8a <_printf_float+0xbe>
 8008c20:	2301      	movs	r3, #1
 8008c22:	464a      	mov	r2, r9
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b8      	blx	r7
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f43f af2b 	beq.w	8008a86 <_printf_float+0xba>
 8008c30:	f108 0801 	add.w	r8, r8, #1
 8008c34:	e7e6      	b.n	8008c04 <_printf_float+0x238>
 8008c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc2b      	bgt.n	8008c94 <_printf_float+0x2c8>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4a26      	ldr	r2, [pc, #152]	; (8008cd8 <_printf_float+0x30c>)
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	f43f af1d 	beq.w	8008a86 <_printf_float+0xba>
 8008c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4e:	b923      	cbnz	r3, 8008c5a <_printf_float+0x28e>
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	b913      	cbnz	r3, 8008c5a <_printf_float+0x28e>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	07d9      	lsls	r1, r3, #31
 8008c58:	d5d8      	bpl.n	8008c0c <_printf_float+0x240>
 8008c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f af0e 	beq.w	8008a86 <_printf_float+0xba>
 8008c6a:	f04f 0900 	mov.w	r9, #0
 8008c6e:	f104 0a1a 	add.w	sl, r4, #26
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	425b      	negs	r3, r3
 8008c76:	454b      	cmp	r3, r9
 8008c78:	dc01      	bgt.n	8008c7e <_printf_float+0x2b2>
 8008c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7c:	e794      	b.n	8008ba8 <_printf_float+0x1dc>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4652      	mov	r2, sl
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f43f aefc 	beq.w	8008a86 <_printf_float+0xba>
 8008c8e:	f109 0901 	add.w	r9, r9, #1
 8008c92:	e7ee      	b.n	8008c72 <_printf_float+0x2a6>
 8008c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	bfa8      	it	ge
 8008c9c:	461a      	movge	r2, r3
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	4691      	mov	r9, r2
 8008ca2:	dd07      	ble.n	8008cb4 <_printf_float+0x2e8>
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4642      	mov	r2, r8
 8008caa:	4628      	mov	r0, r5
 8008cac:	47b8      	blx	r7
 8008cae:	3001      	adds	r0, #1
 8008cb0:	f43f aee9 	beq.w	8008a86 <_printf_float+0xba>
 8008cb4:	f104 031a 	add.w	r3, r4, #26
 8008cb8:	f04f 0b00 	mov.w	fp, #0
 8008cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc0:	9306      	str	r3, [sp, #24]
 8008cc2:	e015      	b.n	8008cf0 <_printf_float+0x324>
 8008cc4:	7fefffff 	.word	0x7fefffff
 8008cc8:	0800cb58 	.word	0x0800cb58
 8008ccc:	0800cb54 	.word	0x0800cb54
 8008cd0:	0800cb60 	.word	0x0800cb60
 8008cd4:	0800cb5c 	.word	0x0800cb5c
 8008cd8:	0800cb64 	.word	0x0800cb64
 8008cdc:	2301      	movs	r3, #1
 8008cde:	9a06      	ldr	r2, [sp, #24]
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	47b8      	blx	r7
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	f43f aecd 	beq.w	8008a86 <_printf_float+0xba>
 8008cec:	f10b 0b01 	add.w	fp, fp, #1
 8008cf0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008cf4:	ebaa 0309 	sub.w	r3, sl, r9
 8008cf8:	455b      	cmp	r3, fp
 8008cfa:	dcef      	bgt.n	8008cdc <_printf_float+0x310>
 8008cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d00:	429a      	cmp	r2, r3
 8008d02:	44d0      	add	r8, sl
 8008d04:	db15      	blt.n	8008d32 <_printf_float+0x366>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	07da      	lsls	r2, r3, #31
 8008d0a:	d412      	bmi.n	8008d32 <_printf_float+0x366>
 8008d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d10:	eba3 020a 	sub.w	r2, r3, sl
 8008d14:	eba3 0a01 	sub.w	sl, r3, r1
 8008d18:	4592      	cmp	sl, r2
 8008d1a:	bfa8      	it	ge
 8008d1c:	4692      	movge	sl, r2
 8008d1e:	f1ba 0f00 	cmp.w	sl, #0
 8008d22:	dc0e      	bgt.n	8008d42 <_printf_float+0x376>
 8008d24:	f04f 0800 	mov.w	r8, #0
 8008d28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d2c:	f104 091a 	add.w	r9, r4, #26
 8008d30:	e019      	b.n	8008d66 <_printf_float+0x39a>
 8008d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d1e5      	bne.n	8008d0c <_printf_float+0x340>
 8008d40:	e6a1      	b.n	8008a86 <_printf_float+0xba>
 8008d42:	4653      	mov	r3, sl
 8008d44:	4642      	mov	r2, r8
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d1e9      	bne.n	8008d24 <_printf_float+0x358>
 8008d50:	e699      	b.n	8008a86 <_printf_float+0xba>
 8008d52:	2301      	movs	r3, #1
 8008d54:	464a      	mov	r2, r9
 8008d56:	4631      	mov	r1, r6
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b8      	blx	r7
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	f43f ae92 	beq.w	8008a86 <_printf_float+0xba>
 8008d62:	f108 0801 	add.w	r8, r8, #1
 8008d66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d6a:	1a9b      	subs	r3, r3, r2
 8008d6c:	eba3 030a 	sub.w	r3, r3, sl
 8008d70:	4543      	cmp	r3, r8
 8008d72:	dcee      	bgt.n	8008d52 <_printf_float+0x386>
 8008d74:	e74a      	b.n	8008c0c <_printf_float+0x240>
 8008d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d78:	2a01      	cmp	r2, #1
 8008d7a:	dc01      	bgt.n	8008d80 <_printf_float+0x3b4>
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d53a      	bpl.n	8008df6 <_printf_float+0x42a>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4642      	mov	r2, r8
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f ae7b 	beq.w	8008a86 <_printf_float+0xba>
 8008d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f108 0801 	add.w	r8, r8, #1
 8008da0:	f43f ae71 	beq.w	8008a86 <_printf_float+0xba>
 8008da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da6:	2200      	movs	r2, #0
 8008da8:	f103 3aff 	add.w	sl, r3, #4294967295
 8008dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008db0:	2300      	movs	r3, #0
 8008db2:	f7f7 fea9 	bl	8000b08 <__aeabi_dcmpeq>
 8008db6:	b9c8      	cbnz	r0, 8008dec <_printf_float+0x420>
 8008db8:	4653      	mov	r3, sl
 8008dba:	4642      	mov	r2, r8
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d10e      	bne.n	8008de4 <_printf_float+0x418>
 8008dc6:	e65e      	b.n	8008a86 <_printf_float+0xba>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4652      	mov	r2, sl
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4628      	mov	r0, r5
 8008dd0:	47b8      	blx	r7
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	f43f ae57 	beq.w	8008a86 <_printf_float+0xba>
 8008dd8:	f108 0801 	add.w	r8, r8, #1
 8008ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dde:	3b01      	subs	r3, #1
 8008de0:	4543      	cmp	r3, r8
 8008de2:	dcf1      	bgt.n	8008dc8 <_printf_float+0x3fc>
 8008de4:	464b      	mov	r3, r9
 8008de6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dea:	e6de      	b.n	8008baa <_printf_float+0x1de>
 8008dec:	f04f 0800 	mov.w	r8, #0
 8008df0:	f104 0a1a 	add.w	sl, r4, #26
 8008df4:	e7f2      	b.n	8008ddc <_printf_float+0x410>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e7df      	b.n	8008dba <_printf_float+0x3ee>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	464a      	mov	r2, r9
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f ae3e 	beq.w	8008a86 <_printf_float+0xba>
 8008e0a:	f108 0801 	add.w	r8, r8, #1
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	4543      	cmp	r3, r8
 8008e16:	dcf0      	bgt.n	8008dfa <_printf_float+0x42e>
 8008e18:	e6fc      	b.n	8008c14 <_printf_float+0x248>
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	f104 0919 	add.w	r9, r4, #25
 8008e22:	e7f4      	b.n	8008e0e <_printf_float+0x442>
 8008e24:	2900      	cmp	r1, #0
 8008e26:	f43f ae8b 	beq.w	8008b40 <_printf_float+0x174>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008e30:	ab09      	add	r3, sp, #36	; 0x24
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	ec49 8b10 	vmov	d0, r8, r9
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	f8cd a004 	str.w	sl, [sp, #4]
 8008e3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e42:	4628      	mov	r0, r5
 8008e44:	f7ff fd2e 	bl	80088a4 <__cvt>
 8008e48:	4680      	mov	r8, r0
 8008e4a:	e648      	b.n	8008ade <_printf_float+0x112>

08008e4c <_printf_common>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	4691      	mov	r9, r2
 8008e52:	461f      	mov	r7, r3
 8008e54:	688a      	ldr	r2, [r1, #8]
 8008e56:	690b      	ldr	r3, [r1, #16]
 8008e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	bfb8      	it	lt
 8008e60:	4613      	movlt	r3, r2
 8008e62:	f8c9 3000 	str.w	r3, [r9]
 8008e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	b112      	cbz	r2, 8008e76 <_printf_common+0x2a>
 8008e70:	3301      	adds	r3, #1
 8008e72:	f8c9 3000 	str.w	r3, [r9]
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	0699      	lsls	r1, r3, #26
 8008e7a:	bf42      	ittt	mi
 8008e7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e80:	3302      	addmi	r3, #2
 8008e82:	f8c9 3000 	strmi.w	r3, [r9]
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	f015 0506 	ands.w	r5, r5, #6
 8008e8c:	d107      	bne.n	8008e9e <_printf_common+0x52>
 8008e8e:	f104 0a19 	add.w	sl, r4, #25
 8008e92:	68e3      	ldr	r3, [r4, #12]
 8008e94:	f8d9 2000 	ldr.w	r2, [r9]
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	42ab      	cmp	r3, r5
 8008e9c:	dc28      	bgt.n	8008ef0 <_printf_common+0xa4>
 8008e9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	3300      	adds	r3, #0
 8008ea6:	bf18      	it	ne
 8008ea8:	2301      	movne	r3, #1
 8008eaa:	0692      	lsls	r2, r2, #26
 8008eac:	d42d      	bmi.n	8008f0a <_printf_common+0xbe>
 8008eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	47c0      	blx	r8
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d020      	beq.n	8008efe <_printf_common+0xb2>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	68e5      	ldr	r5, [r4, #12]
 8008ec0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ec4:	f003 0306 	and.w	r3, r3, #6
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	bf08      	it	eq
 8008ecc:	1aad      	subeq	r5, r5, r2
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	6922      	ldr	r2, [r4, #16]
 8008ed2:	bf0c      	ite	eq
 8008ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ed8:	2500      	movne	r5, #0
 8008eda:	4293      	cmp	r3, r2
 8008edc:	bfc4      	itt	gt
 8008ede:	1a9b      	subgt	r3, r3, r2
 8008ee0:	18ed      	addgt	r5, r5, r3
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	341a      	adds	r4, #26
 8008ee8:	454d      	cmp	r5, r9
 8008eea:	d11a      	bne.n	8008f22 <_printf_common+0xd6>
 8008eec:	2000      	movs	r0, #0
 8008eee:	e008      	b.n	8008f02 <_printf_common+0xb6>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	47c0      	blx	r8
 8008efa:	3001      	adds	r0, #1
 8008efc:	d103      	bne.n	8008f06 <_printf_common+0xba>
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	3501      	adds	r5, #1
 8008f08:	e7c3      	b.n	8008e92 <_printf_common+0x46>
 8008f0a:	18e1      	adds	r1, r4, r3
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	2030      	movs	r0, #48	; 0x30
 8008f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f14:	4422      	add	r2, r4
 8008f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f1e:	3302      	adds	r3, #2
 8008f20:	e7c5      	b.n	8008eae <_printf_common+0x62>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4622      	mov	r2, r4
 8008f26:	4639      	mov	r1, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	47c0      	blx	r8
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d0e6      	beq.n	8008efe <_printf_common+0xb2>
 8008f30:	f109 0901 	add.w	r9, r9, #1
 8008f34:	e7d8      	b.n	8008ee8 <_printf_common+0x9c>
	...

08008f38 <_printf_i>:
 8008f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f40:	460c      	mov	r4, r1
 8008f42:	7e09      	ldrb	r1, [r1, #24]
 8008f44:	b085      	sub	sp, #20
 8008f46:	296e      	cmp	r1, #110	; 0x6e
 8008f48:	4617      	mov	r7, r2
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	4698      	mov	r8, r3
 8008f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f50:	f000 80b3 	beq.w	80090ba <_printf_i+0x182>
 8008f54:	d822      	bhi.n	8008f9c <_printf_i+0x64>
 8008f56:	2963      	cmp	r1, #99	; 0x63
 8008f58:	d036      	beq.n	8008fc8 <_printf_i+0x90>
 8008f5a:	d80a      	bhi.n	8008f72 <_printf_i+0x3a>
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	f000 80b9 	beq.w	80090d4 <_printf_i+0x19c>
 8008f62:	2958      	cmp	r1, #88	; 0x58
 8008f64:	f000 8083 	beq.w	800906e <_printf_i+0x136>
 8008f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f70:	e032      	b.n	8008fd8 <_printf_i+0xa0>
 8008f72:	2964      	cmp	r1, #100	; 0x64
 8008f74:	d001      	beq.n	8008f7a <_printf_i+0x42>
 8008f76:	2969      	cmp	r1, #105	; 0x69
 8008f78:	d1f6      	bne.n	8008f68 <_printf_i+0x30>
 8008f7a:	6820      	ldr	r0, [r4, #0]
 8008f7c:	6813      	ldr	r3, [r2, #0]
 8008f7e:	0605      	lsls	r5, r0, #24
 8008f80:	f103 0104 	add.w	r1, r3, #4
 8008f84:	d52a      	bpl.n	8008fdc <_printf_i+0xa4>
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6011      	str	r1, [r2, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da03      	bge.n	8008f96 <_printf_i+0x5e>
 8008f8e:	222d      	movs	r2, #45	; 0x2d
 8008f90:	425b      	negs	r3, r3
 8008f92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f96:	486f      	ldr	r0, [pc, #444]	; (8009154 <_printf_i+0x21c>)
 8008f98:	220a      	movs	r2, #10
 8008f9a:	e039      	b.n	8009010 <_printf_i+0xd8>
 8008f9c:	2973      	cmp	r1, #115	; 0x73
 8008f9e:	f000 809d 	beq.w	80090dc <_printf_i+0x1a4>
 8008fa2:	d808      	bhi.n	8008fb6 <_printf_i+0x7e>
 8008fa4:	296f      	cmp	r1, #111	; 0x6f
 8008fa6:	d020      	beq.n	8008fea <_printf_i+0xb2>
 8008fa8:	2970      	cmp	r1, #112	; 0x70
 8008faa:	d1dd      	bne.n	8008f68 <_printf_i+0x30>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	f043 0320 	orr.w	r3, r3, #32
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	e003      	b.n	8008fbe <_printf_i+0x86>
 8008fb6:	2975      	cmp	r1, #117	; 0x75
 8008fb8:	d017      	beq.n	8008fea <_printf_i+0xb2>
 8008fba:	2978      	cmp	r1, #120	; 0x78
 8008fbc:	d1d4      	bne.n	8008f68 <_printf_i+0x30>
 8008fbe:	2378      	movs	r3, #120	; 0x78
 8008fc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fc4:	4864      	ldr	r0, [pc, #400]	; (8009158 <_printf_i+0x220>)
 8008fc6:	e055      	b.n	8009074 <_printf_i+0x13c>
 8008fc8:	6813      	ldr	r3, [r2, #0]
 8008fca:	1d19      	adds	r1, r3, #4
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6011      	str	r1, [r2, #0]
 8008fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e08c      	b.n	80090f6 <_printf_i+0x1be>
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6011      	str	r1, [r2, #0]
 8008fe0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fe4:	bf18      	it	ne
 8008fe6:	b21b      	sxthne	r3, r3
 8008fe8:	e7cf      	b.n	8008f8a <_printf_i+0x52>
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1d18      	adds	r0, r3, #4
 8008ff0:	6010      	str	r0, [r2, #0]
 8008ff2:	0628      	lsls	r0, r5, #24
 8008ff4:	d501      	bpl.n	8008ffa <_printf_i+0xc2>
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	e002      	b.n	8009000 <_printf_i+0xc8>
 8008ffa:	0668      	lsls	r0, r5, #25
 8008ffc:	d5fb      	bpl.n	8008ff6 <_printf_i+0xbe>
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	4854      	ldr	r0, [pc, #336]	; (8009154 <_printf_i+0x21c>)
 8009002:	296f      	cmp	r1, #111	; 0x6f
 8009004:	bf14      	ite	ne
 8009006:	220a      	movne	r2, #10
 8009008:	2208      	moveq	r2, #8
 800900a:	2100      	movs	r1, #0
 800900c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009010:	6865      	ldr	r5, [r4, #4]
 8009012:	60a5      	str	r5, [r4, #8]
 8009014:	2d00      	cmp	r5, #0
 8009016:	f2c0 8095 	blt.w	8009144 <_printf_i+0x20c>
 800901a:	6821      	ldr	r1, [r4, #0]
 800901c:	f021 0104 	bic.w	r1, r1, #4
 8009020:	6021      	str	r1, [r4, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d13d      	bne.n	80090a2 <_printf_i+0x16a>
 8009026:	2d00      	cmp	r5, #0
 8009028:	f040 808e 	bne.w	8009148 <_printf_i+0x210>
 800902c:	4665      	mov	r5, ip
 800902e:	2a08      	cmp	r2, #8
 8009030:	d10b      	bne.n	800904a <_printf_i+0x112>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	07db      	lsls	r3, r3, #31
 8009036:	d508      	bpl.n	800904a <_printf_i+0x112>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	6862      	ldr	r2, [r4, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	bfde      	ittt	le
 8009040:	2330      	movle	r3, #48	; 0x30
 8009042:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009046:	f105 35ff 	addle.w	r5, r5, #4294967295
 800904a:	ebac 0305 	sub.w	r3, ip, r5
 800904e:	6123      	str	r3, [r4, #16]
 8009050:	f8cd 8000 	str.w	r8, [sp]
 8009054:	463b      	mov	r3, r7
 8009056:	aa03      	add	r2, sp, #12
 8009058:	4621      	mov	r1, r4
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff fef6 	bl	8008e4c <_printf_common>
 8009060:	3001      	adds	r0, #1
 8009062:	d14d      	bne.n	8009100 <_printf_i+0x1c8>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b005      	add	sp, #20
 800906a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800906e:	4839      	ldr	r0, [pc, #228]	; (8009154 <_printf_i+0x21c>)
 8009070:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009074:	6813      	ldr	r3, [r2, #0]
 8009076:	6821      	ldr	r1, [r4, #0]
 8009078:	1d1d      	adds	r5, r3, #4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6015      	str	r5, [r2, #0]
 800907e:	060a      	lsls	r2, r1, #24
 8009080:	d50b      	bpl.n	800909a <_printf_i+0x162>
 8009082:	07ca      	lsls	r2, r1, #31
 8009084:	bf44      	itt	mi
 8009086:	f041 0120 	orrmi.w	r1, r1, #32
 800908a:	6021      	strmi	r1, [r4, #0]
 800908c:	b91b      	cbnz	r3, 8009096 <_printf_i+0x15e>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	f022 0220 	bic.w	r2, r2, #32
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	2210      	movs	r2, #16
 8009098:	e7b7      	b.n	800900a <_printf_i+0xd2>
 800909a:	064d      	lsls	r5, r1, #25
 800909c:	bf48      	it	mi
 800909e:	b29b      	uxthmi	r3, r3
 80090a0:	e7ef      	b.n	8009082 <_printf_i+0x14a>
 80090a2:	4665      	mov	r5, ip
 80090a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80090a8:	fb02 3311 	mls	r3, r2, r1, r3
 80090ac:	5cc3      	ldrb	r3, [r0, r3]
 80090ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80090b2:	460b      	mov	r3, r1
 80090b4:	2900      	cmp	r1, #0
 80090b6:	d1f5      	bne.n	80090a4 <_printf_i+0x16c>
 80090b8:	e7b9      	b.n	800902e <_printf_i+0xf6>
 80090ba:	6813      	ldr	r3, [r2, #0]
 80090bc:	6825      	ldr	r5, [r4, #0]
 80090be:	6961      	ldr	r1, [r4, #20]
 80090c0:	1d18      	adds	r0, r3, #4
 80090c2:	6010      	str	r0, [r2, #0]
 80090c4:	0628      	lsls	r0, r5, #24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	d501      	bpl.n	80090ce <_printf_i+0x196>
 80090ca:	6019      	str	r1, [r3, #0]
 80090cc:	e002      	b.n	80090d4 <_printf_i+0x19c>
 80090ce:	066a      	lsls	r2, r5, #25
 80090d0:	d5fb      	bpl.n	80090ca <_printf_i+0x192>
 80090d2:	8019      	strh	r1, [r3, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	4665      	mov	r5, ip
 80090da:	e7b9      	b.n	8009050 <_printf_i+0x118>
 80090dc:	6813      	ldr	r3, [r2, #0]
 80090de:	1d19      	adds	r1, r3, #4
 80090e0:	6011      	str	r1, [r2, #0]
 80090e2:	681d      	ldr	r5, [r3, #0]
 80090e4:	6862      	ldr	r2, [r4, #4]
 80090e6:	2100      	movs	r1, #0
 80090e8:	4628      	mov	r0, r5
 80090ea:	f7f7 f899 	bl	8000220 <memchr>
 80090ee:	b108      	cbz	r0, 80090f4 <_printf_i+0x1bc>
 80090f0:	1b40      	subs	r0, r0, r5
 80090f2:	6060      	str	r0, [r4, #4]
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	2300      	movs	r3, #0
 80090fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fe:	e7a7      	b.n	8009050 <_printf_i+0x118>
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	462a      	mov	r2, r5
 8009104:	4639      	mov	r1, r7
 8009106:	4630      	mov	r0, r6
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d0aa      	beq.n	8009064 <_printf_i+0x12c>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	079b      	lsls	r3, r3, #30
 8009112:	d413      	bmi.n	800913c <_printf_i+0x204>
 8009114:	68e0      	ldr	r0, [r4, #12]
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	4298      	cmp	r0, r3
 800911a:	bfb8      	it	lt
 800911c:	4618      	movlt	r0, r3
 800911e:	e7a3      	b.n	8009068 <_printf_i+0x130>
 8009120:	2301      	movs	r3, #1
 8009122:	464a      	mov	r2, r9
 8009124:	4639      	mov	r1, r7
 8009126:	4630      	mov	r0, r6
 8009128:	47c0      	blx	r8
 800912a:	3001      	adds	r0, #1
 800912c:	d09a      	beq.n	8009064 <_printf_i+0x12c>
 800912e:	3501      	adds	r5, #1
 8009130:	68e3      	ldr	r3, [r4, #12]
 8009132:	9a03      	ldr	r2, [sp, #12]
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	42ab      	cmp	r3, r5
 8009138:	dcf2      	bgt.n	8009120 <_printf_i+0x1e8>
 800913a:	e7eb      	b.n	8009114 <_printf_i+0x1dc>
 800913c:	2500      	movs	r5, #0
 800913e:	f104 0919 	add.w	r9, r4, #25
 8009142:	e7f5      	b.n	8009130 <_printf_i+0x1f8>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1ac      	bne.n	80090a2 <_printf_i+0x16a>
 8009148:	7803      	ldrb	r3, [r0, #0]
 800914a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800914e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009152:	e76c      	b.n	800902e <_printf_i+0xf6>
 8009154:	0800cb66 	.word	0x0800cb66
 8009158:	0800cb77 	.word	0x0800cb77

0800915c <_scanf_float>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	469a      	mov	sl, r3
 8009162:	688b      	ldr	r3, [r1, #8]
 8009164:	4616      	mov	r6, r2
 8009166:	1e5a      	subs	r2, r3, #1
 8009168:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800916c:	b087      	sub	sp, #28
 800916e:	bf83      	ittte	hi
 8009170:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009174:	189b      	addhi	r3, r3, r2
 8009176:	9301      	strhi	r3, [sp, #4]
 8009178:	2300      	movls	r3, #0
 800917a:	bf86      	itte	hi
 800917c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009180:	608b      	strhi	r3, [r1, #8]
 8009182:	9301      	strls	r3, [sp, #4]
 8009184:	680b      	ldr	r3, [r1, #0]
 8009186:	4688      	mov	r8, r1
 8009188:	f04f 0b00 	mov.w	fp, #0
 800918c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009190:	f848 3b1c 	str.w	r3, [r8], #28
 8009194:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009198:	4607      	mov	r7, r0
 800919a:	460c      	mov	r4, r1
 800919c:	4645      	mov	r5, r8
 800919e:	465a      	mov	r2, fp
 80091a0:	46d9      	mov	r9, fp
 80091a2:	f8cd b008 	str.w	fp, [sp, #8]
 80091a6:	68a1      	ldr	r1, [r4, #8]
 80091a8:	b181      	cbz	r1, 80091cc <_scanf_float+0x70>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b49      	cmp	r3, #73	; 0x49
 80091b0:	d071      	beq.n	8009296 <_scanf_float+0x13a>
 80091b2:	d84d      	bhi.n	8009250 <_scanf_float+0xf4>
 80091b4:	2b39      	cmp	r3, #57	; 0x39
 80091b6:	d840      	bhi.n	800923a <_scanf_float+0xde>
 80091b8:	2b31      	cmp	r3, #49	; 0x31
 80091ba:	f080 8088 	bcs.w	80092ce <_scanf_float+0x172>
 80091be:	2b2d      	cmp	r3, #45	; 0x2d
 80091c0:	f000 8090 	beq.w	80092e4 <_scanf_float+0x188>
 80091c4:	d815      	bhi.n	80091f2 <_scanf_float+0x96>
 80091c6:	2b2b      	cmp	r3, #43	; 0x2b
 80091c8:	f000 808c 	beq.w	80092e4 <_scanf_float+0x188>
 80091cc:	f1b9 0f00 	cmp.w	r9, #0
 80091d0:	d003      	beq.n	80091da <_scanf_float+0x7e>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	3a01      	subs	r2, #1
 80091dc:	2a01      	cmp	r2, #1
 80091de:	f200 80ea 	bhi.w	80093b6 <_scanf_float+0x25a>
 80091e2:	4545      	cmp	r5, r8
 80091e4:	f200 80dc 	bhi.w	80093a0 <_scanf_float+0x244>
 80091e8:	2601      	movs	r6, #1
 80091ea:	4630      	mov	r0, r6
 80091ec:	b007      	add	sp, #28
 80091ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f2:	2b2e      	cmp	r3, #46	; 0x2e
 80091f4:	f000 809f 	beq.w	8009336 <_scanf_float+0x1da>
 80091f8:	2b30      	cmp	r3, #48	; 0x30
 80091fa:	d1e7      	bne.n	80091cc <_scanf_float+0x70>
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009202:	d064      	beq.n	80092ce <_scanf_float+0x172>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800920a:	6020      	str	r0, [r4, #0]
 800920c:	f109 0901 	add.w	r9, r9, #1
 8009210:	b11b      	cbz	r3, 800921a <_scanf_float+0xbe>
 8009212:	3b01      	subs	r3, #1
 8009214:	3101      	adds	r1, #1
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	60a1      	str	r1, [r4, #8]
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	3b01      	subs	r3, #1
 800921e:	60a3      	str	r3, [r4, #8]
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	3301      	adds	r3, #1
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	6873      	ldr	r3, [r6, #4]
 8009228:	3b01      	subs	r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	6073      	str	r3, [r6, #4]
 800922e:	f340 80ac 	ble.w	800938a <_scanf_float+0x22e>
 8009232:	6833      	ldr	r3, [r6, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	6033      	str	r3, [r6, #0]
 8009238:	e7b5      	b.n	80091a6 <_scanf_float+0x4a>
 800923a:	2b45      	cmp	r3, #69	; 0x45
 800923c:	f000 8085 	beq.w	800934a <_scanf_float+0x1ee>
 8009240:	2b46      	cmp	r3, #70	; 0x46
 8009242:	d06a      	beq.n	800931a <_scanf_float+0x1be>
 8009244:	2b41      	cmp	r3, #65	; 0x41
 8009246:	d1c1      	bne.n	80091cc <_scanf_float+0x70>
 8009248:	2a01      	cmp	r2, #1
 800924a:	d1bf      	bne.n	80091cc <_scanf_float+0x70>
 800924c:	2202      	movs	r2, #2
 800924e:	e046      	b.n	80092de <_scanf_float+0x182>
 8009250:	2b65      	cmp	r3, #101	; 0x65
 8009252:	d07a      	beq.n	800934a <_scanf_float+0x1ee>
 8009254:	d818      	bhi.n	8009288 <_scanf_float+0x12c>
 8009256:	2b54      	cmp	r3, #84	; 0x54
 8009258:	d066      	beq.n	8009328 <_scanf_float+0x1cc>
 800925a:	d811      	bhi.n	8009280 <_scanf_float+0x124>
 800925c:	2b4e      	cmp	r3, #78	; 0x4e
 800925e:	d1b5      	bne.n	80091cc <_scanf_float+0x70>
 8009260:	2a00      	cmp	r2, #0
 8009262:	d146      	bne.n	80092f2 <_scanf_float+0x196>
 8009264:	f1b9 0f00 	cmp.w	r9, #0
 8009268:	d145      	bne.n	80092f6 <_scanf_float+0x19a>
 800926a:	6821      	ldr	r1, [r4, #0]
 800926c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009270:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009274:	d13f      	bne.n	80092f6 <_scanf_float+0x19a>
 8009276:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800927a:	6021      	str	r1, [r4, #0]
 800927c:	2201      	movs	r2, #1
 800927e:	e02e      	b.n	80092de <_scanf_float+0x182>
 8009280:	2b59      	cmp	r3, #89	; 0x59
 8009282:	d01e      	beq.n	80092c2 <_scanf_float+0x166>
 8009284:	2b61      	cmp	r3, #97	; 0x61
 8009286:	e7de      	b.n	8009246 <_scanf_float+0xea>
 8009288:	2b6e      	cmp	r3, #110	; 0x6e
 800928a:	d0e9      	beq.n	8009260 <_scanf_float+0x104>
 800928c:	d815      	bhi.n	80092ba <_scanf_float+0x15e>
 800928e:	2b66      	cmp	r3, #102	; 0x66
 8009290:	d043      	beq.n	800931a <_scanf_float+0x1be>
 8009292:	2b69      	cmp	r3, #105	; 0x69
 8009294:	d19a      	bne.n	80091cc <_scanf_float+0x70>
 8009296:	f1bb 0f00 	cmp.w	fp, #0
 800929a:	d138      	bne.n	800930e <_scanf_float+0x1b2>
 800929c:	f1b9 0f00 	cmp.w	r9, #0
 80092a0:	d197      	bne.n	80091d2 <_scanf_float+0x76>
 80092a2:	6821      	ldr	r1, [r4, #0]
 80092a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80092a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80092ac:	d195      	bne.n	80091da <_scanf_float+0x7e>
 80092ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80092b2:	6021      	str	r1, [r4, #0]
 80092b4:	f04f 0b01 	mov.w	fp, #1
 80092b8:	e011      	b.n	80092de <_scanf_float+0x182>
 80092ba:	2b74      	cmp	r3, #116	; 0x74
 80092bc:	d034      	beq.n	8009328 <_scanf_float+0x1cc>
 80092be:	2b79      	cmp	r3, #121	; 0x79
 80092c0:	d184      	bne.n	80091cc <_scanf_float+0x70>
 80092c2:	f1bb 0f07 	cmp.w	fp, #7
 80092c6:	d181      	bne.n	80091cc <_scanf_float+0x70>
 80092c8:	f04f 0b08 	mov.w	fp, #8
 80092cc:	e007      	b.n	80092de <_scanf_float+0x182>
 80092ce:	eb12 0f0b 	cmn.w	r2, fp
 80092d2:	f47f af7b 	bne.w	80091cc <_scanf_float+0x70>
 80092d6:	6821      	ldr	r1, [r4, #0]
 80092d8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80092dc:	6021      	str	r1, [r4, #0]
 80092de:	702b      	strb	r3, [r5, #0]
 80092e0:	3501      	adds	r5, #1
 80092e2:	e79a      	b.n	800921a <_scanf_float+0xbe>
 80092e4:	6821      	ldr	r1, [r4, #0]
 80092e6:	0608      	lsls	r0, r1, #24
 80092e8:	f57f af70 	bpl.w	80091cc <_scanf_float+0x70>
 80092ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80092f0:	e7f4      	b.n	80092dc <_scanf_float+0x180>
 80092f2:	2a02      	cmp	r2, #2
 80092f4:	d047      	beq.n	8009386 <_scanf_float+0x22a>
 80092f6:	f1bb 0f01 	cmp.w	fp, #1
 80092fa:	d003      	beq.n	8009304 <_scanf_float+0x1a8>
 80092fc:	f1bb 0f04 	cmp.w	fp, #4
 8009300:	f47f af64 	bne.w	80091cc <_scanf_float+0x70>
 8009304:	f10b 0b01 	add.w	fp, fp, #1
 8009308:	fa5f fb8b 	uxtb.w	fp, fp
 800930c:	e7e7      	b.n	80092de <_scanf_float+0x182>
 800930e:	f1bb 0f03 	cmp.w	fp, #3
 8009312:	d0f7      	beq.n	8009304 <_scanf_float+0x1a8>
 8009314:	f1bb 0f05 	cmp.w	fp, #5
 8009318:	e7f2      	b.n	8009300 <_scanf_float+0x1a4>
 800931a:	f1bb 0f02 	cmp.w	fp, #2
 800931e:	f47f af55 	bne.w	80091cc <_scanf_float+0x70>
 8009322:	f04f 0b03 	mov.w	fp, #3
 8009326:	e7da      	b.n	80092de <_scanf_float+0x182>
 8009328:	f1bb 0f06 	cmp.w	fp, #6
 800932c:	f47f af4e 	bne.w	80091cc <_scanf_float+0x70>
 8009330:	f04f 0b07 	mov.w	fp, #7
 8009334:	e7d3      	b.n	80092de <_scanf_float+0x182>
 8009336:	6821      	ldr	r1, [r4, #0]
 8009338:	0588      	lsls	r0, r1, #22
 800933a:	f57f af47 	bpl.w	80091cc <_scanf_float+0x70>
 800933e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009342:	6021      	str	r1, [r4, #0]
 8009344:	f8cd 9008 	str.w	r9, [sp, #8]
 8009348:	e7c9      	b.n	80092de <_scanf_float+0x182>
 800934a:	6821      	ldr	r1, [r4, #0]
 800934c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009350:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009354:	d006      	beq.n	8009364 <_scanf_float+0x208>
 8009356:	0548      	lsls	r0, r1, #21
 8009358:	f57f af38 	bpl.w	80091cc <_scanf_float+0x70>
 800935c:	f1b9 0f00 	cmp.w	r9, #0
 8009360:	f43f af3b 	beq.w	80091da <_scanf_float+0x7e>
 8009364:	0588      	lsls	r0, r1, #22
 8009366:	bf58      	it	pl
 8009368:	9802      	ldrpl	r0, [sp, #8]
 800936a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800936e:	bf58      	it	pl
 8009370:	eba9 0000 	subpl.w	r0, r9, r0
 8009374:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009378:	bf58      	it	pl
 800937a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800937e:	6021      	str	r1, [r4, #0]
 8009380:	f04f 0900 	mov.w	r9, #0
 8009384:	e7ab      	b.n	80092de <_scanf_float+0x182>
 8009386:	2203      	movs	r2, #3
 8009388:	e7a9      	b.n	80092de <_scanf_float+0x182>
 800938a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800938e:	9205      	str	r2, [sp, #20]
 8009390:	4631      	mov	r1, r6
 8009392:	4638      	mov	r0, r7
 8009394:	4798      	blx	r3
 8009396:	9a05      	ldr	r2, [sp, #20]
 8009398:	2800      	cmp	r0, #0
 800939a:	f43f af04 	beq.w	80091a6 <_scanf_float+0x4a>
 800939e:	e715      	b.n	80091cc <_scanf_float+0x70>
 80093a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80093a8:	4632      	mov	r2, r6
 80093aa:	4638      	mov	r0, r7
 80093ac:	4798      	blx	r3
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	e715      	b.n	80091e2 <_scanf_float+0x86>
 80093b6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80093ba:	2b06      	cmp	r3, #6
 80093bc:	d80a      	bhi.n	80093d4 <_scanf_float+0x278>
 80093be:	f1bb 0f02 	cmp.w	fp, #2
 80093c2:	d968      	bls.n	8009496 <_scanf_float+0x33a>
 80093c4:	f1ab 0b03 	sub.w	fp, fp, #3
 80093c8:	fa5f fb8b 	uxtb.w	fp, fp
 80093cc:	eba5 0b0b 	sub.w	fp, r5, fp
 80093d0:	455d      	cmp	r5, fp
 80093d2:	d14b      	bne.n	800946c <_scanf_float+0x310>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	05da      	lsls	r2, r3, #23
 80093d8:	d51f      	bpl.n	800941a <_scanf_float+0x2be>
 80093da:	055b      	lsls	r3, r3, #21
 80093dc:	d468      	bmi.n	80094b0 <_scanf_float+0x354>
 80093de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	2965      	cmp	r1, #101	; 0x65
 80093e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80093ea:	f105 3bff 	add.w	fp, r5, #4294967295
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	d00d      	beq.n	800940e <_scanf_float+0x2b2>
 80093f2:	2945      	cmp	r1, #69	; 0x45
 80093f4:	d00b      	beq.n	800940e <_scanf_float+0x2b2>
 80093f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093fa:	4632      	mov	r2, r6
 80093fc:	4638      	mov	r0, r7
 80093fe:	4798      	blx	r3
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009406:	3b01      	subs	r3, #1
 8009408:	f1a5 0b02 	sub.w	fp, r5, #2
 800940c:	6123      	str	r3, [r4, #16]
 800940e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009412:	4632      	mov	r2, r6
 8009414:	4638      	mov	r0, r7
 8009416:	4798      	blx	r3
 8009418:	465d      	mov	r5, fp
 800941a:	6826      	ldr	r6, [r4, #0]
 800941c:	f016 0610 	ands.w	r6, r6, #16
 8009420:	d17a      	bne.n	8009518 <_scanf_float+0x3bc>
 8009422:	702e      	strb	r6, [r5, #0]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800942a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942e:	d142      	bne.n	80094b6 <_scanf_float+0x35a>
 8009430:	9b02      	ldr	r3, [sp, #8]
 8009432:	eba9 0303 	sub.w	r3, r9, r3
 8009436:	425a      	negs	r2, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d149      	bne.n	80094d0 <_scanf_float+0x374>
 800943c:	2200      	movs	r2, #0
 800943e:	4641      	mov	r1, r8
 8009440:	4638      	mov	r0, r7
 8009442:	f000 fea5 	bl	800a190 <_strtod_r>
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	f8da 3000 	ldr.w	r3, [sl]
 800944c:	f015 0f02 	tst.w	r5, #2
 8009450:	f103 0204 	add.w	r2, r3, #4
 8009454:	ec59 8b10 	vmov	r8, r9, d0
 8009458:	f8ca 2000 	str.w	r2, [sl]
 800945c:	d043      	beq.n	80094e6 <_scanf_float+0x38a>
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	e9c3 8900 	strd	r8, r9, [r3]
 8009464:	68e3      	ldr	r3, [r4, #12]
 8009466:	3301      	adds	r3, #1
 8009468:	60e3      	str	r3, [r4, #12]
 800946a:	e6be      	b.n	80091ea <_scanf_float+0x8e>
 800946c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009470:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009474:	4632      	mov	r2, r6
 8009476:	4638      	mov	r0, r7
 8009478:	4798      	blx	r3
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	3b01      	subs	r3, #1
 800947e:	6123      	str	r3, [r4, #16]
 8009480:	e7a6      	b.n	80093d0 <_scanf_float+0x274>
 8009482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009486:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800948a:	4632      	mov	r2, r6
 800948c:	4638      	mov	r0, r7
 800948e:	4798      	blx	r3
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	3b01      	subs	r3, #1
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	4545      	cmp	r5, r8
 8009498:	d8f3      	bhi.n	8009482 <_scanf_float+0x326>
 800949a:	e6a5      	b.n	80091e8 <_scanf_float+0x8c>
 800949c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80094a4:	4632      	mov	r2, r6
 80094a6:	4638      	mov	r0, r7
 80094a8:	4798      	blx	r3
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	4545      	cmp	r5, r8
 80094b2:	d8f3      	bhi.n	800949c <_scanf_float+0x340>
 80094b4:	e698      	b.n	80091e8 <_scanf_float+0x8c>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0bf      	beq.n	800943c <_scanf_float+0x2e0>
 80094bc:	9904      	ldr	r1, [sp, #16]
 80094be:	230a      	movs	r3, #10
 80094c0:	4632      	mov	r2, r6
 80094c2:	3101      	adds	r1, #1
 80094c4:	4638      	mov	r0, r7
 80094c6:	f000 feef 	bl	800a2a8 <_strtol_r>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	9d04      	ldr	r5, [sp, #16]
 80094ce:	1ac2      	subs	r2, r0, r3
 80094d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80094d4:	429d      	cmp	r5, r3
 80094d6:	bf28      	it	cs
 80094d8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80094dc:	490f      	ldr	r1, [pc, #60]	; (800951c <_scanf_float+0x3c0>)
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f824 	bl	800952c <siprintf>
 80094e4:	e7aa      	b.n	800943c <_scanf_float+0x2e0>
 80094e6:	f015 0504 	ands.w	r5, r5, #4
 80094ea:	d1b8      	bne.n	800945e <_scanf_float+0x302>
 80094ec:	681f      	ldr	r7, [r3, #0]
 80094ee:	ee10 2a10 	vmov	r2, s0
 80094f2:	464b      	mov	r3, r9
 80094f4:	ee10 0a10 	vmov	r0, s0
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f7 fb37 	bl	8000b6c <__aeabi_dcmpun>
 80094fe:	b128      	cbz	r0, 800950c <_scanf_float+0x3b0>
 8009500:	4628      	mov	r0, r5
 8009502:	f000 f80d 	bl	8009520 <nanf>
 8009506:	ed87 0a00 	vstr	s0, [r7]
 800950a:	e7ab      	b.n	8009464 <_scanf_float+0x308>
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f7 fb8a 	bl	8000c28 <__aeabi_d2f>
 8009514:	6038      	str	r0, [r7, #0]
 8009516:	e7a5      	b.n	8009464 <_scanf_float+0x308>
 8009518:	2600      	movs	r6, #0
 800951a:	e666      	b.n	80091ea <_scanf_float+0x8e>
 800951c:	0800cb88 	.word	0x0800cb88

08009520 <nanf>:
 8009520:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009528 <nanf+0x8>
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	7fc00000 	.word	0x7fc00000

0800952c <siprintf>:
 800952c:	b40e      	push	{r1, r2, r3}
 800952e:	b500      	push	{lr}
 8009530:	b09c      	sub	sp, #112	; 0x70
 8009532:	ab1d      	add	r3, sp, #116	; 0x74
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	9006      	str	r0, [sp, #24]
 8009538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800953c:	4809      	ldr	r0, [pc, #36]	; (8009564 <siprintf+0x38>)
 800953e:	9107      	str	r1, [sp, #28]
 8009540:	9104      	str	r1, [sp, #16]
 8009542:	4909      	ldr	r1, [pc, #36]	; (8009568 <siprintf+0x3c>)
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	a902      	add	r1, sp, #8
 8009550:	f002 fd70 	bl	800c034 <_svfiprintf_r>
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	b01c      	add	sp, #112	; 0x70
 800955c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009560:	b003      	add	sp, #12
 8009562:	4770      	bx	lr
 8009564:	20000010 	.word	0x20000010
 8009568:	ffff0208 	.word	0xffff0208

0800956c <sulp>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4604      	mov	r4, r0
 8009570:	460d      	mov	r5, r1
 8009572:	ec45 4b10 	vmov	d0, r4, r5
 8009576:	4616      	mov	r6, r2
 8009578:	f002 fb18 	bl	800bbac <__ulp>
 800957c:	ec51 0b10 	vmov	r0, r1, d0
 8009580:	b17e      	cbz	r6, 80095a2 <sulp+0x36>
 8009582:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009586:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800958a:	2b00      	cmp	r3, #0
 800958c:	dd09      	ble.n	80095a2 <sulp+0x36>
 800958e:	051b      	lsls	r3, r3, #20
 8009590:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009594:	2400      	movs	r4, #0
 8009596:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800959a:	4622      	mov	r2, r4
 800959c:	462b      	mov	r3, r5
 800959e:	f7f7 f84b 	bl	8000638 <__aeabi_dmul>
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	0000      	movs	r0, r0
	...

080095a8 <_strtod_l>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	461f      	mov	r7, r3
 80095ae:	b0a1      	sub	sp, #132	; 0x84
 80095b0:	2300      	movs	r3, #0
 80095b2:	4681      	mov	r9, r0
 80095b4:	4638      	mov	r0, r7
 80095b6:	460e      	mov	r6, r1
 80095b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80095ba:	931c      	str	r3, [sp, #112]	; 0x70
 80095bc:	f001 fff5 	bl	800b5aa <__localeconv_l>
 80095c0:	4680      	mov	r8, r0
 80095c2:	6800      	ldr	r0, [r0, #0]
 80095c4:	f7f6 fe24 	bl	8000210 <strlen>
 80095c8:	f04f 0a00 	mov.w	sl, #0
 80095cc:	4604      	mov	r4, r0
 80095ce:	f04f 0b00 	mov.w	fp, #0
 80095d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80095d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	2a0d      	cmp	r2, #13
 80095da:	d832      	bhi.n	8009642 <_strtod_l+0x9a>
 80095dc:	2a09      	cmp	r2, #9
 80095de:	d236      	bcs.n	800964e <_strtod_l+0xa6>
 80095e0:	2a00      	cmp	r2, #0
 80095e2:	d03e      	beq.n	8009662 <_strtod_l+0xba>
 80095e4:	2300      	movs	r3, #0
 80095e6:	930d      	str	r3, [sp, #52]	; 0x34
 80095e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80095ea:	782b      	ldrb	r3, [r5, #0]
 80095ec:	2b30      	cmp	r3, #48	; 0x30
 80095ee:	f040 80ac 	bne.w	800974a <_strtod_l+0x1a2>
 80095f2:	786b      	ldrb	r3, [r5, #1]
 80095f4:	2b58      	cmp	r3, #88	; 0x58
 80095f6:	d001      	beq.n	80095fc <_strtod_l+0x54>
 80095f8:	2b78      	cmp	r3, #120	; 0x78
 80095fa:	d167      	bne.n	80096cc <_strtod_l+0x124>
 80095fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	ab1c      	add	r3, sp, #112	; 0x70
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	9702      	str	r7, [sp, #8]
 8009606:	ab1d      	add	r3, sp, #116	; 0x74
 8009608:	4a88      	ldr	r2, [pc, #544]	; (800982c <_strtod_l+0x284>)
 800960a:	a91b      	add	r1, sp, #108	; 0x6c
 800960c:	4648      	mov	r0, r9
 800960e:	f001 fcf2 	bl	800aff6 <__gethex>
 8009612:	f010 0407 	ands.w	r4, r0, #7
 8009616:	4606      	mov	r6, r0
 8009618:	d005      	beq.n	8009626 <_strtod_l+0x7e>
 800961a:	2c06      	cmp	r4, #6
 800961c:	d12b      	bne.n	8009676 <_strtod_l+0xce>
 800961e:	3501      	adds	r5, #1
 8009620:	2300      	movs	r3, #0
 8009622:	951b      	str	r5, [sp, #108]	; 0x6c
 8009624:	930d      	str	r3, [sp, #52]	; 0x34
 8009626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 859a 	bne.w	800a162 <_strtod_l+0xbba>
 800962e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009630:	b1e3      	cbz	r3, 800966c <_strtod_l+0xc4>
 8009632:	4652      	mov	r2, sl
 8009634:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009638:	ec43 2b10 	vmov	d0, r2, r3
 800963c:	b021      	add	sp, #132	; 0x84
 800963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009642:	2a2b      	cmp	r2, #43	; 0x2b
 8009644:	d015      	beq.n	8009672 <_strtod_l+0xca>
 8009646:	2a2d      	cmp	r2, #45	; 0x2d
 8009648:	d004      	beq.n	8009654 <_strtod_l+0xac>
 800964a:	2a20      	cmp	r2, #32
 800964c:	d1ca      	bne.n	80095e4 <_strtod_l+0x3c>
 800964e:	3301      	adds	r3, #1
 8009650:	931b      	str	r3, [sp, #108]	; 0x6c
 8009652:	e7bf      	b.n	80095d4 <_strtod_l+0x2c>
 8009654:	2201      	movs	r2, #1
 8009656:	920d      	str	r2, [sp, #52]	; 0x34
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	921b      	str	r2, [sp, #108]	; 0x6c
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1c2      	bne.n	80095e8 <_strtod_l+0x40>
 8009662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009664:	961b      	str	r6, [sp, #108]	; 0x6c
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 8579 	bne.w	800a15e <_strtod_l+0xbb6>
 800966c:	4652      	mov	r2, sl
 800966e:	465b      	mov	r3, fp
 8009670:	e7e2      	b.n	8009638 <_strtod_l+0x90>
 8009672:	2200      	movs	r2, #0
 8009674:	e7ef      	b.n	8009656 <_strtod_l+0xae>
 8009676:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009678:	b13a      	cbz	r2, 800968a <_strtod_l+0xe2>
 800967a:	2135      	movs	r1, #53	; 0x35
 800967c:	a81e      	add	r0, sp, #120	; 0x78
 800967e:	f002 fb8d 	bl	800bd9c <__copybits>
 8009682:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009684:	4648      	mov	r0, r9
 8009686:	f001 fffa 	bl	800b67e <_Bfree>
 800968a:	3c01      	subs	r4, #1
 800968c:	2c04      	cmp	r4, #4
 800968e:	d806      	bhi.n	800969e <_strtod_l+0xf6>
 8009690:	e8df f004 	tbb	[pc, r4]
 8009694:	1714030a 	.word	0x1714030a
 8009698:	0a          	.byte	0x0a
 8009699:	00          	.byte	0x00
 800969a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800969e:	0730      	lsls	r0, r6, #28
 80096a0:	d5c1      	bpl.n	8009626 <_strtod_l+0x7e>
 80096a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80096a6:	e7be      	b.n	8009626 <_strtod_l+0x7e>
 80096a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80096ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80096ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096ba:	e7f0      	b.n	800969e <_strtod_l+0xf6>
 80096bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009830 <_strtod_l+0x288>
 80096c0:	e7ed      	b.n	800969e <_strtod_l+0xf6>
 80096c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80096c6:	f04f 3aff 	mov.w	sl, #4294967295
 80096ca:	e7e8      	b.n	800969e <_strtod_l+0xf6>
 80096cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b30      	cmp	r3, #48	; 0x30
 80096d6:	d0f9      	beq.n	80096cc <_strtod_l+0x124>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0a4      	beq.n	8009626 <_strtod_l+0x7e>
 80096dc:	2301      	movs	r3, #1
 80096de:	2500      	movs	r5, #0
 80096e0:	9306      	str	r3, [sp, #24]
 80096e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096e4:	9308      	str	r3, [sp, #32]
 80096e6:	9507      	str	r5, [sp, #28]
 80096e8:	9505      	str	r5, [sp, #20]
 80096ea:	220a      	movs	r2, #10
 80096ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80096ee:	7807      	ldrb	r7, [r0, #0]
 80096f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80096f4:	b2d9      	uxtb	r1, r3
 80096f6:	2909      	cmp	r1, #9
 80096f8:	d929      	bls.n	800974e <_strtod_l+0x1a6>
 80096fa:	4622      	mov	r2, r4
 80096fc:	f8d8 1000 	ldr.w	r1, [r8]
 8009700:	f002 fda0 	bl	800c244 <strncmp>
 8009704:	2800      	cmp	r0, #0
 8009706:	d031      	beq.n	800976c <_strtod_l+0x1c4>
 8009708:	2000      	movs	r0, #0
 800970a:	9c05      	ldr	r4, [sp, #20]
 800970c:	9004      	str	r0, [sp, #16]
 800970e:	463b      	mov	r3, r7
 8009710:	4602      	mov	r2, r0
 8009712:	2b65      	cmp	r3, #101	; 0x65
 8009714:	d001      	beq.n	800971a <_strtod_l+0x172>
 8009716:	2b45      	cmp	r3, #69	; 0x45
 8009718:	d114      	bne.n	8009744 <_strtod_l+0x19c>
 800971a:	b924      	cbnz	r4, 8009726 <_strtod_l+0x17e>
 800971c:	b910      	cbnz	r0, 8009724 <_strtod_l+0x17c>
 800971e:	9b06      	ldr	r3, [sp, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d09e      	beq.n	8009662 <_strtod_l+0xba>
 8009724:	2400      	movs	r4, #0
 8009726:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009728:	1c73      	adds	r3, r6, #1
 800972a:	931b      	str	r3, [sp, #108]	; 0x6c
 800972c:	7873      	ldrb	r3, [r6, #1]
 800972e:	2b2b      	cmp	r3, #43	; 0x2b
 8009730:	d078      	beq.n	8009824 <_strtod_l+0x27c>
 8009732:	2b2d      	cmp	r3, #45	; 0x2d
 8009734:	d070      	beq.n	8009818 <_strtod_l+0x270>
 8009736:	f04f 0c00 	mov.w	ip, #0
 800973a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800973e:	2f09      	cmp	r7, #9
 8009740:	d97c      	bls.n	800983c <_strtod_l+0x294>
 8009742:	961b      	str	r6, [sp, #108]	; 0x6c
 8009744:	f04f 0e00 	mov.w	lr, #0
 8009748:	e09a      	b.n	8009880 <_strtod_l+0x2d8>
 800974a:	2300      	movs	r3, #0
 800974c:	e7c7      	b.n	80096de <_strtod_l+0x136>
 800974e:	9905      	ldr	r1, [sp, #20]
 8009750:	2908      	cmp	r1, #8
 8009752:	bfdd      	ittte	le
 8009754:	9907      	ldrle	r1, [sp, #28]
 8009756:	fb02 3301 	mlale	r3, r2, r1, r3
 800975a:	9307      	strle	r3, [sp, #28]
 800975c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	3001      	adds	r0, #1
 8009764:	3301      	adds	r3, #1
 8009766:	9305      	str	r3, [sp, #20]
 8009768:	901b      	str	r0, [sp, #108]	; 0x6c
 800976a:	e7bf      	b.n	80096ec <_strtod_l+0x144>
 800976c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800976e:	191a      	adds	r2, r3, r4
 8009770:	921b      	str	r2, [sp, #108]	; 0x6c
 8009772:	9a05      	ldr	r2, [sp, #20]
 8009774:	5d1b      	ldrb	r3, [r3, r4]
 8009776:	2a00      	cmp	r2, #0
 8009778:	d037      	beq.n	80097ea <_strtod_l+0x242>
 800977a:	9c05      	ldr	r4, [sp, #20]
 800977c:	4602      	mov	r2, r0
 800977e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009782:	2909      	cmp	r1, #9
 8009784:	d913      	bls.n	80097ae <_strtod_l+0x206>
 8009786:	2101      	movs	r1, #1
 8009788:	9104      	str	r1, [sp, #16]
 800978a:	e7c2      	b.n	8009712 <_strtod_l+0x16a>
 800978c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	921b      	str	r2, [sp, #108]	; 0x6c
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	3001      	adds	r0, #1
 8009796:	2b30      	cmp	r3, #48	; 0x30
 8009798:	d0f8      	beq.n	800978c <_strtod_l+0x1e4>
 800979a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800979e:	2a08      	cmp	r2, #8
 80097a0:	f200 84e4 	bhi.w	800a16c <_strtod_l+0xbc4>
 80097a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097a6:	9208      	str	r2, [sp, #32]
 80097a8:	4602      	mov	r2, r0
 80097aa:	2000      	movs	r0, #0
 80097ac:	4604      	mov	r4, r0
 80097ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80097b2:	f100 0101 	add.w	r1, r0, #1
 80097b6:	d012      	beq.n	80097de <_strtod_l+0x236>
 80097b8:	440a      	add	r2, r1
 80097ba:	eb00 0c04 	add.w	ip, r0, r4
 80097be:	4621      	mov	r1, r4
 80097c0:	270a      	movs	r7, #10
 80097c2:	458c      	cmp	ip, r1
 80097c4:	d113      	bne.n	80097ee <_strtod_l+0x246>
 80097c6:	1821      	adds	r1, r4, r0
 80097c8:	2908      	cmp	r1, #8
 80097ca:	f104 0401 	add.w	r4, r4, #1
 80097ce:	4404      	add	r4, r0
 80097d0:	dc19      	bgt.n	8009806 <_strtod_l+0x25e>
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	210a      	movs	r1, #10
 80097d6:	fb01 e303 	mla	r3, r1, r3, lr
 80097da:	9307      	str	r3, [sp, #28]
 80097dc:	2100      	movs	r1, #0
 80097de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097e0:	1c58      	adds	r0, r3, #1
 80097e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	4608      	mov	r0, r1
 80097e8:	e7c9      	b.n	800977e <_strtod_l+0x1d6>
 80097ea:	9805      	ldr	r0, [sp, #20]
 80097ec:	e7d3      	b.n	8009796 <_strtod_l+0x1ee>
 80097ee:	2908      	cmp	r1, #8
 80097f0:	f101 0101 	add.w	r1, r1, #1
 80097f4:	dc03      	bgt.n	80097fe <_strtod_l+0x256>
 80097f6:	9b07      	ldr	r3, [sp, #28]
 80097f8:	437b      	muls	r3, r7
 80097fa:	9307      	str	r3, [sp, #28]
 80097fc:	e7e1      	b.n	80097c2 <_strtod_l+0x21a>
 80097fe:	2910      	cmp	r1, #16
 8009800:	bfd8      	it	le
 8009802:	437d      	mulle	r5, r7
 8009804:	e7dd      	b.n	80097c2 <_strtod_l+0x21a>
 8009806:	2c10      	cmp	r4, #16
 8009808:	bfdc      	itt	le
 800980a:	210a      	movle	r1, #10
 800980c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009810:	e7e4      	b.n	80097dc <_strtod_l+0x234>
 8009812:	2301      	movs	r3, #1
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	e781      	b.n	800971c <_strtod_l+0x174>
 8009818:	f04f 0c01 	mov.w	ip, #1
 800981c:	1cb3      	adds	r3, r6, #2
 800981e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009820:	78b3      	ldrb	r3, [r6, #2]
 8009822:	e78a      	b.n	800973a <_strtod_l+0x192>
 8009824:	f04f 0c00 	mov.w	ip, #0
 8009828:	e7f8      	b.n	800981c <_strtod_l+0x274>
 800982a:	bf00      	nop
 800982c:	0800cb90 	.word	0x0800cb90
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009836:	1c5f      	adds	r7, r3, #1
 8009838:	971b      	str	r7, [sp, #108]	; 0x6c
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b30      	cmp	r3, #48	; 0x30
 800983e:	d0f9      	beq.n	8009834 <_strtod_l+0x28c>
 8009840:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009844:	2f08      	cmp	r7, #8
 8009846:	f63f af7d 	bhi.w	8009744 <_strtod_l+0x19c>
 800984a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800984e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009850:	930a      	str	r3, [sp, #40]	; 0x28
 8009852:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009854:	1c5f      	adds	r7, r3, #1
 8009856:	971b      	str	r7, [sp, #108]	; 0x6c
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800985e:	f1b8 0f09 	cmp.w	r8, #9
 8009862:	d937      	bls.n	80098d4 <_strtod_l+0x32c>
 8009864:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009866:	1a7f      	subs	r7, r7, r1
 8009868:	2f08      	cmp	r7, #8
 800986a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800986e:	dc37      	bgt.n	80098e0 <_strtod_l+0x338>
 8009870:	45be      	cmp	lr, r7
 8009872:	bfa8      	it	ge
 8009874:	46be      	movge	lr, r7
 8009876:	f1bc 0f00 	cmp.w	ip, #0
 800987a:	d001      	beq.n	8009880 <_strtod_l+0x2d8>
 800987c:	f1ce 0e00 	rsb	lr, lr, #0
 8009880:	2c00      	cmp	r4, #0
 8009882:	d151      	bne.n	8009928 <_strtod_l+0x380>
 8009884:	2800      	cmp	r0, #0
 8009886:	f47f aece 	bne.w	8009626 <_strtod_l+0x7e>
 800988a:	9a06      	ldr	r2, [sp, #24]
 800988c:	2a00      	cmp	r2, #0
 800988e:	f47f aeca 	bne.w	8009626 <_strtod_l+0x7e>
 8009892:	9a04      	ldr	r2, [sp, #16]
 8009894:	2a00      	cmp	r2, #0
 8009896:	f47f aee4 	bne.w	8009662 <_strtod_l+0xba>
 800989a:	2b4e      	cmp	r3, #78	; 0x4e
 800989c:	d027      	beq.n	80098ee <_strtod_l+0x346>
 800989e:	dc21      	bgt.n	80098e4 <_strtod_l+0x33c>
 80098a0:	2b49      	cmp	r3, #73	; 0x49
 80098a2:	f47f aede 	bne.w	8009662 <_strtod_l+0xba>
 80098a6:	49a0      	ldr	r1, [pc, #640]	; (8009b28 <_strtod_l+0x580>)
 80098a8:	a81b      	add	r0, sp, #108	; 0x6c
 80098aa:	f001 fdd7 	bl	800b45c <__match>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f aed7 	beq.w	8009662 <_strtod_l+0xba>
 80098b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098b6:	499d      	ldr	r1, [pc, #628]	; (8009b2c <_strtod_l+0x584>)
 80098b8:	3b01      	subs	r3, #1
 80098ba:	a81b      	add	r0, sp, #108	; 0x6c
 80098bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80098be:	f001 fdcd 	bl	800b45c <__match>
 80098c2:	b910      	cbnz	r0, 80098ca <_strtod_l+0x322>
 80098c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098c6:	3301      	adds	r3, #1
 80098c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80098ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009b40 <_strtod_l+0x598>
 80098ce:	f04f 0a00 	mov.w	sl, #0
 80098d2:	e6a8      	b.n	8009626 <_strtod_l+0x7e>
 80098d4:	210a      	movs	r1, #10
 80098d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80098da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80098de:	e7b8      	b.n	8009852 <_strtod_l+0x2aa>
 80098e0:	46be      	mov	lr, r7
 80098e2:	e7c8      	b.n	8009876 <_strtod_l+0x2ce>
 80098e4:	2b69      	cmp	r3, #105	; 0x69
 80098e6:	d0de      	beq.n	80098a6 <_strtod_l+0x2fe>
 80098e8:	2b6e      	cmp	r3, #110	; 0x6e
 80098ea:	f47f aeba 	bne.w	8009662 <_strtod_l+0xba>
 80098ee:	4990      	ldr	r1, [pc, #576]	; (8009b30 <_strtod_l+0x588>)
 80098f0:	a81b      	add	r0, sp, #108	; 0x6c
 80098f2:	f001 fdb3 	bl	800b45c <__match>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f43f aeb3 	beq.w	8009662 <_strtod_l+0xba>
 80098fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b28      	cmp	r3, #40	; 0x28
 8009902:	d10e      	bne.n	8009922 <_strtod_l+0x37a>
 8009904:	aa1e      	add	r2, sp, #120	; 0x78
 8009906:	498b      	ldr	r1, [pc, #556]	; (8009b34 <_strtod_l+0x58c>)
 8009908:	a81b      	add	r0, sp, #108	; 0x6c
 800990a:	f001 fdbb 	bl	800b484 <__hexnan>
 800990e:	2805      	cmp	r0, #5
 8009910:	d107      	bne.n	8009922 <_strtod_l+0x37a>
 8009912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009914:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009918:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800991c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009920:	e681      	b.n	8009626 <_strtod_l+0x7e>
 8009922:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009b48 <_strtod_l+0x5a0>
 8009926:	e7d2      	b.n	80098ce <_strtod_l+0x326>
 8009928:	ebae 0302 	sub.w	r3, lr, r2
 800992c:	9306      	str	r3, [sp, #24]
 800992e:	9b05      	ldr	r3, [sp, #20]
 8009930:	9807      	ldr	r0, [sp, #28]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bf08      	it	eq
 8009936:	4623      	moveq	r3, r4
 8009938:	2c10      	cmp	r4, #16
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	46a0      	mov	r8, r4
 800993e:	bfa8      	it	ge
 8009940:	f04f 0810 	movge.w	r8, #16
 8009944:	f7f6 fdfe 	bl	8000544 <__aeabi_ui2d>
 8009948:	2c09      	cmp	r4, #9
 800994a:	4682      	mov	sl, r0
 800994c:	468b      	mov	fp, r1
 800994e:	dc13      	bgt.n	8009978 <_strtod_l+0x3d0>
 8009950:	9b06      	ldr	r3, [sp, #24]
 8009952:	2b00      	cmp	r3, #0
 8009954:	f43f ae67 	beq.w	8009626 <_strtod_l+0x7e>
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	dd7a      	ble.n	8009a52 <_strtod_l+0x4aa>
 800995c:	2b16      	cmp	r3, #22
 800995e:	dc61      	bgt.n	8009a24 <_strtod_l+0x47c>
 8009960:	4a75      	ldr	r2, [pc, #468]	; (8009b38 <_strtod_l+0x590>)
 8009962:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009966:	e9de 0100 	ldrd	r0, r1, [lr]
 800996a:	4652      	mov	r2, sl
 800996c:	465b      	mov	r3, fp
 800996e:	f7f6 fe63 	bl	8000638 <__aeabi_dmul>
 8009972:	4682      	mov	sl, r0
 8009974:	468b      	mov	fp, r1
 8009976:	e656      	b.n	8009626 <_strtod_l+0x7e>
 8009978:	4b6f      	ldr	r3, [pc, #444]	; (8009b38 <_strtod_l+0x590>)
 800997a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800997e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009982:	f7f6 fe59 	bl	8000638 <__aeabi_dmul>
 8009986:	4606      	mov	r6, r0
 8009988:	4628      	mov	r0, r5
 800998a:	460f      	mov	r7, r1
 800998c:	f7f6 fdda 	bl	8000544 <__aeabi_ui2d>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f6 fc98 	bl	80002cc <__adddf3>
 800999c:	2c0f      	cmp	r4, #15
 800999e:	4682      	mov	sl, r0
 80099a0:	468b      	mov	fp, r1
 80099a2:	ddd5      	ble.n	8009950 <_strtod_l+0x3a8>
 80099a4:	9b06      	ldr	r3, [sp, #24]
 80099a6:	eba4 0808 	sub.w	r8, r4, r8
 80099aa:	4498      	add	r8, r3
 80099ac:	f1b8 0f00 	cmp.w	r8, #0
 80099b0:	f340 8096 	ble.w	8009ae0 <_strtod_l+0x538>
 80099b4:	f018 030f 	ands.w	r3, r8, #15
 80099b8:	d00a      	beq.n	80099d0 <_strtod_l+0x428>
 80099ba:	495f      	ldr	r1, [pc, #380]	; (8009b38 <_strtod_l+0x590>)
 80099bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099c0:	4652      	mov	r2, sl
 80099c2:	465b      	mov	r3, fp
 80099c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c8:	f7f6 fe36 	bl	8000638 <__aeabi_dmul>
 80099cc:	4682      	mov	sl, r0
 80099ce:	468b      	mov	fp, r1
 80099d0:	f038 080f 	bics.w	r8, r8, #15
 80099d4:	d073      	beq.n	8009abe <_strtod_l+0x516>
 80099d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80099da:	dd47      	ble.n	8009a6c <_strtod_l+0x4c4>
 80099dc:	2400      	movs	r4, #0
 80099de:	46a0      	mov	r8, r4
 80099e0:	9407      	str	r4, [sp, #28]
 80099e2:	9405      	str	r4, [sp, #20]
 80099e4:	2322      	movs	r3, #34	; 0x22
 80099e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009b40 <_strtod_l+0x598>
 80099ea:	f8c9 3000 	str.w	r3, [r9]
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	9b07      	ldr	r3, [sp, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f43f ae16 	beq.w	8009626 <_strtod_l+0x7e>
 80099fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099fc:	4648      	mov	r0, r9
 80099fe:	f001 fe3e 	bl	800b67e <_Bfree>
 8009a02:	9905      	ldr	r1, [sp, #20]
 8009a04:	4648      	mov	r0, r9
 8009a06:	f001 fe3a 	bl	800b67e <_Bfree>
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	f001 fe36 	bl	800b67e <_Bfree>
 8009a12:	9907      	ldr	r1, [sp, #28]
 8009a14:	4648      	mov	r0, r9
 8009a16:	f001 fe32 	bl	800b67e <_Bfree>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4648      	mov	r0, r9
 8009a1e:	f001 fe2e 	bl	800b67e <_Bfree>
 8009a22:	e600      	b.n	8009626 <_strtod_l+0x7e>
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	dbba      	blt.n	80099a4 <_strtod_l+0x3fc>
 8009a2e:	4d42      	ldr	r5, [pc, #264]	; (8009b38 <_strtod_l+0x590>)
 8009a30:	f1c4 040f 	rsb	r4, r4, #15
 8009a34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009a38:	4652      	mov	r2, sl
 8009a3a:	465b      	mov	r3, fp
 8009a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a40:	f7f6 fdfa 	bl	8000638 <__aeabi_dmul>
 8009a44:	9b06      	ldr	r3, [sp, #24]
 8009a46:	1b1c      	subs	r4, r3, r4
 8009a48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009a4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a50:	e78d      	b.n	800996e <_strtod_l+0x3c6>
 8009a52:	f113 0f16 	cmn.w	r3, #22
 8009a56:	dba5      	blt.n	80099a4 <_strtod_l+0x3fc>
 8009a58:	4a37      	ldr	r2, [pc, #220]	; (8009b38 <_strtod_l+0x590>)
 8009a5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009a5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009a62:	4650      	mov	r0, sl
 8009a64:	4659      	mov	r1, fp
 8009a66:	f7f6 ff11 	bl	800088c <__aeabi_ddiv>
 8009a6a:	e782      	b.n	8009972 <_strtod_l+0x3ca>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4e33      	ldr	r6, [pc, #204]	; (8009b3c <_strtod_l+0x594>)
 8009a70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a74:	4650      	mov	r0, sl
 8009a76:	4659      	mov	r1, fp
 8009a78:	461d      	mov	r5, r3
 8009a7a:	f1b8 0f01 	cmp.w	r8, #1
 8009a7e:	dc21      	bgt.n	8009ac4 <_strtod_l+0x51c>
 8009a80:	b10b      	cbz	r3, 8009a86 <_strtod_l+0x4de>
 8009a82:	4682      	mov	sl, r0
 8009a84:	468b      	mov	fp, r1
 8009a86:	4b2d      	ldr	r3, [pc, #180]	; (8009b3c <_strtod_l+0x594>)
 8009a88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a90:	4652      	mov	r2, sl
 8009a92:	465b      	mov	r3, fp
 8009a94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009a98:	f7f6 fdce 	bl	8000638 <__aeabi_dmul>
 8009a9c:	4b28      	ldr	r3, [pc, #160]	; (8009b40 <_strtod_l+0x598>)
 8009a9e:	460a      	mov	r2, r1
 8009aa0:	400b      	ands	r3, r1
 8009aa2:	4928      	ldr	r1, [pc, #160]	; (8009b44 <_strtod_l+0x59c>)
 8009aa4:	428b      	cmp	r3, r1
 8009aa6:	4682      	mov	sl, r0
 8009aa8:	d898      	bhi.n	80099dc <_strtod_l+0x434>
 8009aaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009aae:	428b      	cmp	r3, r1
 8009ab0:	bf86      	itte	hi
 8009ab2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009b4c <_strtod_l+0x5a4>
 8009ab6:	f04f 3aff 	movhi.w	sl, #4294967295
 8009aba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9304      	str	r3, [sp, #16]
 8009ac2:	e077      	b.n	8009bb4 <_strtod_l+0x60c>
 8009ac4:	f018 0f01 	tst.w	r8, #1
 8009ac8:	d006      	beq.n	8009ad8 <_strtod_l+0x530>
 8009aca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f7f6 fdb1 	bl	8000638 <__aeabi_dmul>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	3501      	adds	r5, #1
 8009ada:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009ade:	e7cc      	b.n	8009a7a <_strtod_l+0x4d2>
 8009ae0:	d0ed      	beq.n	8009abe <_strtod_l+0x516>
 8009ae2:	f1c8 0800 	rsb	r8, r8, #0
 8009ae6:	f018 020f 	ands.w	r2, r8, #15
 8009aea:	d00a      	beq.n	8009b02 <_strtod_l+0x55a>
 8009aec:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <_strtod_l+0x590>)
 8009aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af2:	4650      	mov	r0, sl
 8009af4:	4659      	mov	r1, fp
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fec7 	bl	800088c <__aeabi_ddiv>
 8009afe:	4682      	mov	sl, r0
 8009b00:	468b      	mov	fp, r1
 8009b02:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009b06:	d0da      	beq.n	8009abe <_strtod_l+0x516>
 8009b08:	f1b8 0f1f 	cmp.w	r8, #31
 8009b0c:	dd20      	ble.n	8009b50 <_strtod_l+0x5a8>
 8009b0e:	2400      	movs	r4, #0
 8009b10:	46a0      	mov	r8, r4
 8009b12:	9407      	str	r4, [sp, #28]
 8009b14:	9405      	str	r4, [sp, #20]
 8009b16:	2322      	movs	r3, #34	; 0x22
 8009b18:	f04f 0a00 	mov.w	sl, #0
 8009b1c:	f04f 0b00 	mov.w	fp, #0
 8009b20:	f8c9 3000 	str.w	r3, [r9]
 8009b24:	e765      	b.n	80099f2 <_strtod_l+0x44a>
 8009b26:	bf00      	nop
 8009b28:	0800cb59 	.word	0x0800cb59
 8009b2c:	0800cbe3 	.word	0x0800cbe3
 8009b30:	0800cb61 	.word	0x0800cb61
 8009b34:	0800cba4 	.word	0x0800cba4
 8009b38:	0800cc20 	.word	0x0800cc20
 8009b3c:	0800cbf8 	.word	0x0800cbf8
 8009b40:	7ff00000 	.word	0x7ff00000
 8009b44:	7ca00000 	.word	0x7ca00000
 8009b48:	fff80000 	.word	0xfff80000
 8009b4c:	7fefffff 	.word	0x7fefffff
 8009b50:	f018 0310 	ands.w	r3, r8, #16
 8009b54:	bf18      	it	ne
 8009b56:	236a      	movne	r3, #106	; 0x6a
 8009b58:	4da0      	ldr	r5, [pc, #640]	; (8009ddc <_strtod_l+0x834>)
 8009b5a:	9304      	str	r3, [sp, #16]
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	4659      	mov	r1, fp
 8009b60:	2300      	movs	r3, #0
 8009b62:	f1b8 0f00 	cmp.w	r8, #0
 8009b66:	f300 810a 	bgt.w	8009d7e <_strtod_l+0x7d6>
 8009b6a:	b10b      	cbz	r3, 8009b70 <_strtod_l+0x5c8>
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	9b04      	ldr	r3, [sp, #16]
 8009b72:	b1bb      	cbz	r3, 8009ba4 <_strtod_l+0x5fc>
 8009b74:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009b78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	4659      	mov	r1, fp
 8009b80:	dd10      	ble.n	8009ba4 <_strtod_l+0x5fc>
 8009b82:	2b1f      	cmp	r3, #31
 8009b84:	f340 8107 	ble.w	8009d96 <_strtod_l+0x7ee>
 8009b88:	2b34      	cmp	r3, #52	; 0x34
 8009b8a:	bfde      	ittt	le
 8009b8c:	3b20      	suble	r3, #32
 8009b8e:	f04f 32ff 	movle.w	r2, #4294967295
 8009b92:	fa02 f303 	lslle.w	r3, r2, r3
 8009b96:	f04f 0a00 	mov.w	sl, #0
 8009b9a:	bfcc      	ite	gt
 8009b9c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009ba0:	ea03 0b01 	andle.w	fp, r3, r1
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4650      	mov	r0, sl
 8009baa:	4659      	mov	r1, fp
 8009bac:	f7f6 ffac 	bl	8000b08 <__aeabi_dcmpeq>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d1ac      	bne.n	8009b0e <_strtod_l+0x566>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	9a05      	ldr	r2, [sp, #20]
 8009bba:	9908      	ldr	r1, [sp, #32]
 8009bbc:	4623      	mov	r3, r4
 8009bbe:	4648      	mov	r0, r9
 8009bc0:	f001 fdaf 	bl	800b722 <__s2b>
 8009bc4:	9007      	str	r0, [sp, #28]
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f43f af08 	beq.w	80099dc <_strtod_l+0x434>
 8009bcc:	9a06      	ldr	r2, [sp, #24]
 8009bce:	9b06      	ldr	r3, [sp, #24]
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	f1c3 0300 	rsb	r3, r3, #0
 8009bd6:	bfa8      	it	ge
 8009bd8:	2300      	movge	r3, #0
 8009bda:	930e      	str	r3, [sp, #56]	; 0x38
 8009bdc:	2400      	movs	r4, #0
 8009bde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009be2:	9316      	str	r3, [sp, #88]	; 0x58
 8009be4:	46a0      	mov	r8, r4
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	4648      	mov	r0, r9
 8009bea:	6859      	ldr	r1, [r3, #4]
 8009bec:	f001 fd13 	bl	800b616 <_Balloc>
 8009bf0:	9005      	str	r0, [sp, #20]
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	f43f aef6 	beq.w	80099e4 <_strtod_l+0x43c>
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	691a      	ldr	r2, [r3, #16]
 8009bfc:	3202      	adds	r2, #2
 8009bfe:	f103 010c 	add.w	r1, r3, #12
 8009c02:	0092      	lsls	r2, r2, #2
 8009c04:	300c      	adds	r0, #12
 8009c06:	f001 fcfb 	bl	800b600 <memcpy>
 8009c0a:	aa1e      	add	r2, sp, #120	; 0x78
 8009c0c:	a91d      	add	r1, sp, #116	; 0x74
 8009c0e:	ec4b ab10 	vmov	d0, sl, fp
 8009c12:	4648      	mov	r0, r9
 8009c14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009c18:	f002 f83e 	bl	800bc98 <__d2b>
 8009c1c:	901c      	str	r0, [sp, #112]	; 0x70
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f43f aee0 	beq.w	80099e4 <_strtod_l+0x43c>
 8009c24:	2101      	movs	r1, #1
 8009c26:	4648      	mov	r0, r9
 8009c28:	f001 fe07 	bl	800b83a <__i2b>
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f43f aed8 	beq.w	80099e4 <_strtod_l+0x43c>
 8009c34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009c36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c38:	2e00      	cmp	r6, #0
 8009c3a:	bfab      	itete	ge
 8009c3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009c3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009c40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009c42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009c44:	bfac      	ite	ge
 8009c46:	18f7      	addge	r7, r6, r3
 8009c48:	1b9d      	sublt	r5, r3, r6
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	1af6      	subs	r6, r6, r3
 8009c4e:	4416      	add	r6, r2
 8009c50:	4b63      	ldr	r3, [pc, #396]	; (8009de0 <_strtod_l+0x838>)
 8009c52:	3e01      	subs	r6, #1
 8009c54:	429e      	cmp	r6, r3
 8009c56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c5a:	f280 80af 	bge.w	8009dbc <_strtod_l+0x814>
 8009c5e:	1b9b      	subs	r3, r3, r6
 8009c60:	2b1f      	cmp	r3, #31
 8009c62:	eba2 0203 	sub.w	r2, r2, r3
 8009c66:	f04f 0101 	mov.w	r1, #1
 8009c6a:	f300 809b 	bgt.w	8009da4 <_strtod_l+0x7fc>
 8009c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
 8009c78:	18be      	adds	r6, r7, r2
 8009c7a:	9b04      	ldr	r3, [sp, #16]
 8009c7c:	42b7      	cmp	r7, r6
 8009c7e:	4415      	add	r5, r2
 8009c80:	441d      	add	r5, r3
 8009c82:	463b      	mov	r3, r7
 8009c84:	bfa8      	it	ge
 8009c86:	4633      	movge	r3, r6
 8009c88:	42ab      	cmp	r3, r5
 8009c8a:	bfa8      	it	ge
 8009c8c:	462b      	movge	r3, r5
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bfc2      	ittt	gt
 8009c92:	1af6      	subgt	r6, r6, r3
 8009c94:	1aed      	subgt	r5, r5, r3
 8009c96:	1aff      	subgt	r7, r7, r3
 8009c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c9a:	b1bb      	cbz	r3, 8009ccc <_strtod_l+0x724>
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4648      	mov	r0, r9
 8009ca2:	f001 fe69 	bl	800b978 <__pow5mult>
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f43f ae9b 	beq.w	80099e4 <_strtod_l+0x43c>
 8009cae:	4601      	mov	r1, r0
 8009cb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	f001 fdca 	bl	800b84c <__multiply>
 8009cb8:	900c      	str	r0, [sp, #48]	; 0x30
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	f43f ae92 	beq.w	80099e4 <_strtod_l+0x43c>
 8009cc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cc2:	4648      	mov	r0, r9
 8009cc4:	f001 fcdb 	bl	800b67e <_Bfree>
 8009cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cca:	931c      	str	r3, [sp, #112]	; 0x70
 8009ccc:	2e00      	cmp	r6, #0
 8009cce:	dc7a      	bgt.n	8009dc6 <_strtod_l+0x81e>
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dd08      	ble.n	8009ce8 <_strtod_l+0x740>
 8009cd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009cd8:	9905      	ldr	r1, [sp, #20]
 8009cda:	4648      	mov	r0, r9
 8009cdc:	f001 fe4c 	bl	800b978 <__pow5mult>
 8009ce0:	9005      	str	r0, [sp, #20]
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f43f ae7e 	beq.w	80099e4 <_strtod_l+0x43c>
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	dd08      	ble.n	8009cfe <_strtod_l+0x756>
 8009cec:	462a      	mov	r2, r5
 8009cee:	9905      	ldr	r1, [sp, #20]
 8009cf0:	4648      	mov	r0, r9
 8009cf2:	f001 fe8f 	bl	800ba14 <__lshift>
 8009cf6:	9005      	str	r0, [sp, #20]
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f43f ae73 	beq.w	80099e4 <_strtod_l+0x43c>
 8009cfe:	2f00      	cmp	r7, #0
 8009d00:	dd08      	ble.n	8009d14 <_strtod_l+0x76c>
 8009d02:	4641      	mov	r1, r8
 8009d04:	463a      	mov	r2, r7
 8009d06:	4648      	mov	r0, r9
 8009d08:	f001 fe84 	bl	800ba14 <__lshift>
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f43f ae68 	beq.w	80099e4 <_strtod_l+0x43c>
 8009d14:	9a05      	ldr	r2, [sp, #20]
 8009d16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d18:	4648      	mov	r0, r9
 8009d1a:	f001 fee9 	bl	800baf0 <__mdiff>
 8009d1e:	4604      	mov	r4, r0
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f43f ae5f 	beq.w	80099e4 <_strtod_l+0x43c>
 8009d26:	68c3      	ldr	r3, [r0, #12]
 8009d28:	930c      	str	r3, [sp, #48]	; 0x30
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60c3      	str	r3, [r0, #12]
 8009d2e:	4641      	mov	r1, r8
 8009d30:	f001 fec4 	bl	800babc <__mcmp>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	da55      	bge.n	8009de4 <_strtod_l+0x83c>
 8009d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d3a:	b9e3      	cbnz	r3, 8009d76 <_strtod_l+0x7ce>
 8009d3c:	f1ba 0f00 	cmp.w	sl, #0
 8009d40:	d119      	bne.n	8009d76 <_strtod_l+0x7ce>
 8009d42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d46:	b9b3      	cbnz	r3, 8009d76 <_strtod_l+0x7ce>
 8009d48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d4c:	0d1b      	lsrs	r3, r3, #20
 8009d4e:	051b      	lsls	r3, r3, #20
 8009d50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d54:	d90f      	bls.n	8009d76 <_strtod_l+0x7ce>
 8009d56:	6963      	ldr	r3, [r4, #20]
 8009d58:	b913      	cbnz	r3, 8009d60 <_strtod_l+0x7b8>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	dd0a      	ble.n	8009d76 <_strtod_l+0x7ce>
 8009d60:	4621      	mov	r1, r4
 8009d62:	2201      	movs	r2, #1
 8009d64:	4648      	mov	r0, r9
 8009d66:	f001 fe55 	bl	800ba14 <__lshift>
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	f001 fea5 	bl	800babc <__mcmp>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	dc67      	bgt.n	8009e46 <_strtod_l+0x89e>
 8009d76:	9b04      	ldr	r3, [sp, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d171      	bne.n	8009e60 <_strtod_l+0x8b8>
 8009d7c:	e63d      	b.n	80099fa <_strtod_l+0x452>
 8009d7e:	f018 0f01 	tst.w	r8, #1
 8009d82:	d004      	beq.n	8009d8e <_strtod_l+0x7e6>
 8009d84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d88:	f7f6 fc56 	bl	8000638 <__aeabi_dmul>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d92:	3508      	adds	r5, #8
 8009d94:	e6e5      	b.n	8009b62 <_strtod_l+0x5ba>
 8009d96:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9e:	ea03 0a0a 	and.w	sl, r3, sl
 8009da2:	e6ff      	b.n	8009ba4 <_strtod_l+0x5fc>
 8009da4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009da8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009dac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009db0:	36e2      	adds	r6, #226	; 0xe2
 8009db2:	fa01 f306 	lsl.w	r3, r1, r6
 8009db6:	930a      	str	r3, [sp, #40]	; 0x28
 8009db8:	910f      	str	r1, [sp, #60]	; 0x3c
 8009dba:	e75d      	b.n	8009c78 <_strtod_l+0x6d0>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dc4:	e758      	b.n	8009c78 <_strtod_l+0x6d0>
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009dca:	4648      	mov	r0, r9
 8009dcc:	f001 fe22 	bl	800ba14 <__lshift>
 8009dd0:	901c      	str	r0, [sp, #112]	; 0x70
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f47f af7c 	bne.w	8009cd0 <_strtod_l+0x728>
 8009dd8:	e604      	b.n	80099e4 <_strtod_l+0x43c>
 8009dda:	bf00      	nop
 8009ddc:	0800cbb8 	.word	0x0800cbb8
 8009de0:	fffffc02 	.word	0xfffffc02
 8009de4:	465d      	mov	r5, fp
 8009de6:	f040 8086 	bne.w	8009ef6 <_strtod_l+0x94e>
 8009dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df0:	b32a      	cbz	r2, 8009e3e <_strtod_l+0x896>
 8009df2:	4aaf      	ldr	r2, [pc, #700]	; (800a0b0 <_strtod_l+0xb08>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d153      	bne.n	8009ea0 <_strtod_l+0x8f8>
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	4650      	mov	r0, sl
 8009dfc:	b1d3      	cbz	r3, 8009e34 <_strtod_l+0x88c>
 8009dfe:	4aad      	ldr	r2, [pc, #692]	; (800a0b4 <_strtod_l+0xb0c>)
 8009e00:	402a      	ands	r2, r5
 8009e02:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009e06:	f04f 31ff 	mov.w	r1, #4294967295
 8009e0a:	d816      	bhi.n	8009e3a <_strtod_l+0x892>
 8009e0c:	0d12      	lsrs	r2, r2, #20
 8009e0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e12:	fa01 f303 	lsl.w	r3, r1, r3
 8009e16:	4298      	cmp	r0, r3
 8009e18:	d142      	bne.n	8009ea0 <_strtod_l+0x8f8>
 8009e1a:	4ba7      	ldr	r3, [pc, #668]	; (800a0b8 <_strtod_l+0xb10>)
 8009e1c:	429d      	cmp	r5, r3
 8009e1e:	d102      	bne.n	8009e26 <_strtod_l+0x87e>
 8009e20:	3001      	adds	r0, #1
 8009e22:	f43f addf 	beq.w	80099e4 <_strtod_l+0x43c>
 8009e26:	4ba3      	ldr	r3, [pc, #652]	; (800a0b4 <_strtod_l+0xb0c>)
 8009e28:	402b      	ands	r3, r5
 8009e2a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e2e:	f04f 0a00 	mov.w	sl, #0
 8009e32:	e7a0      	b.n	8009d76 <_strtod_l+0x7ce>
 8009e34:	f04f 33ff 	mov.w	r3, #4294967295
 8009e38:	e7ed      	b.n	8009e16 <_strtod_l+0x86e>
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	e7eb      	b.n	8009e16 <_strtod_l+0x86e>
 8009e3e:	bb7b      	cbnz	r3, 8009ea0 <_strtod_l+0x8f8>
 8009e40:	f1ba 0f00 	cmp.w	sl, #0
 8009e44:	d12c      	bne.n	8009ea0 <_strtod_l+0x8f8>
 8009e46:	9904      	ldr	r1, [sp, #16]
 8009e48:	4a9a      	ldr	r2, [pc, #616]	; (800a0b4 <_strtod_l+0xb0c>)
 8009e4a:	465b      	mov	r3, fp
 8009e4c:	b1f1      	cbz	r1, 8009e8c <_strtod_l+0x8e4>
 8009e4e:	ea02 010b 	and.w	r1, r2, fp
 8009e52:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e56:	dc19      	bgt.n	8009e8c <_strtod_l+0x8e4>
 8009e58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e5c:	f77f ae5b 	ble.w	8009b16 <_strtod_l+0x56e>
 8009e60:	4a96      	ldr	r2, [pc, #600]	; (800a0bc <_strtod_l+0xb14>)
 8009e62:	2300      	movs	r3, #0
 8009e64:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009e68:	4650      	mov	r0, sl
 8009e6a:	4659      	mov	r1, fp
 8009e6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e70:	f7f6 fbe2 	bl	8000638 <__aeabi_dmul>
 8009e74:	4682      	mov	sl, r0
 8009e76:	468b      	mov	fp, r1
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	f47f adbe 	bne.w	80099fa <_strtod_l+0x452>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f47f adbb 	bne.w	80099fa <_strtod_l+0x452>
 8009e84:	2322      	movs	r3, #34	; 0x22
 8009e86:	f8c9 3000 	str.w	r3, [r9]
 8009e8a:	e5b6      	b.n	80099fa <_strtod_l+0x452>
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e9a:	f04f 3aff 	mov.w	sl, #4294967295
 8009e9e:	e76a      	b.n	8009d76 <_strtod_l+0x7ce>
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea2:	b193      	cbz	r3, 8009eca <_strtod_l+0x922>
 8009ea4:	422b      	tst	r3, r5
 8009ea6:	f43f af66 	beq.w	8009d76 <_strtod_l+0x7ce>
 8009eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	4650      	mov	r0, sl
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	b173      	cbz	r3, 8009ed2 <_strtod_l+0x92a>
 8009eb4:	f7ff fb5a 	bl	800956c <sulp>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ec0:	f7f6 fa04 	bl	80002cc <__adddf3>
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	e755      	b.n	8009d76 <_strtod_l+0x7ce>
 8009eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ecc:	ea13 0f0a 	tst.w	r3, sl
 8009ed0:	e7e9      	b.n	8009ea6 <_strtod_l+0x8fe>
 8009ed2:	f7ff fb4b 	bl	800956c <sulp>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ede:	f7f6 f9f3 	bl	80002c8 <__aeabi_dsub>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	468b      	mov	fp, r1
 8009eea:	f7f6 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f47f ae11 	bne.w	8009b16 <_strtod_l+0x56e>
 8009ef4:	e73f      	b.n	8009d76 <_strtod_l+0x7ce>
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f001 ff1c 	bl	800bd36 <__ratio>
 8009efe:	ec57 6b10 	vmov	r6, r7, d0
 8009f02:	2200      	movs	r2, #0
 8009f04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f08:	ee10 0a10 	vmov	r0, s0
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	f7f6 fe0f 	bl	8000b30 <__aeabi_dcmple>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d077      	beq.n	800a006 <_strtod_l+0xa5e>
 8009f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d04a      	beq.n	8009fb2 <_strtod_l+0xa0a>
 8009f1c:	4b68      	ldr	r3, [pc, #416]	; (800a0c0 <_strtod_l+0xb18>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009f24:	4f66      	ldr	r7, [pc, #408]	; (800a0c0 <_strtod_l+0xb18>)
 8009f26:	2600      	movs	r6, #0
 8009f28:	4b62      	ldr	r3, [pc, #392]	; (800a0b4 <_strtod_l+0xb0c>)
 8009f2a:	402b      	ands	r3, r5
 8009f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f30:	4b64      	ldr	r3, [pc, #400]	; (800a0c4 <_strtod_l+0xb1c>)
 8009f32:	429a      	cmp	r2, r3
 8009f34:	f040 80ce 	bne.w	800a0d4 <_strtod_l+0xb2c>
 8009f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009f44:	ec4b ab10 	vmov	d0, sl, fp
 8009f48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009f4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f50:	f001 fe2c 	bl	800bbac <__ulp>
 8009f54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f58:	ec53 2b10 	vmov	r2, r3, d0
 8009f5c:	f7f6 fb6c 	bl	8000638 <__aeabi_dmul>
 8009f60:	4652      	mov	r2, sl
 8009f62:	465b      	mov	r3, fp
 8009f64:	f7f6 f9b2 	bl	80002cc <__adddf3>
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4952      	ldr	r1, [pc, #328]	; (800a0b4 <_strtod_l+0xb0c>)
 8009f6c:	4a56      	ldr	r2, [pc, #344]	; (800a0c8 <_strtod_l+0xb20>)
 8009f6e:	4019      	ands	r1, r3
 8009f70:	4291      	cmp	r1, r2
 8009f72:	4682      	mov	sl, r0
 8009f74:	d95b      	bls.n	800a02e <_strtod_l+0xa86>
 8009f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d103      	bne.n	8009f88 <_strtod_l+0x9e0>
 8009f80:	9b08      	ldr	r3, [sp, #32]
 8009f82:	3301      	adds	r3, #1
 8009f84:	f43f ad2e 	beq.w	80099e4 <_strtod_l+0x43c>
 8009f88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a0b8 <_strtod_l+0xb10>
 8009f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8009f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f92:	4648      	mov	r0, r9
 8009f94:	f001 fb73 	bl	800b67e <_Bfree>
 8009f98:	9905      	ldr	r1, [sp, #20]
 8009f9a:	4648      	mov	r0, r9
 8009f9c:	f001 fb6f 	bl	800b67e <_Bfree>
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	4648      	mov	r0, r9
 8009fa4:	f001 fb6b 	bl	800b67e <_Bfree>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4648      	mov	r0, r9
 8009fac:	f001 fb67 	bl	800b67e <_Bfree>
 8009fb0:	e619      	b.n	8009be6 <_strtod_l+0x63e>
 8009fb2:	f1ba 0f00 	cmp.w	sl, #0
 8009fb6:	d11a      	bne.n	8009fee <_strtod_l+0xa46>
 8009fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fbc:	b9eb      	cbnz	r3, 8009ffa <_strtod_l+0xa52>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4b3f      	ldr	r3, [pc, #252]	; (800a0c0 <_strtod_l+0xb18>)
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 fda9 	bl	8000b1c <__aeabi_dcmplt>
 8009fca:	b9c8      	cbnz	r0, 800a000 <_strtod_l+0xa58>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	4639      	mov	r1, r7
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4b3e      	ldr	r3, [pc, #248]	; (800a0cc <_strtod_l+0xb24>)
 8009fd4:	f7f6 fb30 	bl	8000638 <__aeabi_dmul>
 8009fd8:	4606      	mov	r6, r0
 8009fda:	460f      	mov	r7, r1
 8009fdc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009fe0:	9618      	str	r6, [sp, #96]	; 0x60
 8009fe2:	9319      	str	r3, [sp, #100]	; 0x64
 8009fe4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009fe8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009fec:	e79c      	b.n	8009f28 <_strtod_l+0x980>
 8009fee:	f1ba 0f01 	cmp.w	sl, #1
 8009ff2:	d102      	bne.n	8009ffa <_strtod_l+0xa52>
 8009ff4:	2d00      	cmp	r5, #0
 8009ff6:	f43f ad8e 	beq.w	8009b16 <_strtod_l+0x56e>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4b34      	ldr	r3, [pc, #208]	; (800a0d0 <_strtod_l+0xb28>)
 8009ffe:	e78f      	b.n	8009f20 <_strtod_l+0x978>
 800a000:	2600      	movs	r6, #0
 800a002:	4f32      	ldr	r7, [pc, #200]	; (800a0cc <_strtod_l+0xb24>)
 800a004:	e7ea      	b.n	8009fdc <_strtod_l+0xa34>
 800a006:	4b31      	ldr	r3, [pc, #196]	; (800a0cc <_strtod_l+0xb24>)
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	2200      	movs	r2, #0
 800a00e:	f7f6 fb13 	bl	8000638 <__aeabi_dmul>
 800a012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	b933      	cbnz	r3, 800a028 <_strtod_l+0xa80>
 800a01a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a01e:	9010      	str	r0, [sp, #64]	; 0x40
 800a020:	9311      	str	r3, [sp, #68]	; 0x44
 800a022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a026:	e7df      	b.n	8009fe8 <_strtod_l+0xa40>
 800a028:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a02c:	e7f9      	b.n	800a022 <_strtod_l+0xa7a>
 800a02e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1ab      	bne.n	8009f90 <_strtod_l+0x9e8>
 800a038:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a03c:	0d1b      	lsrs	r3, r3, #20
 800a03e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a040:	051b      	lsls	r3, r3, #20
 800a042:	429a      	cmp	r2, r3
 800a044:	465d      	mov	r5, fp
 800a046:	d1a3      	bne.n	8009f90 <_strtod_l+0x9e8>
 800a048:	4639      	mov	r1, r7
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7f6 fda4 	bl	8000b98 <__aeabi_d2iz>
 800a050:	f7f6 fa88 	bl	8000564 <__aeabi_i2d>
 800a054:	460b      	mov	r3, r1
 800a056:	4602      	mov	r2, r0
 800a058:	4639      	mov	r1, r7
 800a05a:	4630      	mov	r0, r6
 800a05c:	f7f6 f934 	bl	80002c8 <__aeabi_dsub>
 800a060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a062:	4606      	mov	r6, r0
 800a064:	460f      	mov	r7, r1
 800a066:	b933      	cbnz	r3, 800a076 <_strtod_l+0xace>
 800a068:	f1ba 0f00 	cmp.w	sl, #0
 800a06c:	d103      	bne.n	800a076 <_strtod_l+0xace>
 800a06e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a072:	2d00      	cmp	r5, #0
 800a074:	d06d      	beq.n	800a152 <_strtod_l+0xbaa>
 800a076:	a30a      	add	r3, pc, #40	; (adr r3, 800a0a0 <_strtod_l+0xaf8>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 800a084:	2800      	cmp	r0, #0
 800a086:	f47f acb8 	bne.w	80099fa <_strtod_l+0x452>
 800a08a:	a307      	add	r3, pc, #28	; (adr r3, 800a0a8 <_strtod_l+0xb00>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	4630      	mov	r0, r6
 800a092:	4639      	mov	r1, r7
 800a094:	f7f6 fd60 	bl	8000b58 <__aeabi_dcmpgt>
 800a098:	2800      	cmp	r0, #0
 800a09a:	f43f af79 	beq.w	8009f90 <_strtod_l+0x9e8>
 800a09e:	e4ac      	b.n	80099fa <_strtod_l+0x452>
 800a0a0:	94a03595 	.word	0x94a03595
 800a0a4:	3fdfffff 	.word	0x3fdfffff
 800a0a8:	35afe535 	.word	0x35afe535
 800a0ac:	3fe00000 	.word	0x3fe00000
 800a0b0:	000fffff 	.word	0x000fffff
 800a0b4:	7ff00000 	.word	0x7ff00000
 800a0b8:	7fefffff 	.word	0x7fefffff
 800a0bc:	39500000 	.word	0x39500000
 800a0c0:	3ff00000 	.word	0x3ff00000
 800a0c4:	7fe00000 	.word	0x7fe00000
 800a0c8:	7c9fffff 	.word	0x7c9fffff
 800a0cc:	3fe00000 	.word	0x3fe00000
 800a0d0:	bff00000 	.word	0xbff00000
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	b333      	cbz	r3, 800a126 <_strtod_l+0xb7e>
 800a0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0de:	d822      	bhi.n	800a126 <_strtod_l+0xb7e>
 800a0e0:	a327      	add	r3, pc, #156	; (adr r3, 800a180 <_strtod_l+0xbd8>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 fd21 	bl	8000b30 <__aeabi_dcmple>
 800a0ee:	b1a0      	cbz	r0, 800a11a <_strtod_l+0xb72>
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7f6 fd78 	bl	8000be8 <__aeabi_d2uiz>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	bf08      	it	eq
 800a0fc:	2001      	moveq	r0, #1
 800a0fe:	f7f6 fa21 	bl	8000544 <__aeabi_ui2d>
 800a102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a104:	4606      	mov	r6, r0
 800a106:	460f      	mov	r7, r1
 800a108:	bb03      	cbnz	r3, 800a14c <_strtod_l+0xba4>
 800a10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a10e:	9012      	str	r0, [sp, #72]	; 0x48
 800a110:	9313      	str	r3, [sp, #76]	; 0x4c
 800a112:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a116:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a11c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a11e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a122:	1a9b      	subs	r3, r3, r2
 800a124:	930b      	str	r3, [sp, #44]	; 0x2c
 800a126:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a12a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a12e:	f001 fd3d 	bl	800bbac <__ulp>
 800a132:	4650      	mov	r0, sl
 800a134:	ec53 2b10 	vmov	r2, r3, d0
 800a138:	4659      	mov	r1, fp
 800a13a:	f7f6 fa7d 	bl	8000638 <__aeabi_dmul>
 800a13e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a142:	f7f6 f8c3 	bl	80002cc <__adddf3>
 800a146:	4682      	mov	sl, r0
 800a148:	468b      	mov	fp, r1
 800a14a:	e772      	b.n	800a032 <_strtod_l+0xa8a>
 800a14c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a150:	e7df      	b.n	800a112 <_strtod_l+0xb6a>
 800a152:	a30d      	add	r3, pc, #52	; (adr r3, 800a188 <_strtod_l+0xbe0>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f7f6 fce0 	bl	8000b1c <__aeabi_dcmplt>
 800a15c:	e79c      	b.n	800a098 <_strtod_l+0xaf0>
 800a15e:	2300      	movs	r3, #0
 800a160:	930d      	str	r3, [sp, #52]	; 0x34
 800a162:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	f7ff ba61 	b.w	800962e <_strtod_l+0x86>
 800a16c:	2b65      	cmp	r3, #101	; 0x65
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	f43f ab4e 	beq.w	8009812 <_strtod_l+0x26a>
 800a176:	2101      	movs	r1, #1
 800a178:	4614      	mov	r4, r2
 800a17a:	9104      	str	r1, [sp, #16]
 800a17c:	f7ff bacb 	b.w	8009716 <_strtod_l+0x16e>
 800a180:	ffc00000 	.word	0xffc00000
 800a184:	41dfffff 	.word	0x41dfffff
 800a188:	94a03595 	.word	0x94a03595
 800a18c:	3fcfffff 	.word	0x3fcfffff

0800a190 <_strtod_r>:
 800a190:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <_strtod_r+0x18>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	b410      	push	{r4}
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	4c04      	ldr	r4, [pc, #16]	; (800a1ac <_strtod_r+0x1c>)
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	bf08      	it	eq
 800a19e:	4623      	moveq	r3, r4
 800a1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a4:	f7ff ba00 	b.w	80095a8 <_strtod_l>
 800a1a8:	20000010 	.word	0x20000010
 800a1ac:	20000074 	.word	0x20000074

0800a1b0 <_strtol_l.isra.0>:
 800a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	4692      	mov	sl, r2
 800a1ba:	461e      	mov	r6, r3
 800a1bc:	460f      	mov	r7, r1
 800a1be:	463d      	mov	r5, r7
 800a1c0:	9808      	ldr	r0, [sp, #32]
 800a1c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1c6:	f001 f9ed 	bl	800b5a4 <__locale_ctype_ptr_l>
 800a1ca:	4420      	add	r0, r4
 800a1cc:	7843      	ldrb	r3, [r0, #1]
 800a1ce:	f013 0308 	ands.w	r3, r3, #8
 800a1d2:	d132      	bne.n	800a23a <_strtol_l.isra.0+0x8a>
 800a1d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a1d6:	d132      	bne.n	800a23e <_strtol_l.isra.0+0x8e>
 800a1d8:	787c      	ldrb	r4, [r7, #1]
 800a1da:	1cbd      	adds	r5, r7, #2
 800a1dc:	2201      	movs	r2, #1
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	d05d      	beq.n	800a29e <_strtol_l.isra.0+0xee>
 800a1e2:	2e10      	cmp	r6, #16
 800a1e4:	d109      	bne.n	800a1fa <_strtol_l.isra.0+0x4a>
 800a1e6:	2c30      	cmp	r4, #48	; 0x30
 800a1e8:	d107      	bne.n	800a1fa <_strtol_l.isra.0+0x4a>
 800a1ea:	782b      	ldrb	r3, [r5, #0]
 800a1ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1f0:	2b58      	cmp	r3, #88	; 0x58
 800a1f2:	d14f      	bne.n	800a294 <_strtol_l.isra.0+0xe4>
 800a1f4:	786c      	ldrb	r4, [r5, #1]
 800a1f6:	2610      	movs	r6, #16
 800a1f8:	3502      	adds	r5, #2
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	bf14      	ite	ne
 800a1fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a202:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a206:	2700      	movs	r7, #0
 800a208:	fbb1 fcf6 	udiv	ip, r1, r6
 800a20c:	4638      	mov	r0, r7
 800a20e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a212:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a216:	2b09      	cmp	r3, #9
 800a218:	d817      	bhi.n	800a24a <_strtol_l.isra.0+0x9a>
 800a21a:	461c      	mov	r4, r3
 800a21c:	42a6      	cmp	r6, r4
 800a21e:	dd23      	ble.n	800a268 <_strtol_l.isra.0+0xb8>
 800a220:	1c7b      	adds	r3, r7, #1
 800a222:	d007      	beq.n	800a234 <_strtol_l.isra.0+0x84>
 800a224:	4584      	cmp	ip, r0
 800a226:	d31c      	bcc.n	800a262 <_strtol_l.isra.0+0xb2>
 800a228:	d101      	bne.n	800a22e <_strtol_l.isra.0+0x7e>
 800a22a:	45a6      	cmp	lr, r4
 800a22c:	db19      	blt.n	800a262 <_strtol_l.isra.0+0xb2>
 800a22e:	fb00 4006 	mla	r0, r0, r6, r4
 800a232:	2701      	movs	r7, #1
 800a234:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a238:	e7eb      	b.n	800a212 <_strtol_l.isra.0+0x62>
 800a23a:	462f      	mov	r7, r5
 800a23c:	e7bf      	b.n	800a1be <_strtol_l.isra.0+0xe>
 800a23e:	2c2b      	cmp	r4, #43	; 0x2b
 800a240:	bf04      	itt	eq
 800a242:	1cbd      	addeq	r5, r7, #2
 800a244:	787c      	ldrbeq	r4, [r7, #1]
 800a246:	461a      	mov	r2, r3
 800a248:	e7c9      	b.n	800a1de <_strtol_l.isra.0+0x2e>
 800a24a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a24e:	2b19      	cmp	r3, #25
 800a250:	d801      	bhi.n	800a256 <_strtol_l.isra.0+0xa6>
 800a252:	3c37      	subs	r4, #55	; 0x37
 800a254:	e7e2      	b.n	800a21c <_strtol_l.isra.0+0x6c>
 800a256:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a25a:	2b19      	cmp	r3, #25
 800a25c:	d804      	bhi.n	800a268 <_strtol_l.isra.0+0xb8>
 800a25e:	3c57      	subs	r4, #87	; 0x57
 800a260:	e7dc      	b.n	800a21c <_strtol_l.isra.0+0x6c>
 800a262:	f04f 37ff 	mov.w	r7, #4294967295
 800a266:	e7e5      	b.n	800a234 <_strtol_l.isra.0+0x84>
 800a268:	1c7b      	adds	r3, r7, #1
 800a26a:	d108      	bne.n	800a27e <_strtol_l.isra.0+0xce>
 800a26c:	2322      	movs	r3, #34	; 0x22
 800a26e:	f8c8 3000 	str.w	r3, [r8]
 800a272:	4608      	mov	r0, r1
 800a274:	f1ba 0f00 	cmp.w	sl, #0
 800a278:	d107      	bne.n	800a28a <_strtol_l.isra.0+0xda>
 800a27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27e:	b102      	cbz	r2, 800a282 <_strtol_l.isra.0+0xd2>
 800a280:	4240      	negs	r0, r0
 800a282:	f1ba 0f00 	cmp.w	sl, #0
 800a286:	d0f8      	beq.n	800a27a <_strtol_l.isra.0+0xca>
 800a288:	b10f      	cbz	r7, 800a28e <_strtol_l.isra.0+0xde>
 800a28a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a28e:	f8ca 9000 	str.w	r9, [sl]
 800a292:	e7f2      	b.n	800a27a <_strtol_l.isra.0+0xca>
 800a294:	2430      	movs	r4, #48	; 0x30
 800a296:	2e00      	cmp	r6, #0
 800a298:	d1af      	bne.n	800a1fa <_strtol_l.isra.0+0x4a>
 800a29a:	2608      	movs	r6, #8
 800a29c:	e7ad      	b.n	800a1fa <_strtol_l.isra.0+0x4a>
 800a29e:	2c30      	cmp	r4, #48	; 0x30
 800a2a0:	d0a3      	beq.n	800a1ea <_strtol_l.isra.0+0x3a>
 800a2a2:	260a      	movs	r6, #10
 800a2a4:	e7a9      	b.n	800a1fa <_strtol_l.isra.0+0x4a>
	...

0800a2a8 <_strtol_r>:
 800a2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2aa:	4c06      	ldr	r4, [pc, #24]	; (800a2c4 <_strtol_r+0x1c>)
 800a2ac:	4d06      	ldr	r5, [pc, #24]	; (800a2c8 <_strtol_r+0x20>)
 800a2ae:	6824      	ldr	r4, [r4, #0]
 800a2b0:	6a24      	ldr	r4, [r4, #32]
 800a2b2:	2c00      	cmp	r4, #0
 800a2b4:	bf08      	it	eq
 800a2b6:	462c      	moveq	r4, r5
 800a2b8:	9400      	str	r4, [sp, #0]
 800a2ba:	f7ff ff79 	bl	800a1b0 <_strtol_l.isra.0>
 800a2be:	b003      	add	sp, #12
 800a2c0:	bd30      	pop	{r4, r5, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000010 	.word	0x20000010
 800a2c8:	20000074 	.word	0x20000074

0800a2cc <quorem>:
 800a2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	6903      	ldr	r3, [r0, #16]
 800a2d2:	690c      	ldr	r4, [r1, #16]
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	f2c0 8082 	blt.w	800a3e0 <quorem+0x114>
 800a2dc:	3c01      	subs	r4, #1
 800a2de:	f101 0714 	add.w	r7, r1, #20
 800a2e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a2e6:	f100 0614 	add.w	r6, r0, #20
 800a2ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a2ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a2f2:	eb06 030c 	add.w	r3, r6, ip
 800a2f6:	3501      	adds	r5, #1
 800a2f8:	eb07 090c 	add.w	r9, r7, ip
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800a302:	b395      	cbz	r5, 800a36a <quorem+0x9e>
 800a304:	f04f 0a00 	mov.w	sl, #0
 800a308:	4638      	mov	r0, r7
 800a30a:	46b6      	mov	lr, r6
 800a30c:	46d3      	mov	fp, sl
 800a30e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a312:	b293      	uxth	r3, r2
 800a314:	fb05 a303 	mla	r3, r5, r3, sl
 800a318:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	ebab 0303 	sub.w	r3, fp, r3
 800a322:	0c12      	lsrs	r2, r2, #16
 800a324:	f8de b000 	ldr.w	fp, [lr]
 800a328:	fb05 a202 	mla	r2, r5, r2, sl
 800a32c:	fa13 f38b 	uxtah	r3, r3, fp
 800a330:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a334:	fa1f fb82 	uxth.w	fp, r2
 800a338:	f8de 2000 	ldr.w	r2, [lr]
 800a33c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a344:	b29b      	uxth	r3, r3
 800a346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a34a:	4581      	cmp	r9, r0
 800a34c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a350:	f84e 3b04 	str.w	r3, [lr], #4
 800a354:	d2db      	bcs.n	800a30e <quorem+0x42>
 800a356:	f856 300c 	ldr.w	r3, [r6, ip]
 800a35a:	b933      	cbnz	r3, 800a36a <quorem+0x9e>
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	3b04      	subs	r3, #4
 800a360:	429e      	cmp	r6, r3
 800a362:	461a      	mov	r2, r3
 800a364:	d330      	bcc.n	800a3c8 <quorem+0xfc>
 800a366:	f8c8 4010 	str.w	r4, [r8, #16]
 800a36a:	4640      	mov	r0, r8
 800a36c:	f001 fba6 	bl	800babc <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	db25      	blt.n	800a3c0 <quorem+0xf4>
 800a374:	3501      	adds	r5, #1
 800a376:	4630      	mov	r0, r6
 800a378:	f04f 0c00 	mov.w	ip, #0
 800a37c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a380:	f8d0 e000 	ldr.w	lr, [r0]
 800a384:	b293      	uxth	r3, r2
 800a386:	ebac 0303 	sub.w	r3, ip, r3
 800a38a:	0c12      	lsrs	r2, r2, #16
 800a38c:	fa13 f38e 	uxtah	r3, r3, lr
 800a390:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a398:	b29b      	uxth	r3, r3
 800a39a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39e:	45b9      	cmp	r9, r7
 800a3a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3a4:	f840 3b04 	str.w	r3, [r0], #4
 800a3a8:	d2e8      	bcs.n	800a37c <quorem+0xb0>
 800a3aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a3ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a3b2:	b92a      	cbnz	r2, 800a3c0 <quorem+0xf4>
 800a3b4:	3b04      	subs	r3, #4
 800a3b6:	429e      	cmp	r6, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	d30b      	bcc.n	800a3d4 <quorem+0x108>
 800a3bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	b003      	add	sp, #12
 800a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	3b04      	subs	r3, #4
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d1ca      	bne.n	800a366 <quorem+0x9a>
 800a3d0:	3c01      	subs	r4, #1
 800a3d2:	e7c5      	b.n	800a360 <quorem+0x94>
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	3b04      	subs	r3, #4
 800a3d8:	2a00      	cmp	r2, #0
 800a3da:	d1ef      	bne.n	800a3bc <quorem+0xf0>
 800a3dc:	3c01      	subs	r4, #1
 800a3de:	e7ea      	b.n	800a3b6 <quorem+0xea>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7ee      	b.n	800a3c2 <quorem+0xf6>
 800a3e4:	0000      	movs	r0, r0
	...

0800a3e8 <_dtoa_r>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	ec57 6b10 	vmov	r6, r7, d0
 800a3f0:	b097      	sub	sp, #92	; 0x5c
 800a3f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3f4:	9106      	str	r1, [sp, #24]
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a3fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a400:	e9cd 6700 	strd	r6, r7, [sp]
 800a404:	b93d      	cbnz	r5, 800a416 <_dtoa_r+0x2e>
 800a406:	2010      	movs	r0, #16
 800a408:	f001 f8e0 	bl	800b5cc <malloc>
 800a40c:	6260      	str	r0, [r4, #36]	; 0x24
 800a40e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a412:	6005      	str	r5, [r0, #0]
 800a414:	60c5      	str	r5, [r0, #12]
 800a416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a418:	6819      	ldr	r1, [r3, #0]
 800a41a:	b151      	cbz	r1, 800a432 <_dtoa_r+0x4a>
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	604a      	str	r2, [r1, #4]
 800a420:	2301      	movs	r3, #1
 800a422:	4093      	lsls	r3, r2
 800a424:	608b      	str	r3, [r1, #8]
 800a426:	4620      	mov	r0, r4
 800a428:	f001 f929 	bl	800b67e <_Bfree>
 800a42c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a42e:	2200      	movs	r2, #0
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	1e3b      	subs	r3, r7, #0
 800a434:	bfbb      	ittet	lt
 800a436:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a43a:	9301      	strlt	r3, [sp, #4]
 800a43c:	2300      	movge	r3, #0
 800a43e:	2201      	movlt	r2, #1
 800a440:	bfac      	ite	ge
 800a442:	f8c8 3000 	strge.w	r3, [r8]
 800a446:	f8c8 2000 	strlt.w	r2, [r8]
 800a44a:	4baf      	ldr	r3, [pc, #700]	; (800a708 <_dtoa_r+0x320>)
 800a44c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a450:	ea33 0308 	bics.w	r3, r3, r8
 800a454:	d114      	bne.n	800a480 <_dtoa_r+0x98>
 800a456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a458:	f242 730f 	movw	r3, #9999	; 0x270f
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	9b00      	ldr	r3, [sp, #0]
 800a460:	b923      	cbnz	r3, 800a46c <_dtoa_r+0x84>
 800a462:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a466:	2800      	cmp	r0, #0
 800a468:	f000 8542 	beq.w	800aef0 <_dtoa_r+0xb08>
 800a46c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a46e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a71c <_dtoa_r+0x334>
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 8544 	beq.w	800af00 <_dtoa_r+0xb18>
 800a478:	f10b 0303 	add.w	r3, fp, #3
 800a47c:	f000 bd3e 	b.w	800aefc <_dtoa_r+0xb14>
 800a480:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a484:	2200      	movs	r2, #0
 800a486:	2300      	movs	r3, #0
 800a488:	4630      	mov	r0, r6
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 fb3c 	bl	8000b08 <__aeabi_dcmpeq>
 800a490:	4681      	mov	r9, r0
 800a492:	b168      	cbz	r0, 800a4b0 <_dtoa_r+0xc8>
 800a494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a496:	2301      	movs	r3, #1
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 8524 	beq.w	800aeea <_dtoa_r+0xb02>
 800a4a2:	4b9a      	ldr	r3, [pc, #616]	; (800a70c <_dtoa_r+0x324>)
 800a4a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	f000 bd28 	b.w	800af00 <_dtoa_r+0xb18>
 800a4b0:	aa14      	add	r2, sp, #80	; 0x50
 800a4b2:	a915      	add	r1, sp, #84	; 0x54
 800a4b4:	ec47 6b10 	vmov	d0, r6, r7
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f001 fbed 	bl	800bc98 <__d2b>
 800a4be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a4c2:	9004      	str	r0, [sp, #16]
 800a4c4:	2d00      	cmp	r5, #0
 800a4c6:	d07c      	beq.n	800a5c2 <_dtoa_r+0x1da>
 800a4c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a4d0:	46b2      	mov	sl, r6
 800a4d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a4d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a4de:	2200      	movs	r2, #0
 800a4e0:	4b8b      	ldr	r3, [pc, #556]	; (800a710 <_dtoa_r+0x328>)
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	f7f5 feef 	bl	80002c8 <__aeabi_dsub>
 800a4ea:	a381      	add	r3, pc, #516	; (adr r3, 800a6f0 <_dtoa_r+0x308>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f6 f8a2 	bl	8000638 <__aeabi_dmul>
 800a4f4:	a380      	add	r3, pc, #512	; (adr r3, 800a6f8 <_dtoa_r+0x310>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f7f5 fee7 	bl	80002cc <__adddf3>
 800a4fe:	4606      	mov	r6, r0
 800a500:	4628      	mov	r0, r5
 800a502:	460f      	mov	r7, r1
 800a504:	f7f6 f82e 	bl	8000564 <__aeabi_i2d>
 800a508:	a37d      	add	r3, pc, #500	; (adr r3, 800a700 <_dtoa_r+0x318>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f6 f893 	bl	8000638 <__aeabi_dmul>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4630      	mov	r0, r6
 800a518:	4639      	mov	r1, r7
 800a51a:	f7f5 fed7 	bl	80002cc <__adddf3>
 800a51e:	4606      	mov	r6, r0
 800a520:	460f      	mov	r7, r1
 800a522:	f7f6 fb39 	bl	8000b98 <__aeabi_d2iz>
 800a526:	2200      	movs	r2, #0
 800a528:	4682      	mov	sl, r0
 800a52a:	2300      	movs	r3, #0
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f6 faf4 	bl	8000b1c <__aeabi_dcmplt>
 800a534:	b148      	cbz	r0, 800a54a <_dtoa_r+0x162>
 800a536:	4650      	mov	r0, sl
 800a538:	f7f6 f814 	bl	8000564 <__aeabi_i2d>
 800a53c:	4632      	mov	r2, r6
 800a53e:	463b      	mov	r3, r7
 800a540:	f7f6 fae2 	bl	8000b08 <__aeabi_dcmpeq>
 800a544:	b908      	cbnz	r0, 800a54a <_dtoa_r+0x162>
 800a546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a54a:	f1ba 0f16 	cmp.w	sl, #22
 800a54e:	d859      	bhi.n	800a604 <_dtoa_r+0x21c>
 800a550:	4970      	ldr	r1, [pc, #448]	; (800a714 <_dtoa_r+0x32c>)
 800a552:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a55a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a55e:	f7f6 fafb 	bl	8000b58 <__aeabi_dcmpgt>
 800a562:	2800      	cmp	r0, #0
 800a564:	d050      	beq.n	800a608 <_dtoa_r+0x220>
 800a566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a56a:	2300      	movs	r3, #0
 800a56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a56e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a570:	1b5d      	subs	r5, r3, r5
 800a572:	f1b5 0801 	subs.w	r8, r5, #1
 800a576:	bf49      	itett	mi
 800a578:	f1c5 0301 	rsbmi	r3, r5, #1
 800a57c:	2300      	movpl	r3, #0
 800a57e:	9305      	strmi	r3, [sp, #20]
 800a580:	f04f 0800 	movmi.w	r8, #0
 800a584:	bf58      	it	pl
 800a586:	9305      	strpl	r3, [sp, #20]
 800a588:	f1ba 0f00 	cmp.w	sl, #0
 800a58c:	db3e      	blt.n	800a60c <_dtoa_r+0x224>
 800a58e:	2300      	movs	r3, #0
 800a590:	44d0      	add	r8, sl
 800a592:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a596:	9307      	str	r3, [sp, #28]
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	2b09      	cmp	r3, #9
 800a59c:	f200 8090 	bhi.w	800a6c0 <_dtoa_r+0x2d8>
 800a5a0:	2b05      	cmp	r3, #5
 800a5a2:	bfc4      	itt	gt
 800a5a4:	3b04      	subgt	r3, #4
 800a5a6:	9306      	strgt	r3, [sp, #24]
 800a5a8:	9b06      	ldr	r3, [sp, #24]
 800a5aa:	f1a3 0302 	sub.w	r3, r3, #2
 800a5ae:	bfcc      	ite	gt
 800a5b0:	2500      	movgt	r5, #0
 800a5b2:	2501      	movle	r5, #1
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	f200 808f 	bhi.w	800a6d8 <_dtoa_r+0x2f0>
 800a5ba:	e8df f003 	tbb	[pc, r3]
 800a5be:	7f7d      	.short	0x7f7d
 800a5c0:	7131      	.short	0x7131
 800a5c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a5c6:	441d      	add	r5, r3
 800a5c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a5cc:	2820      	cmp	r0, #32
 800a5ce:	dd13      	ble.n	800a5f8 <_dtoa_r+0x210>
 800a5d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a5d4:	9b00      	ldr	r3, [sp, #0]
 800a5d6:	fa08 f800 	lsl.w	r8, r8, r0
 800a5da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a5de:	fa23 f000 	lsr.w	r0, r3, r0
 800a5e2:	ea48 0000 	orr.w	r0, r8, r0
 800a5e6:	f7f5 ffad 	bl	8000544 <__aeabi_ui2d>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4682      	mov	sl, r0
 800a5ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a5f2:	3d01      	subs	r5, #1
 800a5f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a5f6:	e772      	b.n	800a4de <_dtoa_r+0xf6>
 800a5f8:	9b00      	ldr	r3, [sp, #0]
 800a5fa:	f1c0 0020 	rsb	r0, r0, #32
 800a5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a602:	e7f0      	b.n	800a5e6 <_dtoa_r+0x1fe>
 800a604:	2301      	movs	r3, #1
 800a606:	e7b1      	b.n	800a56c <_dtoa_r+0x184>
 800a608:	900f      	str	r0, [sp, #60]	; 0x3c
 800a60a:	e7b0      	b.n	800a56e <_dtoa_r+0x186>
 800a60c:	9b05      	ldr	r3, [sp, #20]
 800a60e:	eba3 030a 	sub.w	r3, r3, sl
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	f1ca 0300 	rsb	r3, sl, #0
 800a618:	9307      	str	r3, [sp, #28]
 800a61a:	2300      	movs	r3, #0
 800a61c:	930e      	str	r3, [sp, #56]	; 0x38
 800a61e:	e7bb      	b.n	800a598 <_dtoa_r+0x1b0>
 800a620:	2301      	movs	r3, #1
 800a622:	930a      	str	r3, [sp, #40]	; 0x28
 800a624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	dd59      	ble.n	800a6de <_dtoa_r+0x2f6>
 800a62a:	9302      	str	r3, [sp, #8]
 800a62c:	4699      	mov	r9, r3
 800a62e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a630:	2200      	movs	r2, #0
 800a632:	6072      	str	r2, [r6, #4]
 800a634:	2204      	movs	r2, #4
 800a636:	f102 0014 	add.w	r0, r2, #20
 800a63a:	4298      	cmp	r0, r3
 800a63c:	6871      	ldr	r1, [r6, #4]
 800a63e:	d953      	bls.n	800a6e8 <_dtoa_r+0x300>
 800a640:	4620      	mov	r0, r4
 800a642:	f000 ffe8 	bl	800b616 <_Balloc>
 800a646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a648:	6030      	str	r0, [r6, #0]
 800a64a:	f1b9 0f0e 	cmp.w	r9, #14
 800a64e:	f8d3 b000 	ldr.w	fp, [r3]
 800a652:	f200 80e6 	bhi.w	800a822 <_dtoa_r+0x43a>
 800a656:	2d00      	cmp	r5, #0
 800a658:	f000 80e3 	beq.w	800a822 <_dtoa_r+0x43a>
 800a65c:	ed9d 7b00 	vldr	d7, [sp]
 800a660:	f1ba 0f00 	cmp.w	sl, #0
 800a664:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a668:	dd74      	ble.n	800a754 <_dtoa_r+0x36c>
 800a66a:	4a2a      	ldr	r2, [pc, #168]	; (800a714 <_dtoa_r+0x32c>)
 800a66c:	f00a 030f 	and.w	r3, sl, #15
 800a670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a674:	ed93 7b00 	vldr	d7, [r3]
 800a678:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a67c:	06f0      	lsls	r0, r6, #27
 800a67e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a682:	d565      	bpl.n	800a750 <_dtoa_r+0x368>
 800a684:	4b24      	ldr	r3, [pc, #144]	; (800a718 <_dtoa_r+0x330>)
 800a686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a68a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a68e:	f7f6 f8fd 	bl	800088c <__aeabi_ddiv>
 800a692:	e9cd 0100 	strd	r0, r1, [sp]
 800a696:	f006 060f 	and.w	r6, r6, #15
 800a69a:	2503      	movs	r5, #3
 800a69c:	4f1e      	ldr	r7, [pc, #120]	; (800a718 <_dtoa_r+0x330>)
 800a69e:	e04c      	b.n	800a73a <_dtoa_r+0x352>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a6:	4453      	add	r3, sl
 800a6a8:	f103 0901 	add.w	r9, r3, #1
 800a6ac:	9302      	str	r3, [sp, #8]
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	bfb8      	it	lt
 800a6b4:	2301      	movlt	r3, #1
 800a6b6:	e7ba      	b.n	800a62e <_dtoa_r+0x246>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e7b2      	b.n	800a622 <_dtoa_r+0x23a>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e7f0      	b.n	800a6a2 <_dtoa_r+0x2ba>
 800a6c0:	2501      	movs	r5, #1
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9306      	str	r3, [sp, #24]
 800a6c6:	950a      	str	r5, [sp, #40]	; 0x28
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6cc:	9302      	str	r3, [sp, #8]
 800a6ce:	4699      	mov	r9, r3
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2312      	movs	r3, #18
 800a6d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6d6:	e7aa      	b.n	800a62e <_dtoa_r+0x246>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	930a      	str	r3, [sp, #40]	; 0x28
 800a6dc:	e7f4      	b.n	800a6c8 <_dtoa_r+0x2e0>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	9302      	str	r3, [sp, #8]
 800a6e2:	4699      	mov	r9, r3
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	e7f5      	b.n	800a6d4 <_dtoa_r+0x2ec>
 800a6e8:	3101      	adds	r1, #1
 800a6ea:	6071      	str	r1, [r6, #4]
 800a6ec:	0052      	lsls	r2, r2, #1
 800a6ee:	e7a2      	b.n	800a636 <_dtoa_r+0x24e>
 800a6f0:	636f4361 	.word	0x636f4361
 800a6f4:	3fd287a7 	.word	0x3fd287a7
 800a6f8:	8b60c8b3 	.word	0x8b60c8b3
 800a6fc:	3fc68a28 	.word	0x3fc68a28
 800a700:	509f79fb 	.word	0x509f79fb
 800a704:	3fd34413 	.word	0x3fd34413
 800a708:	7ff00000 	.word	0x7ff00000
 800a70c:	0800cb65 	.word	0x0800cb65
 800a710:	3ff80000 	.word	0x3ff80000
 800a714:	0800cc20 	.word	0x0800cc20
 800a718:	0800cbf8 	.word	0x0800cbf8
 800a71c:	0800cbe9 	.word	0x0800cbe9
 800a720:	07f1      	lsls	r1, r6, #31
 800a722:	d508      	bpl.n	800a736 <_dtoa_r+0x34e>
 800a724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72c:	f7f5 ff84 	bl	8000638 <__aeabi_dmul>
 800a730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a734:	3501      	adds	r5, #1
 800a736:	1076      	asrs	r6, r6, #1
 800a738:	3708      	adds	r7, #8
 800a73a:	2e00      	cmp	r6, #0
 800a73c:	d1f0      	bne.n	800a720 <_dtoa_r+0x338>
 800a73e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a742:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a746:	f7f6 f8a1 	bl	800088c <__aeabi_ddiv>
 800a74a:	e9cd 0100 	strd	r0, r1, [sp]
 800a74e:	e01a      	b.n	800a786 <_dtoa_r+0x39e>
 800a750:	2502      	movs	r5, #2
 800a752:	e7a3      	b.n	800a69c <_dtoa_r+0x2b4>
 800a754:	f000 80a0 	beq.w	800a898 <_dtoa_r+0x4b0>
 800a758:	f1ca 0600 	rsb	r6, sl, #0
 800a75c:	4b9f      	ldr	r3, [pc, #636]	; (800a9dc <_dtoa_r+0x5f4>)
 800a75e:	4fa0      	ldr	r7, [pc, #640]	; (800a9e0 <_dtoa_r+0x5f8>)
 800a760:	f006 020f 	and.w	r2, r6, #15
 800a764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a770:	f7f5 ff62 	bl	8000638 <__aeabi_dmul>
 800a774:	e9cd 0100 	strd	r0, r1, [sp]
 800a778:	1136      	asrs	r6, r6, #4
 800a77a:	2300      	movs	r3, #0
 800a77c:	2502      	movs	r5, #2
 800a77e:	2e00      	cmp	r6, #0
 800a780:	d17f      	bne.n	800a882 <_dtoa_r+0x49a>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e1      	bne.n	800a74a <_dtoa_r+0x362>
 800a786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 8087 	beq.w	800a89c <_dtoa_r+0x4b4>
 800a78e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a792:	2200      	movs	r2, #0
 800a794:	4b93      	ldr	r3, [pc, #588]	; (800a9e4 <_dtoa_r+0x5fc>)
 800a796:	4630      	mov	r0, r6
 800a798:	4639      	mov	r1, r7
 800a79a:	f7f6 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d07c      	beq.n	800a89c <_dtoa_r+0x4b4>
 800a7a2:	f1b9 0f00 	cmp.w	r9, #0
 800a7a6:	d079      	beq.n	800a89c <_dtoa_r+0x4b4>
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dd35      	ble.n	800a81a <_dtoa_r+0x432>
 800a7ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7b2:	9308      	str	r3, [sp, #32]
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4b8b      	ldr	r3, [pc, #556]	; (800a9e8 <_dtoa_r+0x600>)
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7f5 ff3c 	bl	8000638 <__aeabi_dmul>
 800a7c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a7c4:	9f02      	ldr	r7, [sp, #8]
 800a7c6:	3501      	adds	r5, #1
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f7f5 fecb 	bl	8000564 <__aeabi_i2d>
 800a7ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7d2:	f7f5 ff31 	bl	8000638 <__aeabi_dmul>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4b84      	ldr	r3, [pc, #528]	; (800a9ec <_dtoa_r+0x604>)
 800a7da:	f7f5 fd77 	bl	80002cc <__adddf3>
 800a7de:	4605      	mov	r5, r0
 800a7e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a7e4:	2f00      	cmp	r7, #0
 800a7e6:	d15d      	bne.n	800a8a4 <_dtoa_r+0x4bc>
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4b81      	ldr	r3, [pc, #516]	; (800a9f0 <_dtoa_r+0x608>)
 800a7ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7f0:	f7f5 fd6a 	bl	80002c8 <__aeabi_dsub>
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	4633      	mov	r3, r6
 800a7f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a7fc:	f7f6 f9ac 	bl	8000b58 <__aeabi_dcmpgt>
 800a800:	2800      	cmp	r0, #0
 800a802:	f040 8288 	bne.w	800ad16 <_dtoa_r+0x92e>
 800a806:	462a      	mov	r2, r5
 800a808:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a810:	f7f6 f984 	bl	8000b1c <__aeabi_dcmplt>
 800a814:	2800      	cmp	r0, #0
 800a816:	f040 827c 	bne.w	800ad12 <_dtoa_r+0x92a>
 800a81a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a81e:	e9cd 2300 	strd	r2, r3, [sp]
 800a822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a824:	2b00      	cmp	r3, #0
 800a826:	f2c0 8150 	blt.w	800aaca <_dtoa_r+0x6e2>
 800a82a:	f1ba 0f0e 	cmp.w	sl, #14
 800a82e:	f300 814c 	bgt.w	800aaca <_dtoa_r+0x6e2>
 800a832:	4b6a      	ldr	r3, [pc, #424]	; (800a9dc <_dtoa_r+0x5f4>)
 800a834:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a838:	ed93 7b00 	vldr	d7, [r3]
 800a83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a844:	f280 80d8 	bge.w	800a9f8 <_dtoa_r+0x610>
 800a848:	f1b9 0f00 	cmp.w	r9, #0
 800a84c:	f300 80d4 	bgt.w	800a9f8 <_dtoa_r+0x610>
 800a850:	f040 825e 	bne.w	800ad10 <_dtoa_r+0x928>
 800a854:	2200      	movs	r2, #0
 800a856:	4b66      	ldr	r3, [pc, #408]	; (800a9f0 <_dtoa_r+0x608>)
 800a858:	ec51 0b17 	vmov	r0, r1, d7
 800a85c:	f7f5 feec 	bl	8000638 <__aeabi_dmul>
 800a860:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a864:	f7f6 f96e 	bl	8000b44 <__aeabi_dcmpge>
 800a868:	464f      	mov	r7, r9
 800a86a:	464e      	mov	r6, r9
 800a86c:	2800      	cmp	r0, #0
 800a86e:	f040 8234 	bne.w	800acda <_dtoa_r+0x8f2>
 800a872:	2331      	movs	r3, #49	; 0x31
 800a874:	f10b 0501 	add.w	r5, fp, #1
 800a878:	f88b 3000 	strb.w	r3, [fp]
 800a87c:	f10a 0a01 	add.w	sl, sl, #1
 800a880:	e22f      	b.n	800ace2 <_dtoa_r+0x8fa>
 800a882:	07f2      	lsls	r2, r6, #31
 800a884:	d505      	bpl.n	800a892 <_dtoa_r+0x4aa>
 800a886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88a:	f7f5 fed5 	bl	8000638 <__aeabi_dmul>
 800a88e:	3501      	adds	r5, #1
 800a890:	2301      	movs	r3, #1
 800a892:	1076      	asrs	r6, r6, #1
 800a894:	3708      	adds	r7, #8
 800a896:	e772      	b.n	800a77e <_dtoa_r+0x396>
 800a898:	2502      	movs	r5, #2
 800a89a:	e774      	b.n	800a786 <_dtoa_r+0x39e>
 800a89c:	f8cd a020 	str.w	sl, [sp, #32]
 800a8a0:	464f      	mov	r7, r9
 800a8a2:	e791      	b.n	800a7c8 <_dtoa_r+0x3e0>
 800a8a4:	4b4d      	ldr	r3, [pc, #308]	; (800a9dc <_dtoa_r+0x5f4>)
 800a8a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d047      	beq.n	800a944 <_dtoa_r+0x55c>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	494e      	ldr	r1, [pc, #312]	; (800a9f4 <_dtoa_r+0x60c>)
 800a8bc:	f7f5 ffe6 	bl	800088c <__aeabi_ddiv>
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	4633      	mov	r3, r6
 800a8c4:	f7f5 fd00 	bl	80002c8 <__aeabi_dsub>
 800a8c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a8cc:	465d      	mov	r5, fp
 800a8ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d2:	f7f6 f961 	bl	8000b98 <__aeabi_d2iz>
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	f7f5 fe44 	bl	8000564 <__aeabi_i2d>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8e4:	f7f5 fcf0 	bl	80002c8 <__aeabi_dsub>
 800a8e8:	3630      	adds	r6, #48	; 0x30
 800a8ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a8f6:	f7f6 f911 	bl	8000b1c <__aeabi_dcmplt>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d163      	bne.n	800a9c6 <_dtoa_r+0x5de>
 800a8fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a902:	2000      	movs	r0, #0
 800a904:	4937      	ldr	r1, [pc, #220]	; (800a9e4 <_dtoa_r+0x5fc>)
 800a906:	f7f5 fcdf 	bl	80002c8 <__aeabi_dsub>
 800a90a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a90e:	f7f6 f905 	bl	8000b1c <__aeabi_dcmplt>
 800a912:	2800      	cmp	r0, #0
 800a914:	f040 80b7 	bne.w	800aa86 <_dtoa_r+0x69e>
 800a918:	eba5 030b 	sub.w	r3, r5, fp
 800a91c:	429f      	cmp	r7, r3
 800a91e:	f77f af7c 	ble.w	800a81a <_dtoa_r+0x432>
 800a922:	2200      	movs	r2, #0
 800a924:	4b30      	ldr	r3, [pc, #192]	; (800a9e8 <_dtoa_r+0x600>)
 800a926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a92a:	f7f5 fe85 	bl	8000638 <__aeabi_dmul>
 800a92e:	2200      	movs	r2, #0
 800a930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a934:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <_dtoa_r+0x600>)
 800a936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a93a:	f7f5 fe7d 	bl	8000638 <__aeabi_dmul>
 800a93e:	e9cd 0100 	strd	r0, r1, [sp]
 800a942:	e7c4      	b.n	800a8ce <_dtoa_r+0x4e6>
 800a944:	462a      	mov	r2, r5
 800a946:	4633      	mov	r3, r6
 800a948:	f7f5 fe76 	bl	8000638 <__aeabi_dmul>
 800a94c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a950:	eb0b 0507 	add.w	r5, fp, r7
 800a954:	465e      	mov	r6, fp
 800a956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a95a:	f7f6 f91d 	bl	8000b98 <__aeabi_d2iz>
 800a95e:	4607      	mov	r7, r0
 800a960:	f7f5 fe00 	bl	8000564 <__aeabi_i2d>
 800a964:	3730      	adds	r7, #48	; 0x30
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a96e:	f7f5 fcab 	bl	80002c8 <__aeabi_dsub>
 800a972:	f806 7b01 	strb.w	r7, [r6], #1
 800a976:	42ae      	cmp	r6, r5
 800a978:	e9cd 0100 	strd	r0, r1, [sp]
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	d126      	bne.n	800a9d0 <_dtoa_r+0x5e8>
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <_dtoa_r+0x60c>)
 800a984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a988:	f7f5 fca0 	bl	80002cc <__adddf3>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a994:	f7f6 f8e0 	bl	8000b58 <__aeabi_dcmpgt>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d174      	bne.n	800aa86 <_dtoa_r+0x69e>
 800a99c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	4914      	ldr	r1, [pc, #80]	; (800a9f4 <_dtoa_r+0x60c>)
 800a9a4:	f7f5 fc90 	bl	80002c8 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9b0:	f7f6 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	f43f af30 	beq.w	800a81a <_dtoa_r+0x432>
 800a9ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9be:	2b30      	cmp	r3, #48	; 0x30
 800a9c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a9c4:	d002      	beq.n	800a9cc <_dtoa_r+0x5e4>
 800a9c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a9ca:	e04a      	b.n	800aa62 <_dtoa_r+0x67a>
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	e7f4      	b.n	800a9ba <_dtoa_r+0x5d2>
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <_dtoa_r+0x600>)
 800a9d2:	f7f5 fe31 	bl	8000638 <__aeabi_dmul>
 800a9d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a9da:	e7bc      	b.n	800a956 <_dtoa_r+0x56e>
 800a9dc:	0800cc20 	.word	0x0800cc20
 800a9e0:	0800cbf8 	.word	0x0800cbf8
 800a9e4:	3ff00000 	.word	0x3ff00000
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	401c0000 	.word	0x401c0000
 800a9f0:	40140000 	.word	0x40140000
 800a9f4:	3fe00000 	.word	0x3fe00000
 800a9f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9fc:	465d      	mov	r5, fp
 800a9fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	f7f5 ff41 	bl	800088c <__aeabi_ddiv>
 800aa0a:	f7f6 f8c5 	bl	8000b98 <__aeabi_d2iz>
 800aa0e:	4680      	mov	r8, r0
 800aa10:	f7f5 fda8 	bl	8000564 <__aeabi_i2d>
 800aa14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa18:	f7f5 fe0e 	bl	8000638 <__aeabi_dmul>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4630      	mov	r0, r6
 800aa22:	4639      	mov	r1, r7
 800aa24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aa28:	f7f5 fc4e 	bl	80002c8 <__aeabi_dsub>
 800aa2c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa30:	eba5 060b 	sub.w	r6, r5, fp
 800aa34:	45b1      	cmp	r9, r6
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	d139      	bne.n	800aab0 <_dtoa_r+0x6c8>
 800aa3c:	f7f5 fc46 	bl	80002cc <__adddf3>
 800aa40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa44:	4606      	mov	r6, r0
 800aa46:	460f      	mov	r7, r1
 800aa48:	f7f6 f886 	bl	8000b58 <__aeabi_dcmpgt>
 800aa4c:	b9c8      	cbnz	r0, 800aa82 <_dtoa_r+0x69a>
 800aa4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f6 f857 	bl	8000b08 <__aeabi_dcmpeq>
 800aa5a:	b110      	cbz	r0, 800aa62 <_dtoa_r+0x67a>
 800aa5c:	f018 0f01 	tst.w	r8, #1
 800aa60:	d10f      	bne.n	800aa82 <_dtoa_r+0x69a>
 800aa62:	9904      	ldr	r1, [sp, #16]
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fe0a 	bl	800b67e <_Bfree>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa6e:	702b      	strb	r3, [r5, #0]
 800aa70:	f10a 0301 	add.w	r3, sl, #1
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8241 	beq.w	800af00 <_dtoa_r+0xb18>
 800aa7e:	601d      	str	r5, [r3, #0]
 800aa80:	e23e      	b.n	800af00 <_dtoa_r+0xb18>
 800aa82:	f8cd a020 	str.w	sl, [sp, #32]
 800aa86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa8a:	2a39      	cmp	r2, #57	; 0x39
 800aa8c:	f105 33ff 	add.w	r3, r5, #4294967295
 800aa90:	d108      	bne.n	800aaa4 <_dtoa_r+0x6bc>
 800aa92:	459b      	cmp	fp, r3
 800aa94:	d10a      	bne.n	800aaac <_dtoa_r+0x6c4>
 800aa96:	9b08      	ldr	r3, [sp, #32]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	9308      	str	r3, [sp, #32]
 800aa9c:	2330      	movs	r3, #48	; 0x30
 800aa9e:	f88b 3000 	strb.w	r3, [fp]
 800aaa2:	465b      	mov	r3, fp
 800aaa4:	781a      	ldrb	r2, [r3, #0]
 800aaa6:	3201      	adds	r2, #1
 800aaa8:	701a      	strb	r2, [r3, #0]
 800aaaa:	e78c      	b.n	800a9c6 <_dtoa_r+0x5de>
 800aaac:	461d      	mov	r5, r3
 800aaae:	e7ea      	b.n	800aa86 <_dtoa_r+0x69e>
 800aab0:	2200      	movs	r2, #0
 800aab2:	4b9b      	ldr	r3, [pc, #620]	; (800ad20 <_dtoa_r+0x938>)
 800aab4:	f7f5 fdc0 	bl	8000638 <__aeabi_dmul>
 800aab8:	2200      	movs	r2, #0
 800aaba:	2300      	movs	r3, #0
 800aabc:	4606      	mov	r6, r0
 800aabe:	460f      	mov	r7, r1
 800aac0:	f7f6 f822 	bl	8000b08 <__aeabi_dcmpeq>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d09a      	beq.n	800a9fe <_dtoa_r+0x616>
 800aac8:	e7cb      	b.n	800aa62 <_dtoa_r+0x67a>
 800aaca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aacc:	2a00      	cmp	r2, #0
 800aace:	f000 808b 	beq.w	800abe8 <_dtoa_r+0x800>
 800aad2:	9a06      	ldr	r2, [sp, #24]
 800aad4:	2a01      	cmp	r2, #1
 800aad6:	dc6e      	bgt.n	800abb6 <_dtoa_r+0x7ce>
 800aad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d067      	beq.n	800abae <_dtoa_r+0x7c6>
 800aade:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aae2:	9f07      	ldr	r7, [sp, #28]
 800aae4:	9d05      	ldr	r5, [sp, #20]
 800aae6:	9a05      	ldr	r2, [sp, #20]
 800aae8:	2101      	movs	r1, #1
 800aaea:	441a      	add	r2, r3
 800aaec:	4620      	mov	r0, r4
 800aaee:	9205      	str	r2, [sp, #20]
 800aaf0:	4498      	add	r8, r3
 800aaf2:	f000 fea2 	bl	800b83a <__i2b>
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	dd0c      	ble.n	800ab16 <_dtoa_r+0x72e>
 800aafc:	f1b8 0f00 	cmp.w	r8, #0
 800ab00:	dd09      	ble.n	800ab16 <_dtoa_r+0x72e>
 800ab02:	4545      	cmp	r5, r8
 800ab04:	9a05      	ldr	r2, [sp, #20]
 800ab06:	462b      	mov	r3, r5
 800ab08:	bfa8      	it	ge
 800ab0a:	4643      	movge	r3, r8
 800ab0c:	1ad2      	subs	r2, r2, r3
 800ab0e:	9205      	str	r2, [sp, #20]
 800ab10:	1aed      	subs	r5, r5, r3
 800ab12:	eba8 0803 	sub.w	r8, r8, r3
 800ab16:	9b07      	ldr	r3, [sp, #28]
 800ab18:	b1eb      	cbz	r3, 800ab56 <_dtoa_r+0x76e>
 800ab1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d067      	beq.n	800abf0 <_dtoa_r+0x808>
 800ab20:	b18f      	cbz	r7, 800ab46 <_dtoa_r+0x75e>
 800ab22:	4631      	mov	r1, r6
 800ab24:	463a      	mov	r2, r7
 800ab26:	4620      	mov	r0, r4
 800ab28:	f000 ff26 	bl	800b978 <__pow5mult>
 800ab2c:	9a04      	ldr	r2, [sp, #16]
 800ab2e:	4601      	mov	r1, r0
 800ab30:	4606      	mov	r6, r0
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fe8a 	bl	800b84c <__multiply>
 800ab38:	9904      	ldr	r1, [sp, #16]
 800ab3a:	9008      	str	r0, [sp, #32]
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 fd9e 	bl	800b67e <_Bfree>
 800ab42:	9b08      	ldr	r3, [sp, #32]
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	9b07      	ldr	r3, [sp, #28]
 800ab48:	1bda      	subs	r2, r3, r7
 800ab4a:	d004      	beq.n	800ab56 <_dtoa_r+0x76e>
 800ab4c:	9904      	ldr	r1, [sp, #16]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 ff12 	bl	800b978 <__pow5mult>
 800ab54:	9004      	str	r0, [sp, #16]
 800ab56:	2101      	movs	r1, #1
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fe6e 	bl	800b83a <__i2b>
 800ab5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab60:	4607      	mov	r7, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 81d0 	beq.w	800af08 <_dtoa_r+0xb20>
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 ff03 	bl	800b978 <__pow5mult>
 800ab72:	9b06      	ldr	r3, [sp, #24]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	4607      	mov	r7, r0
 800ab78:	dc40      	bgt.n	800abfc <_dtoa_r+0x814>
 800ab7a:	9b00      	ldr	r3, [sp, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d139      	bne.n	800abf4 <_dtoa_r+0x80c>
 800ab80:	9b01      	ldr	r3, [sp, #4]
 800ab82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d136      	bne.n	800abf8 <_dtoa_r+0x810>
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab90:	0d1b      	lsrs	r3, r3, #20
 800ab92:	051b      	lsls	r3, r3, #20
 800ab94:	b12b      	cbz	r3, 800aba2 <_dtoa_r+0x7ba>
 800ab96:	9b05      	ldr	r3, [sp, #20]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9305      	str	r3, [sp, #20]
 800ab9c:	f108 0801 	add.w	r8, r8, #1
 800aba0:	2301      	movs	r3, #1
 800aba2:	9307      	str	r3, [sp, #28]
 800aba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d12a      	bne.n	800ac00 <_dtoa_r+0x818>
 800abaa:	2001      	movs	r0, #1
 800abac:	e030      	b.n	800ac10 <_dtoa_r+0x828>
 800abae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abb4:	e795      	b.n	800aae2 <_dtoa_r+0x6fa>
 800abb6:	9b07      	ldr	r3, [sp, #28]
 800abb8:	f109 37ff 	add.w	r7, r9, #4294967295
 800abbc:	42bb      	cmp	r3, r7
 800abbe:	bfbf      	itttt	lt
 800abc0:	9b07      	ldrlt	r3, [sp, #28]
 800abc2:	9707      	strlt	r7, [sp, #28]
 800abc4:	1afa      	sublt	r2, r7, r3
 800abc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800abc8:	bfbb      	ittet	lt
 800abca:	189b      	addlt	r3, r3, r2
 800abcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800abce:	1bdf      	subge	r7, r3, r7
 800abd0:	2700      	movlt	r7, #0
 800abd2:	f1b9 0f00 	cmp.w	r9, #0
 800abd6:	bfb5      	itete	lt
 800abd8:	9b05      	ldrlt	r3, [sp, #20]
 800abda:	9d05      	ldrge	r5, [sp, #20]
 800abdc:	eba3 0509 	sublt.w	r5, r3, r9
 800abe0:	464b      	movge	r3, r9
 800abe2:	bfb8      	it	lt
 800abe4:	2300      	movlt	r3, #0
 800abe6:	e77e      	b.n	800aae6 <_dtoa_r+0x6fe>
 800abe8:	9f07      	ldr	r7, [sp, #28]
 800abea:	9d05      	ldr	r5, [sp, #20]
 800abec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800abee:	e783      	b.n	800aaf8 <_dtoa_r+0x710>
 800abf0:	9a07      	ldr	r2, [sp, #28]
 800abf2:	e7ab      	b.n	800ab4c <_dtoa_r+0x764>
 800abf4:	2300      	movs	r3, #0
 800abf6:	e7d4      	b.n	800aba2 <_dtoa_r+0x7ba>
 800abf8:	9b00      	ldr	r3, [sp, #0]
 800abfa:	e7d2      	b.n	800aba2 <_dtoa_r+0x7ba>
 800abfc:	2300      	movs	r3, #0
 800abfe:	9307      	str	r3, [sp, #28]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ac06:	6918      	ldr	r0, [r3, #16]
 800ac08:	f000 fdc9 	bl	800b79e <__hi0bits>
 800ac0c:	f1c0 0020 	rsb	r0, r0, #32
 800ac10:	4440      	add	r0, r8
 800ac12:	f010 001f 	ands.w	r0, r0, #31
 800ac16:	d047      	beq.n	800aca8 <_dtoa_r+0x8c0>
 800ac18:	f1c0 0320 	rsb	r3, r0, #32
 800ac1c:	2b04      	cmp	r3, #4
 800ac1e:	dd3b      	ble.n	800ac98 <_dtoa_r+0x8b0>
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	f1c0 001c 	rsb	r0, r0, #28
 800ac26:	4403      	add	r3, r0
 800ac28:	9305      	str	r3, [sp, #20]
 800ac2a:	4405      	add	r5, r0
 800ac2c:	4480      	add	r8, r0
 800ac2e:	9b05      	ldr	r3, [sp, #20]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	dd05      	ble.n	800ac40 <_dtoa_r+0x858>
 800ac34:	461a      	mov	r2, r3
 800ac36:	9904      	ldr	r1, [sp, #16]
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 feeb 	bl	800ba14 <__lshift>
 800ac3e:	9004      	str	r0, [sp, #16]
 800ac40:	f1b8 0f00 	cmp.w	r8, #0
 800ac44:	dd05      	ble.n	800ac52 <_dtoa_r+0x86a>
 800ac46:	4639      	mov	r1, r7
 800ac48:	4642      	mov	r2, r8
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fee2 	bl	800ba14 <__lshift>
 800ac50:	4607      	mov	r7, r0
 800ac52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac54:	b353      	cbz	r3, 800acac <_dtoa_r+0x8c4>
 800ac56:	4639      	mov	r1, r7
 800ac58:	9804      	ldr	r0, [sp, #16]
 800ac5a:	f000 ff2f 	bl	800babc <__mcmp>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	da24      	bge.n	800acac <_dtoa_r+0x8c4>
 800ac62:	2300      	movs	r3, #0
 800ac64:	220a      	movs	r2, #10
 800ac66:	9904      	ldr	r1, [sp, #16]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fd1f 	bl	800b6ac <__multadd>
 800ac6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac70:	9004      	str	r0, [sp, #16]
 800ac72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 814d 	beq.w	800af16 <_dtoa_r+0xb2e>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4631      	mov	r1, r6
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fd12 	bl	800b6ac <__multadd>
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	dc4f      	bgt.n	800ad30 <_dtoa_r+0x948>
 800ac90:	9b06      	ldr	r3, [sp, #24]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	dd4c      	ble.n	800ad30 <_dtoa_r+0x948>
 800ac96:	e011      	b.n	800acbc <_dtoa_r+0x8d4>
 800ac98:	d0c9      	beq.n	800ac2e <_dtoa_r+0x846>
 800ac9a:	9a05      	ldr	r2, [sp, #20]
 800ac9c:	331c      	adds	r3, #28
 800ac9e:	441a      	add	r2, r3
 800aca0:	9205      	str	r2, [sp, #20]
 800aca2:	441d      	add	r5, r3
 800aca4:	4498      	add	r8, r3
 800aca6:	e7c2      	b.n	800ac2e <_dtoa_r+0x846>
 800aca8:	4603      	mov	r3, r0
 800acaa:	e7f6      	b.n	800ac9a <_dtoa_r+0x8b2>
 800acac:	f1b9 0f00 	cmp.w	r9, #0
 800acb0:	dc38      	bgt.n	800ad24 <_dtoa_r+0x93c>
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	dd35      	ble.n	800ad24 <_dtoa_r+0x93c>
 800acb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	b963      	cbnz	r3, 800acda <_dtoa_r+0x8f2>
 800acc0:	4639      	mov	r1, r7
 800acc2:	2205      	movs	r2, #5
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fcf1 	bl	800b6ac <__multadd>
 800acca:	4601      	mov	r1, r0
 800accc:	4607      	mov	r7, r0
 800acce:	9804      	ldr	r0, [sp, #16]
 800acd0:	f000 fef4 	bl	800babc <__mcmp>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f73f adcc 	bgt.w	800a872 <_dtoa_r+0x48a>
 800acda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acdc:	465d      	mov	r5, fp
 800acde:	ea6f 0a03 	mvn.w	sl, r3
 800ace2:	f04f 0900 	mov.w	r9, #0
 800ace6:	4639      	mov	r1, r7
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fcc8 	bl	800b67e <_Bfree>
 800acee:	2e00      	cmp	r6, #0
 800acf0:	f43f aeb7 	beq.w	800aa62 <_dtoa_r+0x67a>
 800acf4:	f1b9 0f00 	cmp.w	r9, #0
 800acf8:	d005      	beq.n	800ad06 <_dtoa_r+0x91e>
 800acfa:	45b1      	cmp	r9, r6
 800acfc:	d003      	beq.n	800ad06 <_dtoa_r+0x91e>
 800acfe:	4649      	mov	r1, r9
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fcbc 	bl	800b67e <_Bfree>
 800ad06:	4631      	mov	r1, r6
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fcb8 	bl	800b67e <_Bfree>
 800ad0e:	e6a8      	b.n	800aa62 <_dtoa_r+0x67a>
 800ad10:	2700      	movs	r7, #0
 800ad12:	463e      	mov	r6, r7
 800ad14:	e7e1      	b.n	800acda <_dtoa_r+0x8f2>
 800ad16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ad1a:	463e      	mov	r6, r7
 800ad1c:	e5a9      	b.n	800a872 <_dtoa_r+0x48a>
 800ad1e:	bf00      	nop
 800ad20:	40240000 	.word	0x40240000
 800ad24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad26:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 80fa 	beq.w	800af24 <_dtoa_r+0xb3c>
 800ad30:	2d00      	cmp	r5, #0
 800ad32:	dd05      	ble.n	800ad40 <_dtoa_r+0x958>
 800ad34:	4631      	mov	r1, r6
 800ad36:	462a      	mov	r2, r5
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 fe6b 	bl	800ba14 <__lshift>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	9b07      	ldr	r3, [sp, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d04c      	beq.n	800ade0 <_dtoa_r+0x9f8>
 800ad46:	6871      	ldr	r1, [r6, #4]
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fc64 	bl	800b616 <_Balloc>
 800ad4e:	6932      	ldr	r2, [r6, #16]
 800ad50:	3202      	adds	r2, #2
 800ad52:	4605      	mov	r5, r0
 800ad54:	0092      	lsls	r2, r2, #2
 800ad56:	f106 010c 	add.w	r1, r6, #12
 800ad5a:	300c      	adds	r0, #12
 800ad5c:	f000 fc50 	bl	800b600 <memcpy>
 800ad60:	2201      	movs	r2, #1
 800ad62:	4629      	mov	r1, r5
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fe55 	bl	800ba14 <__lshift>
 800ad6a:	9b00      	ldr	r3, [sp, #0]
 800ad6c:	f8cd b014 	str.w	fp, [sp, #20]
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	46b1      	mov	r9, r6
 800ad76:	9307      	str	r3, [sp, #28]
 800ad78:	4606      	mov	r6, r0
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	9804      	ldr	r0, [sp, #16]
 800ad7e:	f7ff faa5 	bl	800a2cc <quorem>
 800ad82:	4649      	mov	r1, r9
 800ad84:	4605      	mov	r5, r0
 800ad86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad8a:	9804      	ldr	r0, [sp, #16]
 800ad8c:	f000 fe96 	bl	800babc <__mcmp>
 800ad90:	4632      	mov	r2, r6
 800ad92:	9000      	str	r0, [sp, #0]
 800ad94:	4639      	mov	r1, r7
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 feaa 	bl	800baf0 <__mdiff>
 800ad9c:	68c3      	ldr	r3, [r0, #12]
 800ad9e:	4602      	mov	r2, r0
 800ada0:	bb03      	cbnz	r3, 800ade4 <_dtoa_r+0x9fc>
 800ada2:	4601      	mov	r1, r0
 800ada4:	9008      	str	r0, [sp, #32]
 800ada6:	9804      	ldr	r0, [sp, #16]
 800ada8:	f000 fe88 	bl	800babc <__mcmp>
 800adac:	9a08      	ldr	r2, [sp, #32]
 800adae:	4603      	mov	r3, r0
 800adb0:	4611      	mov	r1, r2
 800adb2:	4620      	mov	r0, r4
 800adb4:	9308      	str	r3, [sp, #32]
 800adb6:	f000 fc62 	bl	800b67e <_Bfree>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	b9a3      	cbnz	r3, 800ade8 <_dtoa_r+0xa00>
 800adbe:	9a06      	ldr	r2, [sp, #24]
 800adc0:	b992      	cbnz	r2, 800ade8 <_dtoa_r+0xa00>
 800adc2:	9a07      	ldr	r2, [sp, #28]
 800adc4:	b982      	cbnz	r2, 800ade8 <_dtoa_r+0xa00>
 800adc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800adca:	d029      	beq.n	800ae20 <_dtoa_r+0xa38>
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	dd01      	ble.n	800add6 <_dtoa_r+0x9ee>
 800add2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800add6:	9b05      	ldr	r3, [sp, #20]
 800add8:	1c5d      	adds	r5, r3, #1
 800adda:	f883 8000 	strb.w	r8, [r3]
 800adde:	e782      	b.n	800ace6 <_dtoa_r+0x8fe>
 800ade0:	4630      	mov	r0, r6
 800ade2:	e7c2      	b.n	800ad6a <_dtoa_r+0x982>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e7e3      	b.n	800adb0 <_dtoa_r+0x9c8>
 800ade8:	9a00      	ldr	r2, [sp, #0]
 800adea:	2a00      	cmp	r2, #0
 800adec:	db04      	blt.n	800adf8 <_dtoa_r+0xa10>
 800adee:	d125      	bne.n	800ae3c <_dtoa_r+0xa54>
 800adf0:	9a06      	ldr	r2, [sp, #24]
 800adf2:	bb1a      	cbnz	r2, 800ae3c <_dtoa_r+0xa54>
 800adf4:	9a07      	ldr	r2, [sp, #28]
 800adf6:	bb0a      	cbnz	r2, 800ae3c <_dtoa_r+0xa54>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	ddec      	ble.n	800add6 <_dtoa_r+0x9ee>
 800adfc:	2201      	movs	r2, #1
 800adfe:	9904      	ldr	r1, [sp, #16]
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 fe07 	bl	800ba14 <__lshift>
 800ae06:	4639      	mov	r1, r7
 800ae08:	9004      	str	r0, [sp, #16]
 800ae0a:	f000 fe57 	bl	800babc <__mcmp>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	dc03      	bgt.n	800ae1a <_dtoa_r+0xa32>
 800ae12:	d1e0      	bne.n	800add6 <_dtoa_r+0x9ee>
 800ae14:	f018 0f01 	tst.w	r8, #1
 800ae18:	d0dd      	beq.n	800add6 <_dtoa_r+0x9ee>
 800ae1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae1e:	d1d8      	bne.n	800add2 <_dtoa_r+0x9ea>
 800ae20:	9b05      	ldr	r3, [sp, #20]
 800ae22:	9a05      	ldr	r2, [sp, #20]
 800ae24:	1c5d      	adds	r5, r3, #1
 800ae26:	2339      	movs	r3, #57	; 0x39
 800ae28:	7013      	strb	r3, [r2, #0]
 800ae2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae2e:	2b39      	cmp	r3, #57	; 0x39
 800ae30:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae34:	d04f      	beq.n	800aed6 <_dtoa_r+0xaee>
 800ae36:	3301      	adds	r3, #1
 800ae38:	7013      	strb	r3, [r2, #0]
 800ae3a:	e754      	b.n	800ace6 <_dtoa_r+0x8fe>
 800ae3c:	9a05      	ldr	r2, [sp, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f102 0501 	add.w	r5, r2, #1
 800ae44:	dd06      	ble.n	800ae54 <_dtoa_r+0xa6c>
 800ae46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae4a:	d0e9      	beq.n	800ae20 <_dtoa_r+0xa38>
 800ae4c:	f108 0801 	add.w	r8, r8, #1
 800ae50:	9b05      	ldr	r3, [sp, #20]
 800ae52:	e7c2      	b.n	800adda <_dtoa_r+0x9f2>
 800ae54:	9a02      	ldr	r2, [sp, #8]
 800ae56:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ae5a:	eba5 030b 	sub.w	r3, r5, fp
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d021      	beq.n	800aea6 <_dtoa_r+0xabe>
 800ae62:	2300      	movs	r3, #0
 800ae64:	220a      	movs	r2, #10
 800ae66:	9904      	ldr	r1, [sp, #16]
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 fc1f 	bl	800b6ac <__multadd>
 800ae6e:	45b1      	cmp	r9, r6
 800ae70:	9004      	str	r0, [sp, #16]
 800ae72:	f04f 0300 	mov.w	r3, #0
 800ae76:	f04f 020a 	mov.w	r2, #10
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	d105      	bne.n	800ae8c <_dtoa_r+0xaa4>
 800ae80:	f000 fc14 	bl	800b6ac <__multadd>
 800ae84:	4681      	mov	r9, r0
 800ae86:	4606      	mov	r6, r0
 800ae88:	9505      	str	r5, [sp, #20]
 800ae8a:	e776      	b.n	800ad7a <_dtoa_r+0x992>
 800ae8c:	f000 fc0e 	bl	800b6ac <__multadd>
 800ae90:	4631      	mov	r1, r6
 800ae92:	4681      	mov	r9, r0
 800ae94:	2300      	movs	r3, #0
 800ae96:	220a      	movs	r2, #10
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fc07 	bl	800b6ac <__multadd>
 800ae9e:	4606      	mov	r6, r0
 800aea0:	e7f2      	b.n	800ae88 <_dtoa_r+0xaa0>
 800aea2:	f04f 0900 	mov.w	r9, #0
 800aea6:	2201      	movs	r2, #1
 800aea8:	9904      	ldr	r1, [sp, #16]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 fdb2 	bl	800ba14 <__lshift>
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	9004      	str	r0, [sp, #16]
 800aeb4:	f000 fe02 	bl	800babc <__mcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	dcb6      	bgt.n	800ae2a <_dtoa_r+0xa42>
 800aebc:	d102      	bne.n	800aec4 <_dtoa_r+0xadc>
 800aebe:	f018 0f01 	tst.w	r8, #1
 800aec2:	d1b2      	bne.n	800ae2a <_dtoa_r+0xa42>
 800aec4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aec8:	2b30      	cmp	r3, #48	; 0x30
 800aeca:	f105 32ff 	add.w	r2, r5, #4294967295
 800aece:	f47f af0a 	bne.w	800ace6 <_dtoa_r+0x8fe>
 800aed2:	4615      	mov	r5, r2
 800aed4:	e7f6      	b.n	800aec4 <_dtoa_r+0xadc>
 800aed6:	4593      	cmp	fp, r2
 800aed8:	d105      	bne.n	800aee6 <_dtoa_r+0xafe>
 800aeda:	2331      	movs	r3, #49	; 0x31
 800aedc:	f10a 0a01 	add.w	sl, sl, #1
 800aee0:	f88b 3000 	strb.w	r3, [fp]
 800aee4:	e6ff      	b.n	800ace6 <_dtoa_r+0x8fe>
 800aee6:	4615      	mov	r5, r2
 800aee8:	e79f      	b.n	800ae2a <_dtoa_r+0xa42>
 800aeea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800af50 <_dtoa_r+0xb68>
 800aeee:	e007      	b.n	800af00 <_dtoa_r+0xb18>
 800aef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800af54 <_dtoa_r+0xb6c>
 800aef6:	b11b      	cbz	r3, 800af00 <_dtoa_r+0xb18>
 800aef8:	f10b 0308 	add.w	r3, fp, #8
 800aefc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	4658      	mov	r0, fp
 800af02:	b017      	add	sp, #92	; 0x5c
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	9b06      	ldr	r3, [sp, #24]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	f77f ae35 	ble.w	800ab7a <_dtoa_r+0x792>
 800af10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af12:	9307      	str	r3, [sp, #28]
 800af14:	e649      	b.n	800abaa <_dtoa_r+0x7c2>
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dc03      	bgt.n	800af24 <_dtoa_r+0xb3c>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	f73f aecc 	bgt.w	800acbc <_dtoa_r+0x8d4>
 800af24:	465d      	mov	r5, fp
 800af26:	4639      	mov	r1, r7
 800af28:	9804      	ldr	r0, [sp, #16]
 800af2a:	f7ff f9cf 	bl	800a2cc <quorem>
 800af2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800af32:	f805 8b01 	strb.w	r8, [r5], #1
 800af36:	9a02      	ldr	r2, [sp, #8]
 800af38:	eba5 030b 	sub.w	r3, r5, fp
 800af3c:	429a      	cmp	r2, r3
 800af3e:	ddb0      	ble.n	800aea2 <_dtoa_r+0xaba>
 800af40:	2300      	movs	r3, #0
 800af42:	220a      	movs	r2, #10
 800af44:	9904      	ldr	r1, [sp, #16]
 800af46:	4620      	mov	r0, r4
 800af48:	f000 fbb0 	bl	800b6ac <__multadd>
 800af4c:	9004      	str	r0, [sp, #16]
 800af4e:	e7ea      	b.n	800af26 <_dtoa_r+0xb3e>
 800af50:	0800cb64 	.word	0x0800cb64
 800af54:	0800cbe0 	.word	0x0800cbe0

0800af58 <rshift>:
 800af58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5a:	6906      	ldr	r6, [r0, #16]
 800af5c:	114b      	asrs	r3, r1, #5
 800af5e:	429e      	cmp	r6, r3
 800af60:	f100 0414 	add.w	r4, r0, #20
 800af64:	dd30      	ble.n	800afc8 <rshift+0x70>
 800af66:	f011 011f 	ands.w	r1, r1, #31
 800af6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800af6e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800af72:	d108      	bne.n	800af86 <rshift+0x2e>
 800af74:	4621      	mov	r1, r4
 800af76:	42b2      	cmp	r2, r6
 800af78:	460b      	mov	r3, r1
 800af7a:	d211      	bcs.n	800afa0 <rshift+0x48>
 800af7c:	f852 3b04 	ldr.w	r3, [r2], #4
 800af80:	f841 3b04 	str.w	r3, [r1], #4
 800af84:	e7f7      	b.n	800af76 <rshift+0x1e>
 800af86:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800af8a:	f1c1 0c20 	rsb	ip, r1, #32
 800af8e:	40cd      	lsrs	r5, r1
 800af90:	3204      	adds	r2, #4
 800af92:	4623      	mov	r3, r4
 800af94:	42b2      	cmp	r2, r6
 800af96:	4617      	mov	r7, r2
 800af98:	d30c      	bcc.n	800afb4 <rshift+0x5c>
 800af9a:	601d      	str	r5, [r3, #0]
 800af9c:	b105      	cbz	r5, 800afa0 <rshift+0x48>
 800af9e:	3304      	adds	r3, #4
 800afa0:	1b1a      	subs	r2, r3, r4
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800afa8:	bf08      	it	eq
 800afaa:	2300      	moveq	r3, #0
 800afac:	6102      	str	r2, [r0, #16]
 800afae:	bf08      	it	eq
 800afb0:	6143      	streq	r3, [r0, #20]
 800afb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb4:	683f      	ldr	r7, [r7, #0]
 800afb6:	fa07 f70c 	lsl.w	r7, r7, ip
 800afba:	433d      	orrs	r5, r7
 800afbc:	f843 5b04 	str.w	r5, [r3], #4
 800afc0:	f852 5b04 	ldr.w	r5, [r2], #4
 800afc4:	40cd      	lsrs	r5, r1
 800afc6:	e7e5      	b.n	800af94 <rshift+0x3c>
 800afc8:	4623      	mov	r3, r4
 800afca:	e7e9      	b.n	800afa0 <rshift+0x48>

0800afcc <__hexdig_fun>:
 800afcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	d802      	bhi.n	800afda <__hexdig_fun+0xe>
 800afd4:	3820      	subs	r0, #32
 800afd6:	b2c0      	uxtb	r0, r0
 800afd8:	4770      	bx	lr
 800afda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afde:	2b05      	cmp	r3, #5
 800afe0:	d801      	bhi.n	800afe6 <__hexdig_fun+0x1a>
 800afe2:	3847      	subs	r0, #71	; 0x47
 800afe4:	e7f7      	b.n	800afd6 <__hexdig_fun+0xa>
 800afe6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afea:	2b05      	cmp	r3, #5
 800afec:	d801      	bhi.n	800aff2 <__hexdig_fun+0x26>
 800afee:	3827      	subs	r0, #39	; 0x27
 800aff0:	e7f1      	b.n	800afd6 <__hexdig_fun+0xa>
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr

0800aff6 <__gethex>:
 800aff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affa:	b08b      	sub	sp, #44	; 0x2c
 800affc:	468a      	mov	sl, r1
 800affe:	9002      	str	r0, [sp, #8]
 800b000:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b002:	9306      	str	r3, [sp, #24]
 800b004:	4690      	mov	r8, r2
 800b006:	f000 fad0 	bl	800b5aa <__localeconv_l>
 800b00a:	6803      	ldr	r3, [r0, #0]
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f5 f8fe 	bl	8000210 <strlen>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	9001      	str	r0, [sp, #4]
 800b018:	4403      	add	r3, r0
 800b01a:	f04f 0b00 	mov.w	fp, #0
 800b01e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b022:	9307      	str	r3, [sp, #28]
 800b024:	f8da 3000 	ldr.w	r3, [sl]
 800b028:	3302      	adds	r3, #2
 800b02a:	461f      	mov	r7, r3
 800b02c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b030:	2830      	cmp	r0, #48	; 0x30
 800b032:	d06c      	beq.n	800b10e <__gethex+0x118>
 800b034:	f7ff ffca 	bl	800afcc <__hexdig_fun>
 800b038:	4604      	mov	r4, r0
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d16a      	bne.n	800b114 <__gethex+0x11e>
 800b03e:	9a01      	ldr	r2, [sp, #4]
 800b040:	9903      	ldr	r1, [sp, #12]
 800b042:	4638      	mov	r0, r7
 800b044:	f001 f8fe 	bl	800c244 <strncmp>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d166      	bne.n	800b11a <__gethex+0x124>
 800b04c:	9b01      	ldr	r3, [sp, #4]
 800b04e:	5cf8      	ldrb	r0, [r7, r3]
 800b050:	18fe      	adds	r6, r7, r3
 800b052:	f7ff ffbb 	bl	800afcc <__hexdig_fun>
 800b056:	2800      	cmp	r0, #0
 800b058:	d062      	beq.n	800b120 <__gethex+0x12a>
 800b05a:	4633      	mov	r3, r6
 800b05c:	7818      	ldrb	r0, [r3, #0]
 800b05e:	2830      	cmp	r0, #48	; 0x30
 800b060:	461f      	mov	r7, r3
 800b062:	f103 0301 	add.w	r3, r3, #1
 800b066:	d0f9      	beq.n	800b05c <__gethex+0x66>
 800b068:	f7ff ffb0 	bl	800afcc <__hexdig_fun>
 800b06c:	fab0 f580 	clz	r5, r0
 800b070:	096d      	lsrs	r5, r5, #5
 800b072:	4634      	mov	r4, r6
 800b074:	f04f 0b01 	mov.w	fp, #1
 800b078:	463a      	mov	r2, r7
 800b07a:	4616      	mov	r6, r2
 800b07c:	3201      	adds	r2, #1
 800b07e:	7830      	ldrb	r0, [r6, #0]
 800b080:	f7ff ffa4 	bl	800afcc <__hexdig_fun>
 800b084:	2800      	cmp	r0, #0
 800b086:	d1f8      	bne.n	800b07a <__gethex+0x84>
 800b088:	9a01      	ldr	r2, [sp, #4]
 800b08a:	9903      	ldr	r1, [sp, #12]
 800b08c:	4630      	mov	r0, r6
 800b08e:	f001 f8d9 	bl	800c244 <strncmp>
 800b092:	b950      	cbnz	r0, 800b0aa <__gethex+0xb4>
 800b094:	b954      	cbnz	r4, 800b0ac <__gethex+0xb6>
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	18f4      	adds	r4, r6, r3
 800b09a:	4622      	mov	r2, r4
 800b09c:	4616      	mov	r6, r2
 800b09e:	3201      	adds	r2, #1
 800b0a0:	7830      	ldrb	r0, [r6, #0]
 800b0a2:	f7ff ff93 	bl	800afcc <__hexdig_fun>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d1f8      	bne.n	800b09c <__gethex+0xa6>
 800b0aa:	b10c      	cbz	r4, 800b0b0 <__gethex+0xba>
 800b0ac:	1ba4      	subs	r4, r4, r6
 800b0ae:	00a4      	lsls	r4, r4, #2
 800b0b0:	7833      	ldrb	r3, [r6, #0]
 800b0b2:	2b50      	cmp	r3, #80	; 0x50
 800b0b4:	d001      	beq.n	800b0ba <__gethex+0xc4>
 800b0b6:	2b70      	cmp	r3, #112	; 0x70
 800b0b8:	d140      	bne.n	800b13c <__gethex+0x146>
 800b0ba:	7873      	ldrb	r3, [r6, #1]
 800b0bc:	2b2b      	cmp	r3, #43	; 0x2b
 800b0be:	d031      	beq.n	800b124 <__gethex+0x12e>
 800b0c0:	2b2d      	cmp	r3, #45	; 0x2d
 800b0c2:	d033      	beq.n	800b12c <__gethex+0x136>
 800b0c4:	1c71      	adds	r1, r6, #1
 800b0c6:	f04f 0900 	mov.w	r9, #0
 800b0ca:	7808      	ldrb	r0, [r1, #0]
 800b0cc:	f7ff ff7e 	bl	800afcc <__hexdig_fun>
 800b0d0:	1e43      	subs	r3, r0, #1
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b18      	cmp	r3, #24
 800b0d6:	d831      	bhi.n	800b13c <__gethex+0x146>
 800b0d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b0dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0e0:	f7ff ff74 	bl	800afcc <__hexdig_fun>
 800b0e4:	1e43      	subs	r3, r0, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b18      	cmp	r3, #24
 800b0ea:	d922      	bls.n	800b132 <__gethex+0x13c>
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	d000      	beq.n	800b0f4 <__gethex+0xfe>
 800b0f2:	4252      	negs	r2, r2
 800b0f4:	4414      	add	r4, r2
 800b0f6:	f8ca 1000 	str.w	r1, [sl]
 800b0fa:	b30d      	cbz	r5, 800b140 <__gethex+0x14a>
 800b0fc:	f1bb 0f00 	cmp.w	fp, #0
 800b100:	bf0c      	ite	eq
 800b102:	2706      	moveq	r7, #6
 800b104:	2700      	movne	r7, #0
 800b106:	4638      	mov	r0, r7
 800b108:	b00b      	add	sp, #44	; 0x2c
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	f10b 0b01 	add.w	fp, fp, #1
 800b112:	e78a      	b.n	800b02a <__gethex+0x34>
 800b114:	2500      	movs	r5, #0
 800b116:	462c      	mov	r4, r5
 800b118:	e7ae      	b.n	800b078 <__gethex+0x82>
 800b11a:	463e      	mov	r6, r7
 800b11c:	2501      	movs	r5, #1
 800b11e:	e7c7      	b.n	800b0b0 <__gethex+0xba>
 800b120:	4604      	mov	r4, r0
 800b122:	e7fb      	b.n	800b11c <__gethex+0x126>
 800b124:	f04f 0900 	mov.w	r9, #0
 800b128:	1cb1      	adds	r1, r6, #2
 800b12a:	e7ce      	b.n	800b0ca <__gethex+0xd4>
 800b12c:	f04f 0901 	mov.w	r9, #1
 800b130:	e7fa      	b.n	800b128 <__gethex+0x132>
 800b132:	230a      	movs	r3, #10
 800b134:	fb03 0202 	mla	r2, r3, r2, r0
 800b138:	3a10      	subs	r2, #16
 800b13a:	e7cf      	b.n	800b0dc <__gethex+0xe6>
 800b13c:	4631      	mov	r1, r6
 800b13e:	e7da      	b.n	800b0f6 <__gethex+0x100>
 800b140:	1bf3      	subs	r3, r6, r7
 800b142:	3b01      	subs	r3, #1
 800b144:	4629      	mov	r1, r5
 800b146:	2b07      	cmp	r3, #7
 800b148:	dc49      	bgt.n	800b1de <__gethex+0x1e8>
 800b14a:	9802      	ldr	r0, [sp, #8]
 800b14c:	f000 fa63 	bl	800b616 <_Balloc>
 800b150:	9b01      	ldr	r3, [sp, #4]
 800b152:	f100 0914 	add.w	r9, r0, #20
 800b156:	f04f 0b00 	mov.w	fp, #0
 800b15a:	f1c3 0301 	rsb	r3, r3, #1
 800b15e:	4605      	mov	r5, r0
 800b160:	f8cd 9010 	str.w	r9, [sp, #16]
 800b164:	46da      	mov	sl, fp
 800b166:	9308      	str	r3, [sp, #32]
 800b168:	42b7      	cmp	r7, r6
 800b16a:	d33b      	bcc.n	800b1e4 <__gethex+0x1ee>
 800b16c:	9804      	ldr	r0, [sp, #16]
 800b16e:	f840 ab04 	str.w	sl, [r0], #4
 800b172:	eba0 0009 	sub.w	r0, r0, r9
 800b176:	1080      	asrs	r0, r0, #2
 800b178:	6128      	str	r0, [r5, #16]
 800b17a:	0147      	lsls	r7, r0, #5
 800b17c:	4650      	mov	r0, sl
 800b17e:	f000 fb0e 	bl	800b79e <__hi0bits>
 800b182:	f8d8 6000 	ldr.w	r6, [r8]
 800b186:	1a3f      	subs	r7, r7, r0
 800b188:	42b7      	cmp	r7, r6
 800b18a:	dd64      	ble.n	800b256 <__gethex+0x260>
 800b18c:	1bbf      	subs	r7, r7, r6
 800b18e:	4639      	mov	r1, r7
 800b190:	4628      	mov	r0, r5
 800b192:	f000 fe1d 	bl	800bdd0 <__any_on>
 800b196:	4682      	mov	sl, r0
 800b198:	b178      	cbz	r0, 800b1ba <__gethex+0x1c4>
 800b19a:	1e7b      	subs	r3, r7, #1
 800b19c:	1159      	asrs	r1, r3, #5
 800b19e:	f003 021f 	and.w	r2, r3, #31
 800b1a2:	f04f 0a01 	mov.w	sl, #1
 800b1a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b1aa:	fa0a f202 	lsl.w	r2, sl, r2
 800b1ae:	420a      	tst	r2, r1
 800b1b0:	d003      	beq.n	800b1ba <__gethex+0x1c4>
 800b1b2:	4553      	cmp	r3, sl
 800b1b4:	dc46      	bgt.n	800b244 <__gethex+0x24e>
 800b1b6:	f04f 0a02 	mov.w	sl, #2
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	4628      	mov	r0, r5
 800b1be:	f7ff fecb 	bl	800af58 <rshift>
 800b1c2:	443c      	add	r4, r7
 800b1c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	da52      	bge.n	800b272 <__gethex+0x27c>
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	9802      	ldr	r0, [sp, #8]
 800b1d0:	f000 fa55 	bl	800b67e <_Bfree>
 800b1d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	27a3      	movs	r7, #163	; 0xa3
 800b1dc:	e793      	b.n	800b106 <__gethex+0x110>
 800b1de:	3101      	adds	r1, #1
 800b1e0:	105b      	asrs	r3, r3, #1
 800b1e2:	e7b0      	b.n	800b146 <__gethex+0x150>
 800b1e4:	1e73      	subs	r3, r6, #1
 800b1e6:	9305      	str	r3, [sp, #20]
 800b1e8:	9a07      	ldr	r2, [sp, #28]
 800b1ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d018      	beq.n	800b224 <__gethex+0x22e>
 800b1f2:	f1bb 0f20 	cmp.w	fp, #32
 800b1f6:	d107      	bne.n	800b208 <__gethex+0x212>
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	f8c3 a000 	str.w	sl, [r3]
 800b1fe:	3304      	adds	r3, #4
 800b200:	f04f 0a00 	mov.w	sl, #0
 800b204:	9304      	str	r3, [sp, #16]
 800b206:	46d3      	mov	fp, sl
 800b208:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b20c:	f7ff fede 	bl	800afcc <__hexdig_fun>
 800b210:	f000 000f 	and.w	r0, r0, #15
 800b214:	fa00 f00b 	lsl.w	r0, r0, fp
 800b218:	ea4a 0a00 	orr.w	sl, sl, r0
 800b21c:	f10b 0b04 	add.w	fp, fp, #4
 800b220:	9b05      	ldr	r3, [sp, #20]
 800b222:	e00d      	b.n	800b240 <__gethex+0x24a>
 800b224:	9b05      	ldr	r3, [sp, #20]
 800b226:	9a08      	ldr	r2, [sp, #32]
 800b228:	4413      	add	r3, r2
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	d3e1      	bcc.n	800b1f2 <__gethex+0x1fc>
 800b22e:	4618      	mov	r0, r3
 800b230:	9a01      	ldr	r2, [sp, #4]
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	9309      	str	r3, [sp, #36]	; 0x24
 800b236:	f001 f805 	bl	800c244 <strncmp>
 800b23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d1d8      	bne.n	800b1f2 <__gethex+0x1fc>
 800b240:	461e      	mov	r6, r3
 800b242:	e791      	b.n	800b168 <__gethex+0x172>
 800b244:	1eb9      	subs	r1, r7, #2
 800b246:	4628      	mov	r0, r5
 800b248:	f000 fdc2 	bl	800bdd0 <__any_on>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d0b2      	beq.n	800b1b6 <__gethex+0x1c0>
 800b250:	f04f 0a03 	mov.w	sl, #3
 800b254:	e7b1      	b.n	800b1ba <__gethex+0x1c4>
 800b256:	da09      	bge.n	800b26c <__gethex+0x276>
 800b258:	1bf7      	subs	r7, r6, r7
 800b25a:	4629      	mov	r1, r5
 800b25c:	463a      	mov	r2, r7
 800b25e:	9802      	ldr	r0, [sp, #8]
 800b260:	f000 fbd8 	bl	800ba14 <__lshift>
 800b264:	1be4      	subs	r4, r4, r7
 800b266:	4605      	mov	r5, r0
 800b268:	f100 0914 	add.w	r9, r0, #20
 800b26c:	f04f 0a00 	mov.w	sl, #0
 800b270:	e7a8      	b.n	800b1c4 <__gethex+0x1ce>
 800b272:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b276:	42a0      	cmp	r0, r4
 800b278:	dd6a      	ble.n	800b350 <__gethex+0x35a>
 800b27a:	1b04      	subs	r4, r0, r4
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	dc2e      	bgt.n	800b2de <__gethex+0x2e8>
 800b280:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d022      	beq.n	800b2ce <__gethex+0x2d8>
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d024      	beq.n	800b2d6 <__gethex+0x2e0>
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d115      	bne.n	800b2bc <__gethex+0x2c6>
 800b290:	42a6      	cmp	r6, r4
 800b292:	d113      	bne.n	800b2bc <__gethex+0x2c6>
 800b294:	2e01      	cmp	r6, #1
 800b296:	dc0b      	bgt.n	800b2b0 <__gethex+0x2ba>
 800b298:	9a06      	ldr	r2, [sp, #24]
 800b29a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	612b      	str	r3, [r5, #16]
 800b2a4:	f8c9 3000 	str.w	r3, [r9]
 800b2a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2aa:	2762      	movs	r7, #98	; 0x62
 800b2ac:	601d      	str	r5, [r3, #0]
 800b2ae:	e72a      	b.n	800b106 <__gethex+0x110>
 800b2b0:	1e71      	subs	r1, r6, #1
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f000 fd8c 	bl	800bdd0 <__any_on>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d1ed      	bne.n	800b298 <__gethex+0x2a2>
 800b2bc:	4629      	mov	r1, r5
 800b2be:	9802      	ldr	r0, [sp, #8]
 800b2c0:	f000 f9dd 	bl	800b67e <_Bfree>
 800b2c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	2750      	movs	r7, #80	; 0x50
 800b2cc:	e71b      	b.n	800b106 <__gethex+0x110>
 800b2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0e1      	beq.n	800b298 <__gethex+0x2a2>
 800b2d4:	e7f2      	b.n	800b2bc <__gethex+0x2c6>
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1dd      	bne.n	800b298 <__gethex+0x2a2>
 800b2dc:	e7ee      	b.n	800b2bc <__gethex+0x2c6>
 800b2de:	1e67      	subs	r7, r4, #1
 800b2e0:	f1ba 0f00 	cmp.w	sl, #0
 800b2e4:	d131      	bne.n	800b34a <__gethex+0x354>
 800b2e6:	b127      	cbz	r7, 800b2f2 <__gethex+0x2fc>
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 fd70 	bl	800bdd0 <__any_on>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	117a      	asrs	r2, r7, #5
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	f007 071f 	and.w	r7, r7, #31
 800b2fa:	fa03 f707 	lsl.w	r7, r3, r7
 800b2fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b302:	4621      	mov	r1, r4
 800b304:	421f      	tst	r7, r3
 800b306:	4628      	mov	r0, r5
 800b308:	bf18      	it	ne
 800b30a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b30e:	1b36      	subs	r6, r6, r4
 800b310:	f7ff fe22 	bl	800af58 <rshift>
 800b314:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b318:	2702      	movs	r7, #2
 800b31a:	f1ba 0f00 	cmp.w	sl, #0
 800b31e:	d048      	beq.n	800b3b2 <__gethex+0x3bc>
 800b320:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d015      	beq.n	800b354 <__gethex+0x35e>
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d017      	beq.n	800b35c <__gethex+0x366>
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d109      	bne.n	800b344 <__gethex+0x34e>
 800b330:	f01a 0f02 	tst.w	sl, #2
 800b334:	d006      	beq.n	800b344 <__gethex+0x34e>
 800b336:	f8d9 3000 	ldr.w	r3, [r9]
 800b33a:	ea4a 0a03 	orr.w	sl, sl, r3
 800b33e:	f01a 0f01 	tst.w	sl, #1
 800b342:	d10e      	bne.n	800b362 <__gethex+0x36c>
 800b344:	f047 0710 	orr.w	r7, r7, #16
 800b348:	e033      	b.n	800b3b2 <__gethex+0x3bc>
 800b34a:	f04f 0a01 	mov.w	sl, #1
 800b34e:	e7d0      	b.n	800b2f2 <__gethex+0x2fc>
 800b350:	2701      	movs	r7, #1
 800b352:	e7e2      	b.n	800b31a <__gethex+0x324>
 800b354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b356:	f1c3 0301 	rsb	r3, r3, #1
 800b35a:	9315      	str	r3, [sp, #84]	; 0x54
 800b35c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0f0      	beq.n	800b344 <__gethex+0x34e>
 800b362:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b366:	f105 0314 	add.w	r3, r5, #20
 800b36a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b36e:	eb03 010a 	add.w	r1, r3, sl
 800b372:	f04f 0c00 	mov.w	ip, #0
 800b376:	4618      	mov	r0, r3
 800b378:	f853 2b04 	ldr.w	r2, [r3], #4
 800b37c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b380:	d01c      	beq.n	800b3bc <__gethex+0x3c6>
 800b382:	3201      	adds	r2, #1
 800b384:	6002      	str	r2, [r0, #0]
 800b386:	2f02      	cmp	r7, #2
 800b388:	f105 0314 	add.w	r3, r5, #20
 800b38c:	d138      	bne.n	800b400 <__gethex+0x40a>
 800b38e:	f8d8 2000 	ldr.w	r2, [r8]
 800b392:	3a01      	subs	r2, #1
 800b394:	42b2      	cmp	r2, r6
 800b396:	d10a      	bne.n	800b3ae <__gethex+0x3b8>
 800b398:	1171      	asrs	r1, r6, #5
 800b39a:	2201      	movs	r2, #1
 800b39c:	f006 061f 	and.w	r6, r6, #31
 800b3a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3a4:	fa02 f606 	lsl.w	r6, r2, r6
 800b3a8:	421e      	tst	r6, r3
 800b3aa:	bf18      	it	ne
 800b3ac:	4617      	movne	r7, r2
 800b3ae:	f047 0720 	orr.w	r7, r7, #32
 800b3b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b4:	601d      	str	r5, [r3, #0]
 800b3b6:	9b06      	ldr	r3, [sp, #24]
 800b3b8:	601c      	str	r4, [r3, #0]
 800b3ba:	e6a4      	b.n	800b106 <__gethex+0x110>
 800b3bc:	4299      	cmp	r1, r3
 800b3be:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3c2:	d8d8      	bhi.n	800b376 <__gethex+0x380>
 800b3c4:	68ab      	ldr	r3, [r5, #8]
 800b3c6:	4599      	cmp	r9, r3
 800b3c8:	db12      	blt.n	800b3f0 <__gethex+0x3fa>
 800b3ca:	6869      	ldr	r1, [r5, #4]
 800b3cc:	9802      	ldr	r0, [sp, #8]
 800b3ce:	3101      	adds	r1, #1
 800b3d0:	f000 f921 	bl	800b616 <_Balloc>
 800b3d4:	692a      	ldr	r2, [r5, #16]
 800b3d6:	3202      	adds	r2, #2
 800b3d8:	f105 010c 	add.w	r1, r5, #12
 800b3dc:	4683      	mov	fp, r0
 800b3de:	0092      	lsls	r2, r2, #2
 800b3e0:	300c      	adds	r0, #12
 800b3e2:	f000 f90d 	bl	800b600 <memcpy>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	9802      	ldr	r0, [sp, #8]
 800b3ea:	f000 f948 	bl	800b67e <_Bfree>
 800b3ee:	465d      	mov	r5, fp
 800b3f0:	692b      	ldr	r3, [r5, #16]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b3f8:	612a      	str	r2, [r5, #16]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	615a      	str	r2, [r3, #20]
 800b3fe:	e7c2      	b.n	800b386 <__gethex+0x390>
 800b400:	692a      	ldr	r2, [r5, #16]
 800b402:	454a      	cmp	r2, r9
 800b404:	dd0b      	ble.n	800b41e <__gethex+0x428>
 800b406:	2101      	movs	r1, #1
 800b408:	4628      	mov	r0, r5
 800b40a:	f7ff fda5 	bl	800af58 <rshift>
 800b40e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b412:	3401      	adds	r4, #1
 800b414:	42a3      	cmp	r3, r4
 800b416:	f6ff aed9 	blt.w	800b1cc <__gethex+0x1d6>
 800b41a:	2701      	movs	r7, #1
 800b41c:	e7c7      	b.n	800b3ae <__gethex+0x3b8>
 800b41e:	f016 061f 	ands.w	r6, r6, #31
 800b422:	d0fa      	beq.n	800b41a <__gethex+0x424>
 800b424:	449a      	add	sl, r3
 800b426:	f1c6 0620 	rsb	r6, r6, #32
 800b42a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b42e:	f000 f9b6 	bl	800b79e <__hi0bits>
 800b432:	42b0      	cmp	r0, r6
 800b434:	dbe7      	blt.n	800b406 <__gethex+0x410>
 800b436:	e7f0      	b.n	800b41a <__gethex+0x424>

0800b438 <L_shift>:
 800b438:	f1c2 0208 	rsb	r2, r2, #8
 800b43c:	0092      	lsls	r2, r2, #2
 800b43e:	b570      	push	{r4, r5, r6, lr}
 800b440:	f1c2 0620 	rsb	r6, r2, #32
 800b444:	6843      	ldr	r3, [r0, #4]
 800b446:	6804      	ldr	r4, [r0, #0]
 800b448:	fa03 f506 	lsl.w	r5, r3, r6
 800b44c:	432c      	orrs	r4, r5
 800b44e:	40d3      	lsrs	r3, r2
 800b450:	6004      	str	r4, [r0, #0]
 800b452:	f840 3f04 	str.w	r3, [r0, #4]!
 800b456:	4288      	cmp	r0, r1
 800b458:	d3f4      	bcc.n	800b444 <L_shift+0xc>
 800b45a:	bd70      	pop	{r4, r5, r6, pc}

0800b45c <__match>:
 800b45c:	b530      	push	{r4, r5, lr}
 800b45e:	6803      	ldr	r3, [r0, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b466:	b914      	cbnz	r4, 800b46e <__match+0x12>
 800b468:	6003      	str	r3, [r0, #0]
 800b46a:	2001      	movs	r0, #1
 800b46c:	bd30      	pop	{r4, r5, pc}
 800b46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b472:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b476:	2d19      	cmp	r5, #25
 800b478:	bf98      	it	ls
 800b47a:	3220      	addls	r2, #32
 800b47c:	42a2      	cmp	r2, r4
 800b47e:	d0f0      	beq.n	800b462 <__match+0x6>
 800b480:	2000      	movs	r0, #0
 800b482:	e7f3      	b.n	800b46c <__match+0x10>

0800b484 <__hexnan>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	680b      	ldr	r3, [r1, #0]
 800b48a:	6801      	ldr	r1, [r0, #0]
 800b48c:	115f      	asrs	r7, r3, #5
 800b48e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b492:	f013 031f 	ands.w	r3, r3, #31
 800b496:	b087      	sub	sp, #28
 800b498:	bf18      	it	ne
 800b49a:	3704      	addne	r7, #4
 800b49c:	2500      	movs	r5, #0
 800b49e:	1f3e      	subs	r6, r7, #4
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	4690      	mov	r8, r2
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	f847 5c04 	str.w	r5, [r7, #-4]
 800b4aa:	46b1      	mov	r9, r6
 800b4ac:	4634      	mov	r4, r6
 800b4ae:	9502      	str	r5, [sp, #8]
 800b4b0:	46ab      	mov	fp, r5
 800b4b2:	784a      	ldrb	r2, [r1, #1]
 800b4b4:	1c4b      	adds	r3, r1, #1
 800b4b6:	9303      	str	r3, [sp, #12]
 800b4b8:	b342      	cbz	r2, 800b50c <__hexnan+0x88>
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	9105      	str	r1, [sp, #20]
 800b4be:	9204      	str	r2, [sp, #16]
 800b4c0:	f7ff fd84 	bl	800afcc <__hexdig_fun>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d143      	bne.n	800b550 <__hexnan+0xcc>
 800b4c8:	9a04      	ldr	r2, [sp, #16]
 800b4ca:	9905      	ldr	r1, [sp, #20]
 800b4cc:	2a20      	cmp	r2, #32
 800b4ce:	d818      	bhi.n	800b502 <__hexnan+0x7e>
 800b4d0:	9b02      	ldr	r3, [sp, #8]
 800b4d2:	459b      	cmp	fp, r3
 800b4d4:	dd13      	ble.n	800b4fe <__hexnan+0x7a>
 800b4d6:	454c      	cmp	r4, r9
 800b4d8:	d206      	bcs.n	800b4e8 <__hexnan+0x64>
 800b4da:	2d07      	cmp	r5, #7
 800b4dc:	dc04      	bgt.n	800b4e8 <__hexnan+0x64>
 800b4de:	462a      	mov	r2, r5
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7ff ffa8 	bl	800b438 <L_shift>
 800b4e8:	4544      	cmp	r4, r8
 800b4ea:	d944      	bls.n	800b576 <__hexnan+0xf2>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f1a4 0904 	sub.w	r9, r4, #4
 800b4f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4f6:	f8cd b008 	str.w	fp, [sp, #8]
 800b4fa:	464c      	mov	r4, r9
 800b4fc:	461d      	mov	r5, r3
 800b4fe:	9903      	ldr	r1, [sp, #12]
 800b500:	e7d7      	b.n	800b4b2 <__hexnan+0x2e>
 800b502:	2a29      	cmp	r2, #41	; 0x29
 800b504:	d14a      	bne.n	800b59c <__hexnan+0x118>
 800b506:	3102      	adds	r1, #2
 800b508:	f8ca 1000 	str.w	r1, [sl]
 800b50c:	f1bb 0f00 	cmp.w	fp, #0
 800b510:	d044      	beq.n	800b59c <__hexnan+0x118>
 800b512:	454c      	cmp	r4, r9
 800b514:	d206      	bcs.n	800b524 <__hexnan+0xa0>
 800b516:	2d07      	cmp	r5, #7
 800b518:	dc04      	bgt.n	800b524 <__hexnan+0xa0>
 800b51a:	462a      	mov	r2, r5
 800b51c:	4649      	mov	r1, r9
 800b51e:	4620      	mov	r0, r4
 800b520:	f7ff ff8a 	bl	800b438 <L_shift>
 800b524:	4544      	cmp	r4, r8
 800b526:	d928      	bls.n	800b57a <__hexnan+0xf6>
 800b528:	4643      	mov	r3, r8
 800b52a:	f854 2b04 	ldr.w	r2, [r4], #4
 800b52e:	f843 2b04 	str.w	r2, [r3], #4
 800b532:	42a6      	cmp	r6, r4
 800b534:	d2f9      	bcs.n	800b52a <__hexnan+0xa6>
 800b536:	2200      	movs	r2, #0
 800b538:	f843 2b04 	str.w	r2, [r3], #4
 800b53c:	429e      	cmp	r6, r3
 800b53e:	d2fb      	bcs.n	800b538 <__hexnan+0xb4>
 800b540:	6833      	ldr	r3, [r6, #0]
 800b542:	b91b      	cbnz	r3, 800b54c <__hexnan+0xc8>
 800b544:	4546      	cmp	r6, r8
 800b546:	d127      	bne.n	800b598 <__hexnan+0x114>
 800b548:	2301      	movs	r3, #1
 800b54a:	6033      	str	r3, [r6, #0]
 800b54c:	2005      	movs	r0, #5
 800b54e:	e026      	b.n	800b59e <__hexnan+0x11a>
 800b550:	3501      	adds	r5, #1
 800b552:	2d08      	cmp	r5, #8
 800b554:	f10b 0b01 	add.w	fp, fp, #1
 800b558:	dd06      	ble.n	800b568 <__hexnan+0xe4>
 800b55a:	4544      	cmp	r4, r8
 800b55c:	d9cf      	bls.n	800b4fe <__hexnan+0x7a>
 800b55e:	2300      	movs	r3, #0
 800b560:	f844 3c04 	str.w	r3, [r4, #-4]
 800b564:	2501      	movs	r5, #1
 800b566:	3c04      	subs	r4, #4
 800b568:	6822      	ldr	r2, [r4, #0]
 800b56a:	f000 000f 	and.w	r0, r0, #15
 800b56e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b572:	6020      	str	r0, [r4, #0]
 800b574:	e7c3      	b.n	800b4fe <__hexnan+0x7a>
 800b576:	2508      	movs	r5, #8
 800b578:	e7c1      	b.n	800b4fe <__hexnan+0x7a>
 800b57a:	9b01      	ldr	r3, [sp, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d0df      	beq.n	800b540 <__hexnan+0xbc>
 800b580:	f04f 32ff 	mov.w	r2, #4294967295
 800b584:	f1c3 0320 	rsb	r3, r3, #32
 800b588:	fa22 f303 	lsr.w	r3, r2, r3
 800b58c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b590:	401a      	ands	r2, r3
 800b592:	f847 2c04 	str.w	r2, [r7, #-4]
 800b596:	e7d3      	b.n	800b540 <__hexnan+0xbc>
 800b598:	3e04      	subs	r6, #4
 800b59a:	e7d1      	b.n	800b540 <__hexnan+0xbc>
 800b59c:	2004      	movs	r0, #4
 800b59e:	b007      	add	sp, #28
 800b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5a4 <__locale_ctype_ptr_l>:
 800b5a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b5a8:	4770      	bx	lr

0800b5aa <__localeconv_l>:
 800b5aa:	30f0      	adds	r0, #240	; 0xf0
 800b5ac:	4770      	bx	lr
	...

0800b5b0 <_localeconv_r>:
 800b5b0:	4b04      	ldr	r3, [pc, #16]	; (800b5c4 <_localeconv_r+0x14>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6a18      	ldr	r0, [r3, #32]
 800b5b6:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <_localeconv_r+0x18>)
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	bf08      	it	eq
 800b5bc:	4618      	moveq	r0, r3
 800b5be:	30f0      	adds	r0, #240	; 0xf0
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	20000010 	.word	0x20000010
 800b5c8:	20000074 	.word	0x20000074

0800b5cc <malloc>:
 800b5cc:	4b02      	ldr	r3, [pc, #8]	; (800b5d8 <malloc+0xc>)
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	f000 bc7b 	b.w	800becc <_malloc_r>
 800b5d6:	bf00      	nop
 800b5d8:	20000010 	.word	0x20000010

0800b5dc <__ascii_mbtowc>:
 800b5dc:	b082      	sub	sp, #8
 800b5de:	b901      	cbnz	r1, 800b5e2 <__ascii_mbtowc+0x6>
 800b5e0:	a901      	add	r1, sp, #4
 800b5e2:	b142      	cbz	r2, 800b5f6 <__ascii_mbtowc+0x1a>
 800b5e4:	b14b      	cbz	r3, 800b5fa <__ascii_mbtowc+0x1e>
 800b5e6:	7813      	ldrb	r3, [r2, #0]
 800b5e8:	600b      	str	r3, [r1, #0]
 800b5ea:	7812      	ldrb	r2, [r2, #0]
 800b5ec:	1c10      	adds	r0, r2, #0
 800b5ee:	bf18      	it	ne
 800b5f0:	2001      	movne	r0, #1
 800b5f2:	b002      	add	sp, #8
 800b5f4:	4770      	bx	lr
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	e7fb      	b.n	800b5f2 <__ascii_mbtowc+0x16>
 800b5fa:	f06f 0001 	mvn.w	r0, #1
 800b5fe:	e7f8      	b.n	800b5f2 <__ascii_mbtowc+0x16>

0800b600 <memcpy>:
 800b600:	b510      	push	{r4, lr}
 800b602:	1e43      	subs	r3, r0, #1
 800b604:	440a      	add	r2, r1
 800b606:	4291      	cmp	r1, r2
 800b608:	d100      	bne.n	800b60c <memcpy+0xc>
 800b60a:	bd10      	pop	{r4, pc}
 800b60c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b610:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b614:	e7f7      	b.n	800b606 <memcpy+0x6>

0800b616 <_Balloc>:
 800b616:	b570      	push	{r4, r5, r6, lr}
 800b618:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b61a:	4604      	mov	r4, r0
 800b61c:	460e      	mov	r6, r1
 800b61e:	b93d      	cbnz	r5, 800b630 <_Balloc+0x1a>
 800b620:	2010      	movs	r0, #16
 800b622:	f7ff ffd3 	bl	800b5cc <malloc>
 800b626:	6260      	str	r0, [r4, #36]	; 0x24
 800b628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b62c:	6005      	str	r5, [r0, #0]
 800b62e:	60c5      	str	r5, [r0, #12]
 800b630:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b632:	68eb      	ldr	r3, [r5, #12]
 800b634:	b183      	cbz	r3, 800b658 <_Balloc+0x42>
 800b636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b63e:	b9b8      	cbnz	r0, 800b670 <_Balloc+0x5a>
 800b640:	2101      	movs	r1, #1
 800b642:	fa01 f506 	lsl.w	r5, r1, r6
 800b646:	1d6a      	adds	r2, r5, #5
 800b648:	0092      	lsls	r2, r2, #2
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fbe1 	bl	800be12 <_calloc_r>
 800b650:	b160      	cbz	r0, 800b66c <_Balloc+0x56>
 800b652:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b656:	e00e      	b.n	800b676 <_Balloc+0x60>
 800b658:	2221      	movs	r2, #33	; 0x21
 800b65a:	2104      	movs	r1, #4
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 fbd8 	bl	800be12 <_calloc_r>
 800b662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b664:	60e8      	str	r0, [r5, #12]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e4      	bne.n	800b636 <_Balloc+0x20>
 800b66c:	2000      	movs	r0, #0
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	6802      	ldr	r2, [r0, #0]
 800b672:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b676:	2300      	movs	r3, #0
 800b678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b67c:	e7f7      	b.n	800b66e <_Balloc+0x58>

0800b67e <_Bfree>:
 800b67e:	b570      	push	{r4, r5, r6, lr}
 800b680:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b682:	4606      	mov	r6, r0
 800b684:	460d      	mov	r5, r1
 800b686:	b93c      	cbnz	r4, 800b698 <_Bfree+0x1a>
 800b688:	2010      	movs	r0, #16
 800b68a:	f7ff ff9f 	bl	800b5cc <malloc>
 800b68e:	6270      	str	r0, [r6, #36]	; 0x24
 800b690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b694:	6004      	str	r4, [r0, #0]
 800b696:	60c4      	str	r4, [r0, #12]
 800b698:	b13d      	cbz	r5, 800b6aa <_Bfree+0x2c>
 800b69a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b69c:	686a      	ldr	r2, [r5, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6a4:	6029      	str	r1, [r5, #0]
 800b6a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}

0800b6ac <__multadd>:
 800b6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b0:	690d      	ldr	r5, [r1, #16]
 800b6b2:	461f      	mov	r7, r3
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	f101 0c14 	add.w	ip, r1, #20
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f8dc 0000 	ldr.w	r0, [ip]
 800b6c2:	b281      	uxth	r1, r0
 800b6c4:	fb02 7101 	mla	r1, r2, r1, r7
 800b6c8:	0c0f      	lsrs	r7, r1, #16
 800b6ca:	0c00      	lsrs	r0, r0, #16
 800b6cc:	fb02 7000 	mla	r0, r2, r0, r7
 800b6d0:	b289      	uxth	r1, r1
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b6d8:	429d      	cmp	r5, r3
 800b6da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b6de:	f84c 1b04 	str.w	r1, [ip], #4
 800b6e2:	dcec      	bgt.n	800b6be <__multadd+0x12>
 800b6e4:	b1d7      	cbz	r7, 800b71c <__multadd+0x70>
 800b6e6:	68a3      	ldr	r3, [r4, #8]
 800b6e8:	42ab      	cmp	r3, r5
 800b6ea:	dc12      	bgt.n	800b712 <__multadd+0x66>
 800b6ec:	6861      	ldr	r1, [r4, #4]
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	3101      	adds	r1, #1
 800b6f2:	f7ff ff90 	bl	800b616 <_Balloc>
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	3202      	adds	r2, #2
 800b6fa:	f104 010c 	add.w	r1, r4, #12
 800b6fe:	4680      	mov	r8, r0
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	300c      	adds	r0, #12
 800b704:	f7ff ff7c 	bl	800b600 <memcpy>
 800b708:	4621      	mov	r1, r4
 800b70a:	4630      	mov	r0, r6
 800b70c:	f7ff ffb7 	bl	800b67e <_Bfree>
 800b710:	4644      	mov	r4, r8
 800b712:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b716:	3501      	adds	r5, #1
 800b718:	615f      	str	r7, [r3, #20]
 800b71a:	6125      	str	r5, [r4, #16]
 800b71c:	4620      	mov	r0, r4
 800b71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b722 <__s2b>:
 800b722:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b726:	460c      	mov	r4, r1
 800b728:	4615      	mov	r5, r2
 800b72a:	461f      	mov	r7, r3
 800b72c:	2209      	movs	r2, #9
 800b72e:	3308      	adds	r3, #8
 800b730:	4606      	mov	r6, r0
 800b732:	fb93 f3f2 	sdiv	r3, r3, r2
 800b736:	2100      	movs	r1, #0
 800b738:	2201      	movs	r2, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	db20      	blt.n	800b780 <__s2b+0x5e>
 800b73e:	4630      	mov	r0, r6
 800b740:	f7ff ff69 	bl	800b616 <_Balloc>
 800b744:	9b08      	ldr	r3, [sp, #32]
 800b746:	6143      	str	r3, [r0, #20]
 800b748:	2d09      	cmp	r5, #9
 800b74a:	f04f 0301 	mov.w	r3, #1
 800b74e:	6103      	str	r3, [r0, #16]
 800b750:	dd19      	ble.n	800b786 <__s2b+0x64>
 800b752:	f104 0809 	add.w	r8, r4, #9
 800b756:	46c1      	mov	r9, r8
 800b758:	442c      	add	r4, r5
 800b75a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b75e:	4601      	mov	r1, r0
 800b760:	3b30      	subs	r3, #48	; 0x30
 800b762:	220a      	movs	r2, #10
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ffa1 	bl	800b6ac <__multadd>
 800b76a:	45a1      	cmp	r9, r4
 800b76c:	d1f5      	bne.n	800b75a <__s2b+0x38>
 800b76e:	eb08 0405 	add.w	r4, r8, r5
 800b772:	3c08      	subs	r4, #8
 800b774:	1b2d      	subs	r5, r5, r4
 800b776:	1963      	adds	r3, r4, r5
 800b778:	42bb      	cmp	r3, r7
 800b77a:	db07      	blt.n	800b78c <__s2b+0x6a>
 800b77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b780:	0052      	lsls	r2, r2, #1
 800b782:	3101      	adds	r1, #1
 800b784:	e7d9      	b.n	800b73a <__s2b+0x18>
 800b786:	340a      	adds	r4, #10
 800b788:	2509      	movs	r5, #9
 800b78a:	e7f3      	b.n	800b774 <__s2b+0x52>
 800b78c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b790:	4601      	mov	r1, r0
 800b792:	3b30      	subs	r3, #48	; 0x30
 800b794:	220a      	movs	r2, #10
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff ff88 	bl	800b6ac <__multadd>
 800b79c:	e7eb      	b.n	800b776 <__s2b+0x54>

0800b79e <__hi0bits>:
 800b79e:	0c02      	lsrs	r2, r0, #16
 800b7a0:	0412      	lsls	r2, r2, #16
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	b9b2      	cbnz	r2, 800b7d4 <__hi0bits+0x36>
 800b7a6:	0403      	lsls	r3, r0, #16
 800b7a8:	2010      	movs	r0, #16
 800b7aa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7ae:	bf04      	itt	eq
 800b7b0:	021b      	lsleq	r3, r3, #8
 800b7b2:	3008      	addeq	r0, #8
 800b7b4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7b8:	bf04      	itt	eq
 800b7ba:	011b      	lsleq	r3, r3, #4
 800b7bc:	3004      	addeq	r0, #4
 800b7be:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b7c2:	bf04      	itt	eq
 800b7c4:	009b      	lsleq	r3, r3, #2
 800b7c6:	3002      	addeq	r0, #2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	db06      	blt.n	800b7da <__hi0bits+0x3c>
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	d503      	bpl.n	800b7d8 <__hi0bits+0x3a>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	4770      	bx	lr
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e7e8      	b.n	800b7aa <__hi0bits+0xc>
 800b7d8:	2020      	movs	r0, #32
 800b7da:	4770      	bx	lr

0800b7dc <__lo0bits>:
 800b7dc:	6803      	ldr	r3, [r0, #0]
 800b7de:	f013 0207 	ands.w	r2, r3, #7
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	d00b      	beq.n	800b7fe <__lo0bits+0x22>
 800b7e6:	07da      	lsls	r2, r3, #31
 800b7e8:	d423      	bmi.n	800b832 <__lo0bits+0x56>
 800b7ea:	0798      	lsls	r0, r3, #30
 800b7ec:	bf49      	itett	mi
 800b7ee:	085b      	lsrmi	r3, r3, #1
 800b7f0:	089b      	lsrpl	r3, r3, #2
 800b7f2:	2001      	movmi	r0, #1
 800b7f4:	600b      	strmi	r3, [r1, #0]
 800b7f6:	bf5c      	itt	pl
 800b7f8:	600b      	strpl	r3, [r1, #0]
 800b7fa:	2002      	movpl	r0, #2
 800b7fc:	4770      	bx	lr
 800b7fe:	b298      	uxth	r0, r3
 800b800:	b9a8      	cbnz	r0, 800b82e <__lo0bits+0x52>
 800b802:	0c1b      	lsrs	r3, r3, #16
 800b804:	2010      	movs	r0, #16
 800b806:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b80a:	bf04      	itt	eq
 800b80c:	0a1b      	lsreq	r3, r3, #8
 800b80e:	3008      	addeq	r0, #8
 800b810:	071a      	lsls	r2, r3, #28
 800b812:	bf04      	itt	eq
 800b814:	091b      	lsreq	r3, r3, #4
 800b816:	3004      	addeq	r0, #4
 800b818:	079a      	lsls	r2, r3, #30
 800b81a:	bf04      	itt	eq
 800b81c:	089b      	lsreq	r3, r3, #2
 800b81e:	3002      	addeq	r0, #2
 800b820:	07da      	lsls	r2, r3, #31
 800b822:	d402      	bmi.n	800b82a <__lo0bits+0x4e>
 800b824:	085b      	lsrs	r3, r3, #1
 800b826:	d006      	beq.n	800b836 <__lo0bits+0x5a>
 800b828:	3001      	adds	r0, #1
 800b82a:	600b      	str	r3, [r1, #0]
 800b82c:	4770      	bx	lr
 800b82e:	4610      	mov	r0, r2
 800b830:	e7e9      	b.n	800b806 <__lo0bits+0x2a>
 800b832:	2000      	movs	r0, #0
 800b834:	4770      	bx	lr
 800b836:	2020      	movs	r0, #32
 800b838:	4770      	bx	lr

0800b83a <__i2b>:
 800b83a:	b510      	push	{r4, lr}
 800b83c:	460c      	mov	r4, r1
 800b83e:	2101      	movs	r1, #1
 800b840:	f7ff fee9 	bl	800b616 <_Balloc>
 800b844:	2201      	movs	r2, #1
 800b846:	6144      	str	r4, [r0, #20]
 800b848:	6102      	str	r2, [r0, #16]
 800b84a:	bd10      	pop	{r4, pc}

0800b84c <__multiply>:
 800b84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	4614      	mov	r4, r2
 800b852:	690a      	ldr	r2, [r1, #16]
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	429a      	cmp	r2, r3
 800b858:	bfb8      	it	lt
 800b85a:	460b      	movlt	r3, r1
 800b85c:	4688      	mov	r8, r1
 800b85e:	bfbc      	itt	lt
 800b860:	46a0      	movlt	r8, r4
 800b862:	461c      	movlt	r4, r3
 800b864:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b868:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b86c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b874:	eb07 0609 	add.w	r6, r7, r9
 800b878:	42b3      	cmp	r3, r6
 800b87a:	bfb8      	it	lt
 800b87c:	3101      	addlt	r1, #1
 800b87e:	f7ff feca 	bl	800b616 <_Balloc>
 800b882:	f100 0514 	add.w	r5, r0, #20
 800b886:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b88a:	462b      	mov	r3, r5
 800b88c:	2200      	movs	r2, #0
 800b88e:	4573      	cmp	r3, lr
 800b890:	d316      	bcc.n	800b8c0 <__multiply+0x74>
 800b892:	f104 0214 	add.w	r2, r4, #20
 800b896:	f108 0114 	add.w	r1, r8, #20
 800b89a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b89e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	9b00      	ldr	r3, [sp, #0]
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d80c      	bhi.n	800b8c6 <__multiply+0x7a>
 800b8ac:	2e00      	cmp	r6, #0
 800b8ae:	dd03      	ble.n	800b8b8 <__multiply+0x6c>
 800b8b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d05d      	beq.n	800b974 <__multiply+0x128>
 800b8b8:	6106      	str	r6, [r0, #16]
 800b8ba:	b003      	add	sp, #12
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c0:	f843 2b04 	str.w	r2, [r3], #4
 800b8c4:	e7e3      	b.n	800b88e <__multiply+0x42>
 800b8c6:	f8b2 b000 	ldrh.w	fp, [r2]
 800b8ca:	f1bb 0f00 	cmp.w	fp, #0
 800b8ce:	d023      	beq.n	800b918 <__multiply+0xcc>
 800b8d0:	4689      	mov	r9, r1
 800b8d2:	46ac      	mov	ip, r5
 800b8d4:	f04f 0800 	mov.w	r8, #0
 800b8d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b8dc:	f8dc a000 	ldr.w	sl, [ip]
 800b8e0:	b2a3      	uxth	r3, r4
 800b8e2:	fa1f fa8a 	uxth.w	sl, sl
 800b8e6:	fb0b a303 	mla	r3, fp, r3, sl
 800b8ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b8ee:	f8dc 4000 	ldr.w	r4, [ip]
 800b8f2:	4443      	add	r3, r8
 800b8f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b8f8:	fb0b 840a 	mla	r4, fp, sl, r8
 800b8fc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b900:	46e2      	mov	sl, ip
 800b902:	b29b      	uxth	r3, r3
 800b904:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b908:	454f      	cmp	r7, r9
 800b90a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b90e:	f84a 3b04 	str.w	r3, [sl], #4
 800b912:	d82b      	bhi.n	800b96c <__multiply+0x120>
 800b914:	f8cc 8004 	str.w	r8, [ip, #4]
 800b918:	9b01      	ldr	r3, [sp, #4]
 800b91a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b91e:	3204      	adds	r2, #4
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	d020      	beq.n	800b968 <__multiply+0x11c>
 800b926:	682b      	ldr	r3, [r5, #0]
 800b928:	4689      	mov	r9, r1
 800b92a:	46a8      	mov	r8, r5
 800b92c:	f04f 0b00 	mov.w	fp, #0
 800b930:	f8b9 c000 	ldrh.w	ip, [r9]
 800b934:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b938:	fb0a 440c 	mla	r4, sl, ip, r4
 800b93c:	445c      	add	r4, fp
 800b93e:	46c4      	mov	ip, r8
 800b940:	b29b      	uxth	r3, r3
 800b942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b946:	f84c 3b04 	str.w	r3, [ip], #4
 800b94a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b94e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b952:	0c1b      	lsrs	r3, r3, #16
 800b954:	fb0a b303 	mla	r3, sl, r3, fp
 800b958:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b95c:	454f      	cmp	r7, r9
 800b95e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b962:	d805      	bhi.n	800b970 <__multiply+0x124>
 800b964:	f8c8 3004 	str.w	r3, [r8, #4]
 800b968:	3504      	adds	r5, #4
 800b96a:	e79b      	b.n	800b8a4 <__multiply+0x58>
 800b96c:	46d4      	mov	ip, sl
 800b96e:	e7b3      	b.n	800b8d8 <__multiply+0x8c>
 800b970:	46e0      	mov	r8, ip
 800b972:	e7dd      	b.n	800b930 <__multiply+0xe4>
 800b974:	3e01      	subs	r6, #1
 800b976:	e799      	b.n	800b8ac <__multiply+0x60>

0800b978 <__pow5mult>:
 800b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	4615      	mov	r5, r2
 800b97e:	f012 0203 	ands.w	r2, r2, #3
 800b982:	4606      	mov	r6, r0
 800b984:	460f      	mov	r7, r1
 800b986:	d007      	beq.n	800b998 <__pow5mult+0x20>
 800b988:	3a01      	subs	r2, #1
 800b98a:	4c21      	ldr	r4, [pc, #132]	; (800ba10 <__pow5mult+0x98>)
 800b98c:	2300      	movs	r3, #0
 800b98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b992:	f7ff fe8b 	bl	800b6ac <__multadd>
 800b996:	4607      	mov	r7, r0
 800b998:	10ad      	asrs	r5, r5, #2
 800b99a:	d035      	beq.n	800ba08 <__pow5mult+0x90>
 800b99c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b99e:	b93c      	cbnz	r4, 800b9b0 <__pow5mult+0x38>
 800b9a0:	2010      	movs	r0, #16
 800b9a2:	f7ff fe13 	bl	800b5cc <malloc>
 800b9a6:	6270      	str	r0, [r6, #36]	; 0x24
 800b9a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9ac:	6004      	str	r4, [r0, #0]
 800b9ae:	60c4      	str	r4, [r0, #12]
 800b9b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9b8:	b94c      	cbnz	r4, 800b9ce <__pow5mult+0x56>
 800b9ba:	f240 2171 	movw	r1, #625	; 0x271
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f7ff ff3b 	bl	800b83a <__i2b>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	f04f 0800 	mov.w	r8, #0
 800b9d2:	07eb      	lsls	r3, r5, #31
 800b9d4:	d50a      	bpl.n	800b9ec <__pow5mult+0x74>
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	4622      	mov	r2, r4
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7ff ff36 	bl	800b84c <__multiply>
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff fe4a 	bl	800b67e <_Bfree>
 800b9ea:	464f      	mov	r7, r9
 800b9ec:	106d      	asrs	r5, r5, #1
 800b9ee:	d00b      	beq.n	800ba08 <__pow5mult+0x90>
 800b9f0:	6820      	ldr	r0, [r4, #0]
 800b9f2:	b938      	cbnz	r0, 800ba04 <__pow5mult+0x8c>
 800b9f4:	4622      	mov	r2, r4
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f7ff ff27 	bl	800b84c <__multiply>
 800b9fe:	6020      	str	r0, [r4, #0]
 800ba00:	f8c0 8000 	str.w	r8, [r0]
 800ba04:	4604      	mov	r4, r0
 800ba06:	e7e4      	b.n	800b9d2 <__pow5mult+0x5a>
 800ba08:	4638      	mov	r0, r7
 800ba0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800cce8 	.word	0x0800cce8

0800ba14 <__lshift>:
 800ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba18:	460c      	mov	r4, r1
 800ba1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	6849      	ldr	r1, [r1, #4]
 800ba22:	eb0a 0903 	add.w	r9, sl, r3
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	4607      	mov	r7, r0
 800ba2a:	4616      	mov	r6, r2
 800ba2c:	f109 0501 	add.w	r5, r9, #1
 800ba30:	42ab      	cmp	r3, r5
 800ba32:	db32      	blt.n	800ba9a <__lshift+0x86>
 800ba34:	4638      	mov	r0, r7
 800ba36:	f7ff fdee 	bl	800b616 <_Balloc>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	f100 0114 	add.w	r1, r0, #20
 800ba42:	461a      	mov	r2, r3
 800ba44:	4553      	cmp	r3, sl
 800ba46:	db2b      	blt.n	800baa0 <__lshift+0x8c>
 800ba48:	6920      	ldr	r0, [r4, #16]
 800ba4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba4e:	f104 0314 	add.w	r3, r4, #20
 800ba52:	f016 021f 	ands.w	r2, r6, #31
 800ba56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba5e:	d025      	beq.n	800baac <__lshift+0x98>
 800ba60:	f1c2 0e20 	rsb	lr, r2, #32
 800ba64:	2000      	movs	r0, #0
 800ba66:	681e      	ldr	r6, [r3, #0]
 800ba68:	468a      	mov	sl, r1
 800ba6a:	4096      	lsls	r6, r2
 800ba6c:	4330      	orrs	r0, r6
 800ba6e:	f84a 0b04 	str.w	r0, [sl], #4
 800ba72:	f853 0b04 	ldr.w	r0, [r3], #4
 800ba76:	459c      	cmp	ip, r3
 800ba78:	fa20 f00e 	lsr.w	r0, r0, lr
 800ba7c:	d814      	bhi.n	800baa8 <__lshift+0x94>
 800ba7e:	6048      	str	r0, [r1, #4]
 800ba80:	b108      	cbz	r0, 800ba86 <__lshift+0x72>
 800ba82:	f109 0502 	add.w	r5, r9, #2
 800ba86:	3d01      	subs	r5, #1
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ba8e:	4621      	mov	r1, r4
 800ba90:	f7ff fdf5 	bl	800b67e <_Bfree>
 800ba94:	4640      	mov	r0, r8
 800ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9a:	3101      	adds	r1, #1
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	e7c7      	b.n	800ba30 <__lshift+0x1c>
 800baa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800baa4:	3301      	adds	r3, #1
 800baa6:	e7cd      	b.n	800ba44 <__lshift+0x30>
 800baa8:	4651      	mov	r1, sl
 800baaa:	e7dc      	b.n	800ba66 <__lshift+0x52>
 800baac:	3904      	subs	r1, #4
 800baae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bab6:	459c      	cmp	ip, r3
 800bab8:	d8f9      	bhi.n	800baae <__lshift+0x9a>
 800baba:	e7e4      	b.n	800ba86 <__lshift+0x72>

0800babc <__mcmp>:
 800babc:	6903      	ldr	r3, [r0, #16]
 800babe:	690a      	ldr	r2, [r1, #16]
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	b530      	push	{r4, r5, lr}
 800bac4:	d10c      	bne.n	800bae0 <__mcmp+0x24>
 800bac6:	0092      	lsls	r2, r2, #2
 800bac8:	3014      	adds	r0, #20
 800baca:	3114      	adds	r1, #20
 800bacc:	1884      	adds	r4, r0, r2
 800bace:	4411      	add	r1, r2
 800bad0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bad4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bad8:	4295      	cmp	r5, r2
 800bada:	d003      	beq.n	800bae4 <__mcmp+0x28>
 800badc:	d305      	bcc.n	800baea <__mcmp+0x2e>
 800bade:	2301      	movs	r3, #1
 800bae0:	4618      	mov	r0, r3
 800bae2:	bd30      	pop	{r4, r5, pc}
 800bae4:	42a0      	cmp	r0, r4
 800bae6:	d3f3      	bcc.n	800bad0 <__mcmp+0x14>
 800bae8:	e7fa      	b.n	800bae0 <__mcmp+0x24>
 800baea:	f04f 33ff 	mov.w	r3, #4294967295
 800baee:	e7f7      	b.n	800bae0 <__mcmp+0x24>

0800baf0 <__mdiff>:
 800baf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf4:	460d      	mov	r5, r1
 800baf6:	4607      	mov	r7, r0
 800baf8:	4611      	mov	r1, r2
 800bafa:	4628      	mov	r0, r5
 800bafc:	4614      	mov	r4, r2
 800bafe:	f7ff ffdd 	bl	800babc <__mcmp>
 800bb02:	1e06      	subs	r6, r0, #0
 800bb04:	d108      	bne.n	800bb18 <__mdiff+0x28>
 800bb06:	4631      	mov	r1, r6
 800bb08:	4638      	mov	r0, r7
 800bb0a:	f7ff fd84 	bl	800b616 <_Balloc>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb18:	bfa4      	itt	ge
 800bb1a:	4623      	movge	r3, r4
 800bb1c:	462c      	movge	r4, r5
 800bb1e:	4638      	mov	r0, r7
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	bfa6      	itte	ge
 800bb24:	461d      	movge	r5, r3
 800bb26:	2600      	movge	r6, #0
 800bb28:	2601      	movlt	r6, #1
 800bb2a:	f7ff fd74 	bl	800b616 <_Balloc>
 800bb2e:	692b      	ldr	r3, [r5, #16]
 800bb30:	60c6      	str	r6, [r0, #12]
 800bb32:	6926      	ldr	r6, [r4, #16]
 800bb34:	f105 0914 	add.w	r9, r5, #20
 800bb38:	f104 0214 	add.w	r2, r4, #20
 800bb3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bb40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bb44:	f100 0514 	add.w	r5, r0, #20
 800bb48:	f04f 0e00 	mov.w	lr, #0
 800bb4c:	f852 ab04 	ldr.w	sl, [r2], #4
 800bb50:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb54:	fa1e f18a 	uxtah	r1, lr, sl
 800bb58:	b2a3      	uxth	r3, r4
 800bb5a:	1ac9      	subs	r1, r1, r3
 800bb5c:	0c23      	lsrs	r3, r4, #16
 800bb5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800bb62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb66:	b289      	uxth	r1, r1
 800bb68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bb6c:	45c8      	cmp	r8, r9
 800bb6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bb72:	4694      	mov	ip, r2
 800bb74:	f845 3b04 	str.w	r3, [r5], #4
 800bb78:	d8e8      	bhi.n	800bb4c <__mdiff+0x5c>
 800bb7a:	45bc      	cmp	ip, r7
 800bb7c:	d304      	bcc.n	800bb88 <__mdiff+0x98>
 800bb7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bb82:	b183      	cbz	r3, 800bba6 <__mdiff+0xb6>
 800bb84:	6106      	str	r6, [r0, #16]
 800bb86:	e7c5      	b.n	800bb14 <__mdiff+0x24>
 800bb88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb8c:	fa1e f381 	uxtah	r3, lr, r1
 800bb90:	141a      	asrs	r2, r3, #16
 800bb92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bba0:	f845 3b04 	str.w	r3, [r5], #4
 800bba4:	e7e9      	b.n	800bb7a <__mdiff+0x8a>
 800bba6:	3e01      	subs	r6, #1
 800bba8:	e7e9      	b.n	800bb7e <__mdiff+0x8e>
	...

0800bbac <__ulp>:
 800bbac:	4b12      	ldr	r3, [pc, #72]	; (800bbf8 <__ulp+0x4c>)
 800bbae:	ee10 2a90 	vmov	r2, s1
 800bbb2:	401a      	ands	r2, r3
 800bbb4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	dd04      	ble.n	800bbc6 <__ulp+0x1a>
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	ec41 0b10 	vmov	d0, r0, r1
 800bbc4:	4770      	bx	lr
 800bbc6:	425b      	negs	r3, r3
 800bbc8:	151b      	asrs	r3, r3, #20
 800bbca:	2b13      	cmp	r3, #19
 800bbcc:	f04f 0000 	mov.w	r0, #0
 800bbd0:	f04f 0100 	mov.w	r1, #0
 800bbd4:	dc04      	bgt.n	800bbe0 <__ulp+0x34>
 800bbd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bbda:	fa42 f103 	asr.w	r1, r2, r3
 800bbde:	e7ef      	b.n	800bbc0 <__ulp+0x14>
 800bbe0:	3b14      	subs	r3, #20
 800bbe2:	2b1e      	cmp	r3, #30
 800bbe4:	f04f 0201 	mov.w	r2, #1
 800bbe8:	bfda      	itte	le
 800bbea:	f1c3 031f 	rsble	r3, r3, #31
 800bbee:	fa02 f303 	lslle.w	r3, r2, r3
 800bbf2:	4613      	movgt	r3, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	e7e3      	b.n	800bbc0 <__ulp+0x14>
 800bbf8:	7ff00000 	.word	0x7ff00000

0800bbfc <__b2d>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	6905      	ldr	r5, [r0, #16]
 800bc00:	f100 0714 	add.w	r7, r0, #20
 800bc04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bc08:	1f2e      	subs	r6, r5, #4
 800bc0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff fdc5 	bl	800b79e <__hi0bits>
 800bc14:	f1c0 0320 	rsb	r3, r0, #32
 800bc18:	280a      	cmp	r0, #10
 800bc1a:	600b      	str	r3, [r1, #0]
 800bc1c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bc94 <__b2d+0x98>
 800bc20:	dc14      	bgt.n	800bc4c <__b2d+0x50>
 800bc22:	f1c0 0e0b 	rsb	lr, r0, #11
 800bc26:	fa24 f10e 	lsr.w	r1, r4, lr
 800bc2a:	42b7      	cmp	r7, r6
 800bc2c:	ea41 030c 	orr.w	r3, r1, ip
 800bc30:	bf34      	ite	cc
 800bc32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc36:	2100      	movcs	r1, #0
 800bc38:	3015      	adds	r0, #21
 800bc3a:	fa04 f000 	lsl.w	r0, r4, r0
 800bc3e:	fa21 f10e 	lsr.w	r1, r1, lr
 800bc42:	ea40 0201 	orr.w	r2, r0, r1
 800bc46:	ec43 2b10 	vmov	d0, r2, r3
 800bc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc4c:	42b7      	cmp	r7, r6
 800bc4e:	bf3a      	itte	cc
 800bc50:	f1a5 0608 	subcc.w	r6, r5, #8
 800bc54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc58:	2100      	movcs	r1, #0
 800bc5a:	380b      	subs	r0, #11
 800bc5c:	d015      	beq.n	800bc8a <__b2d+0x8e>
 800bc5e:	4084      	lsls	r4, r0
 800bc60:	f1c0 0520 	rsb	r5, r0, #32
 800bc64:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bc68:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bc6c:	42be      	cmp	r6, r7
 800bc6e:	fa21 fc05 	lsr.w	ip, r1, r5
 800bc72:	ea44 030c 	orr.w	r3, r4, ip
 800bc76:	bf8c      	ite	hi
 800bc78:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bc7c:	2400      	movls	r4, #0
 800bc7e:	fa01 f000 	lsl.w	r0, r1, r0
 800bc82:	40ec      	lsrs	r4, r5
 800bc84:	ea40 0204 	orr.w	r2, r0, r4
 800bc88:	e7dd      	b.n	800bc46 <__b2d+0x4a>
 800bc8a:	ea44 030c 	orr.w	r3, r4, ip
 800bc8e:	460a      	mov	r2, r1
 800bc90:	e7d9      	b.n	800bc46 <__b2d+0x4a>
 800bc92:	bf00      	nop
 800bc94:	3ff00000 	.word	0x3ff00000

0800bc98 <__d2b>:
 800bc98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc9c:	460e      	mov	r6, r1
 800bc9e:	2101      	movs	r1, #1
 800bca0:	ec59 8b10 	vmov	r8, r9, d0
 800bca4:	4615      	mov	r5, r2
 800bca6:	f7ff fcb6 	bl	800b616 <_Balloc>
 800bcaa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bcae:	4607      	mov	r7, r0
 800bcb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcb4:	bb34      	cbnz	r4, 800bd04 <__d2b+0x6c>
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	f1b8 0300 	subs.w	r3, r8, #0
 800bcbc:	d027      	beq.n	800bd0e <__d2b+0x76>
 800bcbe:	a802      	add	r0, sp, #8
 800bcc0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bcc4:	f7ff fd8a 	bl	800b7dc <__lo0bits>
 800bcc8:	9900      	ldr	r1, [sp, #0]
 800bcca:	b1f0      	cbz	r0, 800bd0a <__d2b+0x72>
 800bccc:	9a01      	ldr	r2, [sp, #4]
 800bcce:	f1c0 0320 	rsb	r3, r0, #32
 800bcd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd6:	430b      	orrs	r3, r1
 800bcd8:	40c2      	lsrs	r2, r0
 800bcda:	617b      	str	r3, [r7, #20]
 800bcdc:	9201      	str	r2, [sp, #4]
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	61bb      	str	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	bf14      	ite	ne
 800bce6:	2102      	movne	r1, #2
 800bce8:	2101      	moveq	r1, #1
 800bcea:	6139      	str	r1, [r7, #16]
 800bcec:	b1c4      	cbz	r4, 800bd20 <__d2b+0x88>
 800bcee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bcf2:	4404      	add	r4, r0
 800bcf4:	6034      	str	r4, [r6, #0]
 800bcf6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcfa:	6028      	str	r0, [r5, #0]
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	b003      	add	sp, #12
 800bd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd08:	e7d5      	b.n	800bcb6 <__d2b+0x1e>
 800bd0a:	6179      	str	r1, [r7, #20]
 800bd0c:	e7e7      	b.n	800bcde <__d2b+0x46>
 800bd0e:	a801      	add	r0, sp, #4
 800bd10:	f7ff fd64 	bl	800b7dc <__lo0bits>
 800bd14:	9b01      	ldr	r3, [sp, #4]
 800bd16:	617b      	str	r3, [r7, #20]
 800bd18:	2101      	movs	r1, #1
 800bd1a:	6139      	str	r1, [r7, #16]
 800bd1c:	3020      	adds	r0, #32
 800bd1e:	e7e5      	b.n	800bcec <__d2b+0x54>
 800bd20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bd24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd28:	6030      	str	r0, [r6, #0]
 800bd2a:	6918      	ldr	r0, [r3, #16]
 800bd2c:	f7ff fd37 	bl	800b79e <__hi0bits>
 800bd30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bd34:	e7e1      	b.n	800bcfa <__d2b+0x62>

0800bd36 <__ratio>:
 800bd36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3a:	4688      	mov	r8, r1
 800bd3c:	4669      	mov	r1, sp
 800bd3e:	4681      	mov	r9, r0
 800bd40:	f7ff ff5c 	bl	800bbfc <__b2d>
 800bd44:	a901      	add	r1, sp, #4
 800bd46:	4640      	mov	r0, r8
 800bd48:	ec57 6b10 	vmov	r6, r7, d0
 800bd4c:	f7ff ff56 	bl	800bbfc <__b2d>
 800bd50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bd58:	eba3 0c02 	sub.w	ip, r3, r2
 800bd5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd60:	1a9b      	subs	r3, r3, r2
 800bd62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd66:	ec5b ab10 	vmov	sl, fp, d0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	bfce      	itee	gt
 800bd6e:	463a      	movgt	r2, r7
 800bd70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd74:	465a      	movle	r2, fp
 800bd76:	4659      	mov	r1, fp
 800bd78:	463d      	mov	r5, r7
 800bd7a:	bfd4      	ite	le
 800bd7c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bd80:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bd84:	4630      	mov	r0, r6
 800bd86:	ee10 2a10 	vmov	r2, s0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	f7f4 fd7d 	bl	800088c <__aeabi_ddiv>
 800bd92:	ec41 0b10 	vmov	d0, r0, r1
 800bd96:	b003      	add	sp, #12
 800bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd9c <__copybits>:
 800bd9c:	3901      	subs	r1, #1
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	1149      	asrs	r1, r1, #5
 800bda2:	6914      	ldr	r4, [r2, #16]
 800bda4:	3101      	adds	r1, #1
 800bda6:	f102 0314 	add.w	r3, r2, #20
 800bdaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdb2:	42a3      	cmp	r3, r4
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	d303      	bcc.n	800bdc0 <__copybits+0x24>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	428a      	cmp	r2, r1
 800bdbc:	d305      	bcc.n	800bdca <__copybits+0x2e>
 800bdbe:	bd10      	pop	{r4, pc}
 800bdc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc4:	f840 2b04 	str.w	r2, [r0], #4
 800bdc8:	e7f3      	b.n	800bdb2 <__copybits+0x16>
 800bdca:	f842 3b04 	str.w	r3, [r2], #4
 800bdce:	e7f4      	b.n	800bdba <__copybits+0x1e>

0800bdd0 <__any_on>:
 800bdd0:	f100 0214 	add.w	r2, r0, #20
 800bdd4:	6900      	ldr	r0, [r0, #16]
 800bdd6:	114b      	asrs	r3, r1, #5
 800bdd8:	4298      	cmp	r0, r3
 800bdda:	b510      	push	{r4, lr}
 800bddc:	db11      	blt.n	800be02 <__any_on+0x32>
 800bdde:	dd0a      	ble.n	800bdf6 <__any_on+0x26>
 800bde0:	f011 011f 	ands.w	r1, r1, #31
 800bde4:	d007      	beq.n	800bdf6 <__any_on+0x26>
 800bde6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bdea:	fa24 f001 	lsr.w	r0, r4, r1
 800bdee:	fa00 f101 	lsl.w	r1, r0, r1
 800bdf2:	428c      	cmp	r4, r1
 800bdf4:	d10b      	bne.n	800be0e <__any_on+0x3e>
 800bdf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d803      	bhi.n	800be06 <__any_on+0x36>
 800bdfe:	2000      	movs	r0, #0
 800be00:	bd10      	pop	{r4, pc}
 800be02:	4603      	mov	r3, r0
 800be04:	e7f7      	b.n	800bdf6 <__any_on+0x26>
 800be06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be0a:	2900      	cmp	r1, #0
 800be0c:	d0f5      	beq.n	800bdfa <__any_on+0x2a>
 800be0e:	2001      	movs	r0, #1
 800be10:	e7f6      	b.n	800be00 <__any_on+0x30>

0800be12 <_calloc_r>:
 800be12:	b538      	push	{r3, r4, r5, lr}
 800be14:	fb02 f401 	mul.w	r4, r2, r1
 800be18:	4621      	mov	r1, r4
 800be1a:	f000 f857 	bl	800becc <_malloc_r>
 800be1e:	4605      	mov	r5, r0
 800be20:	b118      	cbz	r0, 800be2a <_calloc_r+0x18>
 800be22:	4622      	mov	r2, r4
 800be24:	2100      	movs	r1, #0
 800be26:	f7fc fd35 	bl	8008894 <memset>
 800be2a:	4628      	mov	r0, r5
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800be30 <_free_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4605      	mov	r5, r0
 800be34:	2900      	cmp	r1, #0
 800be36:	d045      	beq.n	800bec4 <_free_r+0x94>
 800be38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be3c:	1f0c      	subs	r4, r1, #4
 800be3e:	2b00      	cmp	r3, #0
 800be40:	bfb8      	it	lt
 800be42:	18e4      	addlt	r4, r4, r3
 800be44:	f000 fa36 	bl	800c2b4 <__malloc_lock>
 800be48:	4a1f      	ldr	r2, [pc, #124]	; (800bec8 <_free_r+0x98>)
 800be4a:	6813      	ldr	r3, [r2, #0]
 800be4c:	4610      	mov	r0, r2
 800be4e:	b933      	cbnz	r3, 800be5e <_free_r+0x2e>
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	6014      	str	r4, [r2, #0]
 800be54:	4628      	mov	r0, r5
 800be56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be5a:	f000 ba2c 	b.w	800c2b6 <__malloc_unlock>
 800be5e:	42a3      	cmp	r3, r4
 800be60:	d90c      	bls.n	800be7c <_free_r+0x4c>
 800be62:	6821      	ldr	r1, [r4, #0]
 800be64:	1862      	adds	r2, r4, r1
 800be66:	4293      	cmp	r3, r2
 800be68:	bf04      	itt	eq
 800be6a:	681a      	ldreq	r2, [r3, #0]
 800be6c:	685b      	ldreq	r3, [r3, #4]
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	bf04      	itt	eq
 800be72:	1852      	addeq	r2, r2, r1
 800be74:	6022      	streq	r2, [r4, #0]
 800be76:	6004      	str	r4, [r0, #0]
 800be78:	e7ec      	b.n	800be54 <_free_r+0x24>
 800be7a:	4613      	mov	r3, r2
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	b10a      	cbz	r2, 800be84 <_free_r+0x54>
 800be80:	42a2      	cmp	r2, r4
 800be82:	d9fa      	bls.n	800be7a <_free_r+0x4a>
 800be84:	6819      	ldr	r1, [r3, #0]
 800be86:	1858      	adds	r0, r3, r1
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d10b      	bne.n	800bea4 <_free_r+0x74>
 800be8c:	6820      	ldr	r0, [r4, #0]
 800be8e:	4401      	add	r1, r0
 800be90:	1858      	adds	r0, r3, r1
 800be92:	4282      	cmp	r2, r0
 800be94:	6019      	str	r1, [r3, #0]
 800be96:	d1dd      	bne.n	800be54 <_free_r+0x24>
 800be98:	6810      	ldr	r0, [r2, #0]
 800be9a:	6852      	ldr	r2, [r2, #4]
 800be9c:	605a      	str	r2, [r3, #4]
 800be9e:	4401      	add	r1, r0
 800bea0:	6019      	str	r1, [r3, #0]
 800bea2:	e7d7      	b.n	800be54 <_free_r+0x24>
 800bea4:	d902      	bls.n	800beac <_free_r+0x7c>
 800bea6:	230c      	movs	r3, #12
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	e7d3      	b.n	800be54 <_free_r+0x24>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	1821      	adds	r1, r4, r0
 800beb0:	428a      	cmp	r2, r1
 800beb2:	bf04      	itt	eq
 800beb4:	6811      	ldreq	r1, [r2, #0]
 800beb6:	6852      	ldreq	r2, [r2, #4]
 800beb8:	6062      	str	r2, [r4, #4]
 800beba:	bf04      	itt	eq
 800bebc:	1809      	addeq	r1, r1, r0
 800bebe:	6021      	streq	r1, [r4, #0]
 800bec0:	605c      	str	r4, [r3, #4]
 800bec2:	e7c7      	b.n	800be54 <_free_r+0x24>
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	20000204 	.word	0x20000204

0800becc <_malloc_r>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	1ccd      	adds	r5, r1, #3
 800bed0:	f025 0503 	bic.w	r5, r5, #3
 800bed4:	3508      	adds	r5, #8
 800bed6:	2d0c      	cmp	r5, #12
 800bed8:	bf38      	it	cc
 800beda:	250c      	movcc	r5, #12
 800bedc:	2d00      	cmp	r5, #0
 800bede:	4606      	mov	r6, r0
 800bee0:	db01      	blt.n	800bee6 <_malloc_r+0x1a>
 800bee2:	42a9      	cmp	r1, r5
 800bee4:	d903      	bls.n	800beee <_malloc_r+0x22>
 800bee6:	230c      	movs	r3, #12
 800bee8:	6033      	str	r3, [r6, #0]
 800beea:	2000      	movs	r0, #0
 800beec:	bd70      	pop	{r4, r5, r6, pc}
 800beee:	f000 f9e1 	bl	800c2b4 <__malloc_lock>
 800bef2:	4a21      	ldr	r2, [pc, #132]	; (800bf78 <_malloc_r+0xac>)
 800bef4:	6814      	ldr	r4, [r2, #0]
 800bef6:	4621      	mov	r1, r4
 800bef8:	b991      	cbnz	r1, 800bf20 <_malloc_r+0x54>
 800befa:	4c20      	ldr	r4, [pc, #128]	; (800bf7c <_malloc_r+0xb0>)
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	b91b      	cbnz	r3, 800bf08 <_malloc_r+0x3c>
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f98f 	bl	800c224 <_sbrk_r>
 800bf06:	6020      	str	r0, [r4, #0]
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f000 f98a 	bl	800c224 <_sbrk_r>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d124      	bne.n	800bf5e <_malloc_r+0x92>
 800bf14:	230c      	movs	r3, #12
 800bf16:	6033      	str	r3, [r6, #0]
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 f9cc 	bl	800c2b6 <__malloc_unlock>
 800bf1e:	e7e4      	b.n	800beea <_malloc_r+0x1e>
 800bf20:	680b      	ldr	r3, [r1, #0]
 800bf22:	1b5b      	subs	r3, r3, r5
 800bf24:	d418      	bmi.n	800bf58 <_malloc_r+0x8c>
 800bf26:	2b0b      	cmp	r3, #11
 800bf28:	d90f      	bls.n	800bf4a <_malloc_r+0x7e>
 800bf2a:	600b      	str	r3, [r1, #0]
 800bf2c:	50cd      	str	r5, [r1, r3]
 800bf2e:	18cc      	adds	r4, r1, r3
 800bf30:	4630      	mov	r0, r6
 800bf32:	f000 f9c0 	bl	800c2b6 <__malloc_unlock>
 800bf36:	f104 000b 	add.w	r0, r4, #11
 800bf3a:	1d23      	adds	r3, r4, #4
 800bf3c:	f020 0007 	bic.w	r0, r0, #7
 800bf40:	1ac3      	subs	r3, r0, r3
 800bf42:	d0d3      	beq.n	800beec <_malloc_r+0x20>
 800bf44:	425a      	negs	r2, r3
 800bf46:	50e2      	str	r2, [r4, r3]
 800bf48:	e7d0      	b.n	800beec <_malloc_r+0x20>
 800bf4a:	428c      	cmp	r4, r1
 800bf4c:	684b      	ldr	r3, [r1, #4]
 800bf4e:	bf16      	itet	ne
 800bf50:	6063      	strne	r3, [r4, #4]
 800bf52:	6013      	streq	r3, [r2, #0]
 800bf54:	460c      	movne	r4, r1
 800bf56:	e7eb      	b.n	800bf30 <_malloc_r+0x64>
 800bf58:	460c      	mov	r4, r1
 800bf5a:	6849      	ldr	r1, [r1, #4]
 800bf5c:	e7cc      	b.n	800bef8 <_malloc_r+0x2c>
 800bf5e:	1cc4      	adds	r4, r0, #3
 800bf60:	f024 0403 	bic.w	r4, r4, #3
 800bf64:	42a0      	cmp	r0, r4
 800bf66:	d005      	beq.n	800bf74 <_malloc_r+0xa8>
 800bf68:	1a21      	subs	r1, r4, r0
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f000 f95a 	bl	800c224 <_sbrk_r>
 800bf70:	3001      	adds	r0, #1
 800bf72:	d0cf      	beq.n	800bf14 <_malloc_r+0x48>
 800bf74:	6025      	str	r5, [r4, #0]
 800bf76:	e7db      	b.n	800bf30 <_malloc_r+0x64>
 800bf78:	20000204 	.word	0x20000204
 800bf7c:	20000208 	.word	0x20000208

0800bf80 <__ssputs_r>:
 800bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf84:	688e      	ldr	r6, [r1, #8]
 800bf86:	429e      	cmp	r6, r3
 800bf88:	4682      	mov	sl, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4690      	mov	r8, r2
 800bf8e:	4699      	mov	r9, r3
 800bf90:	d837      	bhi.n	800c002 <__ssputs_r+0x82>
 800bf92:	898a      	ldrh	r2, [r1, #12]
 800bf94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf98:	d031      	beq.n	800bffe <__ssputs_r+0x7e>
 800bf9a:	6825      	ldr	r5, [r4, #0]
 800bf9c:	6909      	ldr	r1, [r1, #16]
 800bf9e:	1a6f      	subs	r7, r5, r1
 800bfa0:	6965      	ldr	r5, [r4, #20]
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfa8:	fb95 f5f3 	sdiv	r5, r5, r3
 800bfac:	f109 0301 	add.w	r3, r9, #1
 800bfb0:	443b      	add	r3, r7
 800bfb2:	429d      	cmp	r5, r3
 800bfb4:	bf38      	it	cc
 800bfb6:	461d      	movcc	r5, r3
 800bfb8:	0553      	lsls	r3, r2, #21
 800bfba:	d530      	bpl.n	800c01e <__ssputs_r+0x9e>
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	f7ff ff85 	bl	800becc <_malloc_r>
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	b950      	cbnz	r0, 800bfdc <__ssputs_r+0x5c>
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	f8ca 3000 	str.w	r3, [sl]
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfdc:	463a      	mov	r2, r7
 800bfde:	6921      	ldr	r1, [r4, #16]
 800bfe0:	f7ff fb0e 	bl	800b600 <memcpy>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	6126      	str	r6, [r4, #16]
 800bff2:	6165      	str	r5, [r4, #20]
 800bff4:	443e      	add	r6, r7
 800bff6:	1bed      	subs	r5, r5, r7
 800bff8:	6026      	str	r6, [r4, #0]
 800bffa:	60a5      	str	r5, [r4, #8]
 800bffc:	464e      	mov	r6, r9
 800bffe:	454e      	cmp	r6, r9
 800c000:	d900      	bls.n	800c004 <__ssputs_r+0x84>
 800c002:	464e      	mov	r6, r9
 800c004:	4632      	mov	r2, r6
 800c006:	4641      	mov	r1, r8
 800c008:	6820      	ldr	r0, [r4, #0]
 800c00a:	f000 f93a 	bl	800c282 <memmove>
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	1b9b      	subs	r3, r3, r6
 800c012:	60a3      	str	r3, [r4, #8]
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	441e      	add	r6, r3
 800c018:	6026      	str	r6, [r4, #0]
 800c01a:	2000      	movs	r0, #0
 800c01c:	e7dc      	b.n	800bfd8 <__ssputs_r+0x58>
 800c01e:	462a      	mov	r2, r5
 800c020:	f000 f94a 	bl	800c2b8 <_realloc_r>
 800c024:	4606      	mov	r6, r0
 800c026:	2800      	cmp	r0, #0
 800c028:	d1e2      	bne.n	800bff0 <__ssputs_r+0x70>
 800c02a:	6921      	ldr	r1, [r4, #16]
 800c02c:	4650      	mov	r0, sl
 800c02e:	f7ff feff 	bl	800be30 <_free_r>
 800c032:	e7c8      	b.n	800bfc6 <__ssputs_r+0x46>

0800c034 <_svfiprintf_r>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	461d      	mov	r5, r3
 800c03a:	898b      	ldrh	r3, [r1, #12]
 800c03c:	061f      	lsls	r7, r3, #24
 800c03e:	b09d      	sub	sp, #116	; 0x74
 800c040:	4680      	mov	r8, r0
 800c042:	460c      	mov	r4, r1
 800c044:	4616      	mov	r6, r2
 800c046:	d50f      	bpl.n	800c068 <_svfiprintf_r+0x34>
 800c048:	690b      	ldr	r3, [r1, #16]
 800c04a:	b96b      	cbnz	r3, 800c068 <_svfiprintf_r+0x34>
 800c04c:	2140      	movs	r1, #64	; 0x40
 800c04e:	f7ff ff3d 	bl	800becc <_malloc_r>
 800c052:	6020      	str	r0, [r4, #0]
 800c054:	6120      	str	r0, [r4, #16]
 800c056:	b928      	cbnz	r0, 800c064 <_svfiprintf_r+0x30>
 800c058:	230c      	movs	r3, #12
 800c05a:	f8c8 3000 	str.w	r3, [r8]
 800c05e:	f04f 30ff 	mov.w	r0, #4294967295
 800c062:	e0c8      	b.n	800c1f6 <_svfiprintf_r+0x1c2>
 800c064:	2340      	movs	r3, #64	; 0x40
 800c066:	6163      	str	r3, [r4, #20]
 800c068:	2300      	movs	r3, #0
 800c06a:	9309      	str	r3, [sp, #36]	; 0x24
 800c06c:	2320      	movs	r3, #32
 800c06e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c072:	2330      	movs	r3, #48	; 0x30
 800c074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c078:	9503      	str	r5, [sp, #12]
 800c07a:	f04f 0b01 	mov.w	fp, #1
 800c07e:	4637      	mov	r7, r6
 800c080:	463d      	mov	r5, r7
 800c082:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c086:	b10b      	cbz	r3, 800c08c <_svfiprintf_r+0x58>
 800c088:	2b25      	cmp	r3, #37	; 0x25
 800c08a:	d13e      	bne.n	800c10a <_svfiprintf_r+0xd6>
 800c08c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c090:	d00b      	beq.n	800c0aa <_svfiprintf_r+0x76>
 800c092:	4653      	mov	r3, sl
 800c094:	4632      	mov	r2, r6
 800c096:	4621      	mov	r1, r4
 800c098:	4640      	mov	r0, r8
 800c09a:	f7ff ff71 	bl	800bf80 <__ssputs_r>
 800c09e:	3001      	adds	r0, #1
 800c0a0:	f000 80a4 	beq.w	800c1ec <_svfiprintf_r+0x1b8>
 800c0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a6:	4453      	add	r3, sl
 800c0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0aa:	783b      	ldrb	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 809d 	beq.w	800c1ec <_svfiprintf_r+0x1b8>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	9307      	str	r3, [sp, #28]
 800c0c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c0c6:	462f      	mov	r7, r5
 800c0c8:	2205      	movs	r2, #5
 800c0ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c0ce:	4850      	ldr	r0, [pc, #320]	; (800c210 <_svfiprintf_r+0x1dc>)
 800c0d0:	f7f4 f8a6 	bl	8000220 <memchr>
 800c0d4:	9b04      	ldr	r3, [sp, #16]
 800c0d6:	b9d0      	cbnz	r0, 800c10e <_svfiprintf_r+0xda>
 800c0d8:	06d9      	lsls	r1, r3, #27
 800c0da:	bf44      	itt	mi
 800c0dc:	2220      	movmi	r2, #32
 800c0de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0e2:	071a      	lsls	r2, r3, #28
 800c0e4:	bf44      	itt	mi
 800c0e6:	222b      	movmi	r2, #43	; 0x2b
 800c0e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0ec:	782a      	ldrb	r2, [r5, #0]
 800c0ee:	2a2a      	cmp	r2, #42	; 0x2a
 800c0f0:	d015      	beq.n	800c11e <_svfiprintf_r+0xea>
 800c0f2:	9a07      	ldr	r2, [sp, #28]
 800c0f4:	462f      	mov	r7, r5
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	250a      	movs	r5, #10
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c100:	3b30      	subs	r3, #48	; 0x30
 800c102:	2b09      	cmp	r3, #9
 800c104:	d94d      	bls.n	800c1a2 <_svfiprintf_r+0x16e>
 800c106:	b1b8      	cbz	r0, 800c138 <_svfiprintf_r+0x104>
 800c108:	e00f      	b.n	800c12a <_svfiprintf_r+0xf6>
 800c10a:	462f      	mov	r7, r5
 800c10c:	e7b8      	b.n	800c080 <_svfiprintf_r+0x4c>
 800c10e:	4a40      	ldr	r2, [pc, #256]	; (800c210 <_svfiprintf_r+0x1dc>)
 800c110:	1a80      	subs	r0, r0, r2
 800c112:	fa0b f000 	lsl.w	r0, fp, r0
 800c116:	4318      	orrs	r0, r3
 800c118:	9004      	str	r0, [sp, #16]
 800c11a:	463d      	mov	r5, r7
 800c11c:	e7d3      	b.n	800c0c6 <_svfiprintf_r+0x92>
 800c11e:	9a03      	ldr	r2, [sp, #12]
 800c120:	1d11      	adds	r1, r2, #4
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	9103      	str	r1, [sp, #12]
 800c126:	2a00      	cmp	r2, #0
 800c128:	db01      	blt.n	800c12e <_svfiprintf_r+0xfa>
 800c12a:	9207      	str	r2, [sp, #28]
 800c12c:	e004      	b.n	800c138 <_svfiprintf_r+0x104>
 800c12e:	4252      	negs	r2, r2
 800c130:	f043 0302 	orr.w	r3, r3, #2
 800c134:	9207      	str	r2, [sp, #28]
 800c136:	9304      	str	r3, [sp, #16]
 800c138:	783b      	ldrb	r3, [r7, #0]
 800c13a:	2b2e      	cmp	r3, #46	; 0x2e
 800c13c:	d10c      	bne.n	800c158 <_svfiprintf_r+0x124>
 800c13e:	787b      	ldrb	r3, [r7, #1]
 800c140:	2b2a      	cmp	r3, #42	; 0x2a
 800c142:	d133      	bne.n	800c1ac <_svfiprintf_r+0x178>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	1d1a      	adds	r2, r3, #4
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	9203      	str	r2, [sp, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfb8      	it	lt
 800c150:	f04f 33ff 	movlt.w	r3, #4294967295
 800c154:	3702      	adds	r7, #2
 800c156:	9305      	str	r3, [sp, #20]
 800c158:	4d2e      	ldr	r5, [pc, #184]	; (800c214 <_svfiprintf_r+0x1e0>)
 800c15a:	7839      	ldrb	r1, [r7, #0]
 800c15c:	2203      	movs	r2, #3
 800c15e:	4628      	mov	r0, r5
 800c160:	f7f4 f85e 	bl	8000220 <memchr>
 800c164:	b138      	cbz	r0, 800c176 <_svfiprintf_r+0x142>
 800c166:	2340      	movs	r3, #64	; 0x40
 800c168:	1b40      	subs	r0, r0, r5
 800c16a:	fa03 f000 	lsl.w	r0, r3, r0
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	4303      	orrs	r3, r0
 800c172:	3701      	adds	r7, #1
 800c174:	9304      	str	r3, [sp, #16]
 800c176:	7839      	ldrb	r1, [r7, #0]
 800c178:	4827      	ldr	r0, [pc, #156]	; (800c218 <_svfiprintf_r+0x1e4>)
 800c17a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c17e:	2206      	movs	r2, #6
 800c180:	1c7e      	adds	r6, r7, #1
 800c182:	f7f4 f84d 	bl	8000220 <memchr>
 800c186:	2800      	cmp	r0, #0
 800c188:	d038      	beq.n	800c1fc <_svfiprintf_r+0x1c8>
 800c18a:	4b24      	ldr	r3, [pc, #144]	; (800c21c <_svfiprintf_r+0x1e8>)
 800c18c:	bb13      	cbnz	r3, 800c1d4 <_svfiprintf_r+0x1a0>
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	3307      	adds	r3, #7
 800c192:	f023 0307 	bic.w	r3, r3, #7
 800c196:	3308      	adds	r3, #8
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19c:	444b      	add	r3, r9
 800c19e:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a0:	e76d      	b.n	800c07e <_svfiprintf_r+0x4a>
 800c1a2:	fb05 3202 	mla	r2, r5, r2, r3
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	460f      	mov	r7, r1
 800c1aa:	e7a6      	b.n	800c0fa <_svfiprintf_r+0xc6>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	3701      	adds	r7, #1
 800c1b0:	9305      	str	r3, [sp, #20]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	250a      	movs	r5, #10
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1bc:	3a30      	subs	r2, #48	; 0x30
 800c1be:	2a09      	cmp	r2, #9
 800c1c0:	d903      	bls.n	800c1ca <_svfiprintf_r+0x196>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0c8      	beq.n	800c158 <_svfiprintf_r+0x124>
 800c1c6:	9105      	str	r1, [sp, #20]
 800c1c8:	e7c6      	b.n	800c158 <_svfiprintf_r+0x124>
 800c1ca:	fb05 2101 	mla	r1, r5, r1, r2
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	e7f0      	b.n	800c1b6 <_svfiprintf_r+0x182>
 800c1d4:	ab03      	add	r3, sp, #12
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	4622      	mov	r2, r4
 800c1da:	4b11      	ldr	r3, [pc, #68]	; (800c220 <_svfiprintf_r+0x1ec>)
 800c1dc:	a904      	add	r1, sp, #16
 800c1de:	4640      	mov	r0, r8
 800c1e0:	f7fc fbf4 	bl	80089cc <_printf_float>
 800c1e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c1e8:	4681      	mov	r9, r0
 800c1ea:	d1d6      	bne.n	800c19a <_svfiprintf_r+0x166>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	065b      	lsls	r3, r3, #25
 800c1f0:	f53f af35 	bmi.w	800c05e <_svfiprintf_r+0x2a>
 800c1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1f6:	b01d      	add	sp, #116	; 0x74
 800c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fc:	ab03      	add	r3, sp, #12
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	4622      	mov	r2, r4
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <_svfiprintf_r+0x1ec>)
 800c204:	a904      	add	r1, sp, #16
 800c206:	4640      	mov	r0, r8
 800c208:	f7fc fe96 	bl	8008f38 <_printf_i>
 800c20c:	e7ea      	b.n	800c1e4 <_svfiprintf_r+0x1b0>
 800c20e:	bf00      	nop
 800c210:	0800ccf4 	.word	0x0800ccf4
 800c214:	0800ccfa 	.word	0x0800ccfa
 800c218:	0800ccfe 	.word	0x0800ccfe
 800c21c:	080089cd 	.word	0x080089cd
 800c220:	0800bf81 	.word	0x0800bf81

0800c224 <_sbrk_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4c06      	ldr	r4, [pc, #24]	; (800c240 <_sbrk_r+0x1c>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4605      	mov	r5, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	f7f5 fd76 	bl	8001d20 <_sbrk>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_sbrk_r+0x1a>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_sbrk_r+0x1a>
 800c23c:	602b      	str	r3, [r5, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20009648 	.word	0x20009648

0800c244 <strncmp>:
 800c244:	b510      	push	{r4, lr}
 800c246:	b16a      	cbz	r2, 800c264 <strncmp+0x20>
 800c248:	3901      	subs	r1, #1
 800c24a:	1884      	adds	r4, r0, r2
 800c24c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c250:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c254:	4293      	cmp	r3, r2
 800c256:	d103      	bne.n	800c260 <strncmp+0x1c>
 800c258:	42a0      	cmp	r0, r4
 800c25a:	d001      	beq.n	800c260 <strncmp+0x1c>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1f5      	bne.n	800c24c <strncmp+0x8>
 800c260:	1a98      	subs	r0, r3, r2
 800c262:	bd10      	pop	{r4, pc}
 800c264:	4610      	mov	r0, r2
 800c266:	e7fc      	b.n	800c262 <strncmp+0x1e>

0800c268 <__ascii_wctomb>:
 800c268:	b149      	cbz	r1, 800c27e <__ascii_wctomb+0x16>
 800c26a:	2aff      	cmp	r2, #255	; 0xff
 800c26c:	bf85      	ittet	hi
 800c26e:	238a      	movhi	r3, #138	; 0x8a
 800c270:	6003      	strhi	r3, [r0, #0]
 800c272:	700a      	strbls	r2, [r1, #0]
 800c274:	f04f 30ff 	movhi.w	r0, #4294967295
 800c278:	bf98      	it	ls
 800c27a:	2001      	movls	r0, #1
 800c27c:	4770      	bx	lr
 800c27e:	4608      	mov	r0, r1
 800c280:	4770      	bx	lr

0800c282 <memmove>:
 800c282:	4288      	cmp	r0, r1
 800c284:	b510      	push	{r4, lr}
 800c286:	eb01 0302 	add.w	r3, r1, r2
 800c28a:	d807      	bhi.n	800c29c <memmove+0x1a>
 800c28c:	1e42      	subs	r2, r0, #1
 800c28e:	4299      	cmp	r1, r3
 800c290:	d00a      	beq.n	800c2a8 <memmove+0x26>
 800c292:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c296:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c29a:	e7f8      	b.n	800c28e <memmove+0xc>
 800c29c:	4283      	cmp	r3, r0
 800c29e:	d9f5      	bls.n	800c28c <memmove+0xa>
 800c2a0:	1881      	adds	r1, r0, r2
 800c2a2:	1ad2      	subs	r2, r2, r3
 800c2a4:	42d3      	cmn	r3, r2
 800c2a6:	d100      	bne.n	800c2aa <memmove+0x28>
 800c2a8:	bd10      	pop	{r4, pc}
 800c2aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c2b2:	e7f7      	b.n	800c2a4 <memmove+0x22>

0800c2b4 <__malloc_lock>:
 800c2b4:	4770      	bx	lr

0800c2b6 <__malloc_unlock>:
 800c2b6:	4770      	bx	lr

0800c2b8 <_realloc_r>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	4614      	mov	r4, r2
 800c2be:	460e      	mov	r6, r1
 800c2c0:	b921      	cbnz	r1, 800c2cc <_realloc_r+0x14>
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c2c8:	f7ff be00 	b.w	800becc <_malloc_r>
 800c2cc:	b922      	cbnz	r2, 800c2d8 <_realloc_r+0x20>
 800c2ce:	f7ff fdaf 	bl	800be30 <_free_r>
 800c2d2:	4625      	mov	r5, r4
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d8:	f000 f814 	bl	800c304 <_malloc_usable_size_r>
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	d20f      	bcs.n	800c300 <_realloc_r+0x48>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	f7ff fdf2 	bl	800becc <_malloc_r>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0f2      	beq.n	800c2d4 <_realloc_r+0x1c>
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	f7ff f985 	bl	800b600 <memcpy>
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff fd99 	bl	800be30 <_free_r>
 800c2fe:	e7e9      	b.n	800c2d4 <_realloc_r+0x1c>
 800c300:	4635      	mov	r5, r6
 800c302:	e7e7      	b.n	800c2d4 <_realloc_r+0x1c>

0800c304 <_malloc_usable_size_r>:
 800c304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c308:	1f18      	subs	r0, r3, #4
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	bfbc      	itt	lt
 800c30e:	580b      	ldrlt	r3, [r1, r0]
 800c310:	18c0      	addlt	r0, r0, r3
 800c312:	4770      	bx	lr

0800c314 <_init>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	bf00      	nop
 800c318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31a:	bc08      	pop	{r3}
 800c31c:	469e      	mov	lr, r3
 800c31e:	4770      	bx	lr

0800c320 <_fini>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

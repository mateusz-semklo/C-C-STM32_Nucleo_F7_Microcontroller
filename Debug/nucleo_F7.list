
nucleo_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bde4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800bfb8  0800bfb8  0001bfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca90  0800ca90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca90  0800ca90  0001ca90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca98  0800ca98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca98  0800ca98  0001ca98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca9c  0800ca9c  0001ca9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800caa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009424  200001dc  0800cc7c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009600  0800cc7c  00029600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2ca  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb6  00000000  00000000  0003c4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  00040090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  00041570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a4af  00000000  00000000  00042840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000141e7  00000000  00000000  0006ccef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101c84  00000000  00000000  00080ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00182b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006240  00000000  00000000  00182bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf9c 	.word	0x0800bf9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800bf9c 	.word	0x0800bf9c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <MX_ADC1_Init+0xf4>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fe6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001004:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800100c:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800101a:	2204      	movs	r2, #4
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800102e:	f001 fa5d 	bl	80024ec <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001038:	f000 fd20 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800103c:	2304      	movs	r3, #4
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001044:	2303      	movs	r3, #3
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800104e:	f001 fcdf 	bl	8002a10 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001058:	f000 fd10 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800105c:	2305      	movs	r3, #5
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001060:	2302      	movs	r3, #2
 8001062:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_ADC1_Init+0xf0>)
 800106a:	f001 fcd1 	bl	8002a10 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001074:	f000 fd02 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001078:	2309      	movs	r3, #9
 800107a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800107c:	2303      	movs	r3, #3
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001086:	f001 fcc3 	bl	8002a10 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001090:	f000 fcf4 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001094:	230a      	movs	r3, #10
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001098:	2304      	movs	r3, #4
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0xf0>)
 80010a2:	f001 fcb5 	bl	8002a10 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80010ac:	f000 fce6 	bl	8001a7c <Error_Handler>
  }

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000208 	.word	0x20000208
 80010bc:	40012000 	.word	0x40012000

080010c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_ADC_MspInit+0x148>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	f040 808d 	bne.w	80011fe <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	4a48      	ldr	r2, [pc, #288]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6453      	str	r3, [r2, #68]	; 0x44
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_ADC_MspInit+0x14c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a42      	ldr	r2, [pc, #264]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a3c      	ldr	r2, [pc, #240]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a36      	ldr	r2, [pc, #216]	; (800120c <HAL_ADC_MspInit+0x14c>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_ADC_MspInit+0x14c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = Angle_Rotor_Pin;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Angle_Rotor_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	482e      	ldr	r0, [pc, #184]	; (8001210 <HAL_ADC_MspInit+0x150>)
 8001158:	f003 f840 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRENT_Ia_Pin|CURRENT_Ib_Pin;
 800115c:	2330      	movs	r3, #48	; 0x30
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4829      	ldr	r0, [pc, #164]	; (8001214 <HAL_ADC_MspInit+0x154>)
 8001170:	f003 f834 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRENT_Ic_Pin;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CURRENT_Ic_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4824      	ldr	r0, [pc, #144]	; (8001218 <HAL_ADC_MspInit+0x158>)
 8001188:	f003 f828 	bl	80041dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_ADC_MspInit+0x15c>)
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_ADC_MspInit+0x160>)
 8001190:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_ADC_MspInit+0x15c>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_ADC_MspInit+0x15c>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011d4:	f001 fffe 	bl	80031d4 <HAL_DMA_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80011de:	f000 fc4d 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <HAL_ADC_MspInit+0x15c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	2012      	movs	r0, #18
 80011f4:	f001 ffb7 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011f8:	2012      	movs	r0, #18
 80011fa:	f001 ffd0 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012000 	.word	0x40012000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020800 	.word	0x40020800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	20000250 	.word	0x20000250
 8001220:	40026410 	.word	0x40026410

08001224 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_DMA_Init+0x60>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_DMA_Init+0x60>)
 8001230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_DMA_Init+0x60>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_DMA_Init+0x60>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <MX_DMA_Init+0x60>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_DMA_Init+0x60>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2104      	movs	r1, #4
 800125e:	200e      	movs	r0, #14
 8001260:	f001 ff81 	bl	8003166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001264:	200e      	movs	r0, #14
 8001266:	f001 ff9a 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2102      	movs	r1, #2
 800126e:	2038      	movs	r0, #56	; 0x38
 8001270:	f001 ff79 	bl	8003166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001274:	2038      	movs	r0, #56	; 0x38
 8001276:	f001 ff92 	bl	800319e <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_ETH_Init+0x78>)
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_ETH_Init+0x7c>)
 8001290:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_ETH_Init+0x78>)
 8001294:	2201      	movs	r2, #1
 8001296:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_ETH_Init+0x78>)
 800129a:	2200      	movs	r2, #0
 800129c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_ETH_Init+0x78>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_ETH_Init+0x78>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ETH_Init+0x78>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	3302      	adds	r3, #2
 80012b6:	22e1      	movs	r2, #225	; 0xe1
 80012b8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_ETH_Init+0x78>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	3303      	adds	r3, #3
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_ETH_Init+0x78>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_ETH_Init+0x78>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	3305      	adds	r3, #5
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_ETH_Init+0x78>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_ETH_Init+0x78>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_ETH_Init+0x78>)
 80012e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ea:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_ETH_Init+0x78>)
 80012ee:	f002 fb09 	bl	8003904 <HAL_ETH_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80012f8:	f000 fbc0 	bl	8001a7c <Error_Handler>
  }

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002b0 	.word	0x200002b0
 8001304:	40028000 	.word	0x40028000

08001308 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_ETH_MspInit+0x158>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 8096 	bne.w	8001458 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a46      	ldr	r2, [pc, #280]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800134a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a3a      	ldr	r2, [pc, #232]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a34      	ldr	r2, [pc, #208]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_ETH_MspInit+0x15c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013d4:	2332      	movs	r3, #50	; 0x32
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <HAL_ETH_MspInit+0x160>)
 80013f0:	f002 fef4 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013f4:	2386      	movs	r3, #134	; 0x86
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001404:	230b      	movs	r3, #11
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4817      	ldr	r0, [pc, #92]	; (800146c <HAL_ETH_MspInit+0x164>)
 8001410:	f002 fee4 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001426:	230b      	movs	r3, #11
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	480f      	ldr	r0, [pc, #60]	; (8001470 <HAL_ETH_MspInit+0x168>)
 8001432:	f002 fed3 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001448:	230b      	movs	r3, #11
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <HAL_ETH_MspInit+0x16c>)
 8001454:	f002 fec2 	bl	80041dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40028000 	.word	0x40028000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40021800 	.word	0x40021800

08001478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <MX_GPIO_Init+0x158>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a3d      	ldr	r2, [pc, #244]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x158>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <MX_GPIO_Init+0x158>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <MX_GPIO_Init+0x158>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x158>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f244 0181 	movw	r1, #16513	; 0x4081
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <MX_GPIO_Init+0x15c>)
 800153e:	f003 f80f 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <MX_GPIO_Init+0x160>)
 8001548:	f003 f80a 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_GPIO_Init+0x164>)
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <MX_GPIO_Init+0x168>)
 8001562:	f002 fe3b 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001566:	f244 0381 	movw	r3, #16513	; 0x4081
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4815      	ldr	r0, [pc, #84]	; (80015d4 <MX_GPIO_Init+0x15c>)
 8001580:	f002 fe2c 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <MX_GPIO_Init+0x160>)
 800159c:	f002 fe1e 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4809      	ldr	r0, [pc, #36]	; (80015d8 <MX_GPIO_Init+0x160>)
 80015b4:	f002 fe12 	bl	80041dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	210a      	movs	r1, #10
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f001 fdd2 	bl	8003166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f001 fdeb 	bl	800319e <HAL_NVIC_EnableIRQ>

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40020800 	.word	0x40020800

080015e4 <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d105      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
d++;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001600:	801a      	strh	r2, [r3, #0]
         }
         **/

		}

}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40010000 	.word	0x40010000
 8001614:	20008ffc 	.word	0x20008ffc

08001618 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
	{


	}
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart3, &recive, 1);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163c:	d109      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x26>
	{
		 HAL_TIMEx_HallSensor_Start(&htim3);
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <HAL_GPIO_EXTI_Callback+0x30>)
 8001640:	f005 fbc0 	bl	8006dc4 <HAL_TIMEx_HallSensor_Start>
		 HAL_TIM_Base_Start_IT(&htim1);
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <HAL_GPIO_EXTI_Callback+0x34>)
 8001646:	f004 fa1b 	bl	8005a80 <HAL_TIM_Base_Start_IT>
		 HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800164a:	2100      	movs	r1, #0
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <HAL_GPIO_EXTI_Callback+0x34>)
 800164e:	f004 fa77 	bl	8005b40 <HAL_TIM_PWM_Start_IT>
		**/


	}

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20009014 	.word	0x20009014
 8001660:	20009054 	.word	0x20009054
 8001664:	00000000 	.word	0x00000000

08001668 <HAL_ADC_ConvCpltCallback>:

void   HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08d      	sub	sp, #52	; 0x34
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

				Ia=(pomiar[0]-2950) * 0.0044;  // 2.5 v / 3.6 v x 4095 = 2843
 8001670:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b21b      	sxth	r3, r3
 8001676:	f6a3 3386 	subw	r3, r3, #2950	; 0xb86
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff72 	bl	8000564 <__aeabi_i2d>
 8001680:	a35d      	add	r3, pc, #372	; (adr r3, 80017f8 <HAL_ADC_ConvCpltCallback+0x190>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ffd7 	bl	8000638 <__aeabi_dmul>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	4618      	mov	r0, r3
 8001690:	4621      	mov	r1, r4
 8001692:	f7ff fac9 	bl	8000c28 <__aeabi_d2f>
 8001696:	4602      	mov	r2, r0
 8001698:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_ADC_ConvCpltCallback+0x1a4>)
 800169a:	601a      	str	r2, [r3, #0]
			    Ib=(pomiar[1]-2950) * 0.0044;  // 3.3/4095 * 1/0.185 [v/a] == 0,00435 A
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800169e:	885b      	ldrh	r3, [r3, #2]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	f6a3 3386 	subw	r3, r3, #2950	; 0xb86
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff5c 	bl	8000564 <__aeabi_i2d>
 80016ac:	a352      	add	r3, pc, #328	; (adr r3, 80017f8 <HAL_ADC_ConvCpltCallback+0x190>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ffc1 	bl	8000638 <__aeabi_dmul>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	4618      	mov	r0, r3
 80016bc:	4621      	mov	r1, r4
 80016be:	f7ff fab3 	bl	8000c28 <__aeabi_d2f>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80016c6:	601a      	str	r2, [r3, #0]
			    Ic=(pomiar[2]-2950) * 0.0044;
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016ca:	889b      	ldrh	r3, [r3, #4]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	f6a3 3386 	subw	r3, r3, #2950	; 0xb86
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff46 	bl	8000564 <__aeabi_i2d>
 80016d8:	a347      	add	r3, pc, #284	; (adr r3, 80017f8 <HAL_ADC_ConvCpltCallback+0x190>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ffab 	bl	8000638 <__aeabi_dmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	4618      	mov	r0, r3
 80016e8:	4621      	mov	r1, r4
 80016ea:	f7ff fa9d 	bl	8000c28 <__aeabi_d2f>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80016f2:	601a      	str	r2, [r3, #0]
			    theta=((int16_t)(pomiar[3] * 0.0879));
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016f6:	88db      	ldrh	r3, [r3, #6]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff32 	bl	8000564 <__aeabi_i2d>
 8001700:	a33f      	add	r3, pc, #252	; (adr r3, 8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff97 	bl	8000638 <__aeabi_dmul>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff fa41 	bl	8000b98 <__aeabi_d2iz>
 8001716:	4603      	mov	r3, r0
 8001718:	b21b      	sxth	r3, r3
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001724:	edc3 7a00 	vstr	s15, [r3]

f++;
 8001728:	4b3c      	ldr	r3, [pc, #240]	; (800181c <HAL_ADC_ConvCpltCallback+0x1b4>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001732:	801a      	strh	r2, [r3, #0]

			    arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	617a      	str	r2, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	4b37      	ldr	r3, [pc, #220]	; (8001820 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001746:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 800174e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001752:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001828 <HAL_ADC_ConvCpltCallback+0x1c0>
 8001756:	ee27 7a87 	vmul.f32	s14, s15, s14
 800175a:	edd7 7a04 	vldr	s15, [r7, #16]
 800175e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800182c <HAL_ADC_ConvCpltCallback+0x1c4>
 8001762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	edc3 7a00 	vstr	s15, [r3]
			    arm_sin_cos_f32(theta, &sinVal, &cosVal);
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	492e      	ldr	r1, [pc, #184]	; (8001830 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001778:	482e      	ldr	r0, [pc, #184]	; (8001834 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	f006 fd29 	bl	80081d4 <arm_sin_cos_f32>
			    arm_park_f32(Ialpha, Ibeta, &pId, &pIq, sinVal, cosVal);
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001794:	62b9      	str	r1, [r7, #40]	; 0x28
 8001796:	4928      	ldr	r1, [pc, #160]	; (8001838 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001798:	6279      	str	r1, [r7, #36]	; 0x24
 800179a:	4928      	ldr	r1, [pc, #160]	; (800183c <HAL_ADC_ConvCpltCallback+0x1d4>)
 800179c:	6239      	str	r1, [r7, #32]
 800179e:	61fa      	str	r2, [r7, #28]
 80017a0:	61bb      	str	r3, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80017a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80017c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017c8:	eeb1 7a67 	vneg.f32	s14, s15
 80017cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	edc3 7a00 	vstr	s15, [r3]

						}

**/

}
 80017ea:	bf00      	nop
 80017ec:	3734      	adds	r7, #52	; 0x34
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	f3af 8000 	nop.w
 80017f8:	01a36e2f 	.word	0x01a36e2f
 80017fc:	3f7205bc 	.word	0x3f7205bc
 8001800:	495182aa 	.word	0x495182aa
 8001804:	3fb6809d 	.word	0x3fb6809d
 8001808:	20008fd8 	.word	0x20008fd8
 800180c:	20000328 	.word	0x20000328
 8001810:	20008fe0 	.word	0x20008fe0
 8001814:	20008ff8 	.word	0x20008ff8
 8001818:	20008fd0 	.word	0x20008fd0
 800181c:	200001f8 	.word	0x200001f8
 8001820:	20008ff0 	.word	0x20008ff0
 8001824:	20008fec 	.word	0x20008fec
 8001828:	3f13cd3a 	.word	0x3f13cd3a
 800182c:	3f93cd3a 	.word	0x3f93cd3a
 8001830:	2000900c 	.word	0x2000900c
 8001834:	20000300 	.word	0x20000300
 8001838:	20008ff4 	.word	0x20008ff4
 800183c:	200002fc 	.word	0x200002fc

08001840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001844:	f000 fdd3 	bl	80023ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001848:	f000 f880 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184c:	f7ff fe14 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 8001850:	f7ff fce8 	bl	8001224 <MX_DMA_Init>
  MX_ETH_Init();
 8001854:	f7ff fd18 	bl	8001288 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001858:	f000 fc12 	bl	8002080 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800185c:	f000 fd14 	bl	8002288 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001860:	f000 fab8 	bl	8001dd4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001864:	f000 fbdc 	bl	8002020 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001868:	f7ff fbae 	bl	8000fc8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800186c:	f000 f9f0 	bl	8001c50 <MX_TIM1_Init>
  //////// konfiguracja Timer 1  ////////////
  // TIM1->ARR=limit_H_ARR/2;
 //  TIM1->PSC=0;
 //  TIM1->CCR1=5000;

   TIM1->ARR=0xFFFF;
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <main+0xe0>)
 8001872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c

   TIM1->PSC=500;
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <main+0xe0>)
 800187a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
   TIM1->CCR1=30000;
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <main+0xe0>)
 8001882:	f247 5230 	movw	r2, #30000	; 0x7530
 8001886:	635a      	str	r2, [r3, #52]	; 0x34

  // HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR2, TIM_COMMUTATION_TRGI);


   //////// konfiguracja Timer 3  ////////////
    TIM3->ARR=0xFFFF;
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <main+0xe4>)
 800188a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->PSC=500;
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <main+0xe4>)
 8001892:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->CCR2=2;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <main+0xe4>)
 800189a:	2202      	movs	r2, #2
 800189c:	639a      	str	r2, [r3, #56]	; 0x38



 /////////// inicjalizacja pid ////////////////
    pid.Kp=1;
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <main+0xe8>)
 80018a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018a4:	619a      	str	r2, [r3, #24]
    pid.Ki=5;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <main+0xe8>)
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <main+0xec>)
 80018aa:	61da      	str	r2, [r3, #28]
    pid.Kd=0;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <main+0xe8>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&pid, 1);
 80018b4:	2101      	movs	r1, #1
 80018b6:	481c      	ldr	r0, [pc, #112]	; (8001928 <main+0xe8>)
 80018b8:	f006 fc56 	bl	8008168 <arm_pid_init_f32>


    //////// konfiguracja ADC  ////////////
     HAL_ADC_Start_DMA(&hadc1,pomiar,4);
 80018bc:	2204      	movs	r2, #4
 80018be:	491c      	ldr	r1, [pc, #112]	; (8001930 <main+0xf0>)
 80018c0:	481c      	ldr	r0, [pc, #112]	; (8001934 <main+0xf4>)
 80018c2:	f000 ff99 	bl	80027f8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80018c6:	2140      	movs	r1, #64	; 0x40
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <main+0xf8>)
 80018ca:	f002 fe31 	bl	8004530 <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <main+0x9c>
		  a=1;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <main+0xfc>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	e002      	b.n	80018e2 <main+0xa2>
	  else
		  a=0;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <main+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	4816      	ldr	r0, [pc, #88]	; (8001940 <main+0x100>)
 80018e6:	f002 fe23 	bl	8004530 <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <main+0xb8>
	  		  b=1;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <main+0x104>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	e002      	b.n	80018fe <main+0xbe>
	  else
		  b=0;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <main+0x104>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))
 80018fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001902:	480f      	ldr	r0, [pc, #60]	; (8001940 <main+0x100>)
 8001904:	f002 fe14 	bl	8004530 <HAL_GPIO_ReadPin>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <main+0xd6>
	  		  c=1;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <main+0x108>)
 8001910:	2201      	movs	r2, #1
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	e7d7      	b.n	80018c6 <main+0x86>
	  else
		  c=0;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <main+0x108>)
 8001918:	2200      	movs	r2, #0
 800191a:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 800191c:	e7d3      	b.n	80018c6 <main+0x86>
 800191e:	bf00      	nop
 8001920:	40010000 	.word	0x40010000
 8001924:	40000400 	.word	0x40000400
 8001928:	20000304 	.word	0x20000304
 800192c:	40a00000 	.word	0x40a00000
 8001930:	20008fd8 	.word	0x20008fd8
 8001934:	20000208 	.word	0x20000208
 8001938:	40020000 	.word	0x40020000
 800193c:	20009006 	.word	0x20009006
 8001940:	40020800 	.word	0x40020800
 8001944:	200002f8 	.word	0x200002f8
 8001948:	20008fe6 	.word	0x20008fe6

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0b4      	sub	sp, #208	; 0xd0
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001956:	2230      	movs	r2, #48	; 0x30
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f006 fdde 	bl	800851c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	2284      	movs	r2, #132	; 0x84
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f006 fdcf 	bl	800851c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800197e:	f002 ff69 	bl	8004854 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <SystemClock_Config+0x124>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <SystemClock_Config+0x124>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <SystemClock_Config+0x124>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <SystemClock_Config+0x128>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019a2:	4a34      	ldr	r2, [pc, #208]	; (8001a74 <SystemClock_Config+0x128>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <SystemClock_Config+0x128>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d2:	2304      	movs	r3, #4
 80019d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80019d8:	23d8      	movs	r3, #216	; 0xd8
 80019da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019de:	2304      	movs	r3, #4
 80019e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80019e4:	2309      	movs	r3, #9
 80019e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff90 	bl	8004914 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019fa:	f000 f83f 	bl	8001a7c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019fe:	f002 ff39 	bl	8004874 <HAL_PWREx_EnableOverDrive>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a08:	f000 f838 	bl	8001a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a30:	2103      	movs	r1, #3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fa12 	bl	8004e5c <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001a3e:	f000 f81d 	bl	8001a7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <SystemClock_Config+0x12c>)
 8001a44:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001a46:	2304      	movs	r3, #4
 8001a48:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fbf7 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001a64:	f000 f80a 	bl	8001a7c <Error_Handler>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	37d0      	adds	r7, #208	; 0xd0
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000
 8001a78:	00200180 	.word	0x00200180

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 fc9e 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA1_Stream3_IRQHandler+0x10>)
 8001b36:	f001 fc7d 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20009114 	.word	0x20009114

08001b44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <ADC_IRQHandler+0x10>)
 8001b4a:	f000 fd13 	bl	8002574 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000208 	.word	0x20000208

08001b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b5e:	f004 f879 	bl	8005c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20009054 	.word	0x20009054

08001b6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b72:	f004 f86f 	bl	8005c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20009054 	.word	0x20009054

08001b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART2_IRQHandler+0x10>)
 8001b86:	f005 fab3 	bl	80070f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20009174 	.word	0x20009174

08001b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <USART3_IRQHandler+0x10>)
 8001b9a:	f005 faa9 	bl	80070f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20009094 	.word	0x20009094

08001ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb0:	f002 fcf0 	bl	8004594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <DMA2_Stream0_IRQHandler+0x10>)
 8001bbe:	f001 fc39 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000250 	.word	0x20000250

08001bcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <_sbrk+0x50>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x16>
		heap_end = &end;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <_sbrk+0x50>)
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <_sbrk+0x54>)
 8001be0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <_sbrk+0x50>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <_sbrk+0x50>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	466a      	mov	r2, sp
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d907      	bls.n	8001c06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bf6:	f006 fc67 	bl	80084c8 <__errno>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	e006      	b.n	8001c14 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <_sbrk+0x50>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <_sbrk+0x50>)
 8001c10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200001fc 	.word	0x200001fc
 8001c20:	20009600 	.word	0x20009600

08001c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <SystemInit+0x28>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <SystemInit+0x28>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SystemInit+0x28>)
 8001c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b09e      	sub	sp, #120	; 0x78
 8001c54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c94:	463b      	mov	r3, r7
 8001c96:	222c      	movs	r2, #44	; 0x2c
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 fc3e 	bl	800851c <memset>

  htim1.Instance = TIM1;
 8001ca0:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001ca2:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <MX_TIM1_Init+0x180>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001cae:	2220      	movs	r2, #32
 8001cb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cca:	4840      	ldr	r0, [pc, #256]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001ccc:	f003 feac 	bl	8005a28 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001cd6:	f7ff fed1 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ce0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4839      	ldr	r0, [pc, #228]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001ce8:	f004 f9ec 	bl	80060c4 <HAL_TIM_ConfigClockSource>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cf2:	f7ff fec3 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cf6:	4835      	ldr	r0, [pc, #212]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001cf8:	f003 feec 	bl	8005ad4 <HAL_TIM_PWM_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001d02:	f7ff febb 	bl	8001a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001d0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d12:	4619      	mov	r1, r3
 8001d14:	482d      	ldr	r0, [pc, #180]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001d16:	f004 fa8f 	bl	8006238 <HAL_TIM_SlaveConfigSynchro>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001d20:	f7ff feac 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d24:	2320      	movs	r3, #32
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d34:	4619      	mov	r1, r3
 8001d36:	4825      	ldr	r0, [pc, #148]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001d38:	f005 f86c 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d42:	f7ff fe9b 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d46:	2360      	movs	r3, #96	; 0x60
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001d6c:	f004 f892 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001d76:	f7ff fe81 	bl	8001a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001db0:	f005 f8be 	bl	8006f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8001dba:	f7ff fe5f 	bl	8001a7c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <MX_TIM1_Init+0x17c>)
 8001dc0:	f000 f8f6 	bl	8001fb0 <HAL_TIM_MspPostInit>

}
 8001dc4:	bf00      	nop
 8001dc6:	3778      	adds	r7, #120	; 0x78
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20009054 	.word	0x20009054
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	; 0x30
 8001dd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0320 	add.w	r3, r7, #32
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e02:	4a27      	ldr	r2, [pc, #156]	; (8001ea0 <MX_TIM3_Init+0xcc>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e24:	481d      	ldr	r0, [pc, #116]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e26:	f003 fdff 	bl	8005a28 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001e30:	f7ff fe24 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e42:	f004 f93f 	bl	80060c4 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e4c:	f7ff fe16 	bl	8001a7c <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4619      	mov	r1, r3
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e68:	f004 ff0a 	bl	8006c80 <HAL_TIMEx_HallSensor_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001e72:	f7ff fe03 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001e76:	2350      	movs	r3, #80	; 0x50
 8001e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_TIM3_Init+0xc8>)
 8001e84:	f004 ffc6 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8001e8e:	f7ff fdf5 	bl	8001a7c <Error_Handler>
  }

}
 8001e92:	bf00      	nop
 8001e94:	3730      	adds	r7, #48	; 0x30
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20009014 	.word	0x20009014
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a36      	ldr	r2, [pc, #216]	; (8001f9c <HAL_TIM_Base_MspInit+0xf8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d11c      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	2019      	movs	r0, #25
 8001ee4:	f001 f93f 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ee8:	2019      	movs	r0, #25
 8001eea:	f001 f958 	bl	800319e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	201a      	movs	r0, #26
 8001ef4:	f001 f937 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ef8:	201a      	movs	r0, #26
 8001efa:	f001 f950 	bl	800319e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001efe:	e049      	b.n	8001f94 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <HAL_TIM_Base_MspInit+0x100>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d144      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HALL_W_Pin;
 8001f52:	2340      	movs	r3, #64	; 0x40
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f62:	2302      	movs	r3, #2
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HALL_W_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <HAL_TIM_Base_MspInit+0x104>)
 8001f6e:	f002 f935 	bl	80041dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_V_Pin|HALL_U_Pin;
 8001f72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f80:	2302      	movs	r3, #2
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <HAL_TIM_Base_MspInit+0x108>)
 8001f90:	f002 f924 	bl	80041dc <HAL_GPIO_Init>
}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020800 	.word	0x40020800

08001fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_TIM_MspPostInit+0x64>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11c      	bne.n	800200c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8001fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4619      	mov	r1, r3
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_TIM_MspPostInit+0x6c>)
 8002008:	f002 f8e8 	bl	80041dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40010000 	.word	0x40010000
 8002018:	40023800 	.word	0x40023800
 800201c:	40021000 	.word	0x40021000

08002020 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART2_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002064:	f004 fff6 	bl	8007054 <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f7ff fd05 	bl	8001a7c <Error_Handler>
  }

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20009174 	.word	0x20009174
 800207c:	40004400 	.word	0x40004400

08002080 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART3_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800208c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020c4:	f004 ffc6 	bl	8007054 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7ff fcd5 	bl	8001a7c <Error_Handler>
  }

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20009094 	.word	0x20009094
 80020dc:	40004800 	.word	0x40004800

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5b      	ldr	r2, [pc, #364]	; (800226c <HAL_UART_MspInit+0x18c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d14c      	bne.n	800219c <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002102:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a5a      	ldr	r2, [pc, #360]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_UART_MspInit+0x190>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002132:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a4e      	ldr	r2, [pc, #312]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_UART_MspInit+0x190>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800214a:	2308      	movs	r3, #8
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800215a:	2307      	movs	r3, #7
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4843      	ldr	r0, [pc, #268]	; (8002274 <HAL_UART_MspInit+0x194>)
 8002166:	f002 f839 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800216a:	2320      	movs	r3, #32
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217a:	2307      	movs	r3, #7
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	483c      	ldr	r0, [pc, #240]	; (8002278 <HAL_UART_MspInit+0x198>)
 8002186:	f002 f829 	bl	80041dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2108      	movs	r1, #8
 800218e:	2026      	movs	r0, #38	; 0x26
 8002190:	f000 ffe9 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002194:	2026      	movs	r0, #38	; 0x26
 8002196:	f001 f802 	bl	800319e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800219a:	e063      	b.n	8002264 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART3)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a36      	ldr	r2, [pc, #216]	; (800227c <HAL_UART_MspInit+0x19c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d15e      	bne.n	8002264 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <HAL_UART_MspInit+0x190>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a31      	ldr	r2, [pc, #196]	; (8002270 <HAL_UART_MspInit+0x190>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <HAL_UART_MspInit+0x190>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_UART_MspInit+0x190>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <HAL_UART_MspInit+0x190>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_UART_MspInit+0x190>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021e8:	2307      	movs	r3, #7
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	4821      	ldr	r0, [pc, #132]	; (8002278 <HAL_UART_MspInit+0x198>)
 80021f4:	f001 fff2 	bl	80041dc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <HAL_UART_MspInit+0x1a4>)
 80021fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002200:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002204:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002218:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002238:	4811      	ldr	r0, [pc, #68]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 800223a:	f000 ffcb 	bl	80031d4 <HAL_DMA_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8002244:	f7ff fc1a 	bl	8001a7c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 800224c:	669a      	str	r2, [r3, #104]	; 0x68
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <HAL_UART_MspInit+0x1a0>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 9, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2109      	movs	r1, #9
 8002258:	2027      	movs	r0, #39	; 0x27
 800225a:	f000 ff84 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800225e:	2027      	movs	r0, #39	; 0x27
 8002260:	f000 ff9d 	bl	800319e <HAL_NVIC_EnableIRQ>
}
 8002264:	bf00      	nop
 8002266:	3730      	adds	r7, #48	; 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40004400 	.word	0x40004400
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020c00 	.word	0x40020c00
 800227c:	40004800 	.word	0x40004800
 8002280:	20009114 	.word	0x20009114
 8002284:	40026058 	.word	0x40026058

08002288 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800228e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002292:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002296:	2206      	movs	r2, #6
 8002298:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800229c:	2202      	movs	r2, #2
 800229e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022cc:	f002 f97a 	bl	80045c4 <HAL_PCD_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022d6:	f7ff fbd1 	bl	8001a7c <Error_Handler>
  }

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200091f4 	.word	0x200091f4

080022e4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002304:	d141      	bne.n	800238a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800231e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002330:	230a      	movs	r3, #10
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	4817      	ldr	r0, [pc, #92]	; (8002398 <HAL_PCD_MspInit+0xb4>)
 800233c:	f001 ff4e 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4810      	ldr	r0, [pc, #64]	; (8002398 <HAL_PCD_MspInit+0xb4>)
 8002356:	f001 ff41 	bl	80041dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	6353      	str	r3, [r2, #52]	; 0x34
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000

0800239c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023a2:	e003      	b.n	80023ac <LoopCopyDataInit>

080023a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023aa:	3104      	adds	r1, #4

080023ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023b4:	d3f6      	bcc.n	80023a4 <CopyDataInit>
  ldr  r2, =_sbss
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023b8:	e002      	b.n	80023c0 <LoopFillZerobss>

080023ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023bc:	f842 3b04 	str.w	r3, [r2], #4

080023c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023c4:	d3f9      	bcc.n	80023ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c6:	f7ff fc2d 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f006 f883 	bl	80084d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ce:	f7ff fa37 	bl	8001840 <main>
  bx  lr    
 80023d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80023d8:	0800caa0 	.word	0x0800caa0
  ldr  r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023e0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80023e4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80023e8:	20009600 	.word	0x20009600

080023ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <CAN1_RX0_IRQHandler>

080023ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 feac 	bl	8003150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 f805 	bl	8002408 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80023fe:	f7ff fb45 	bl	8001a8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x54>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x58>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fec7 	bl	80031ba <HAL_SYSTICK_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00e      	b.n	8002454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d80a      	bhi.n	8002452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f000 fe8f 	bl	8003166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <HAL_InitTick+0x5c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000000 	.word	0x20000000
 8002460:	20000008 	.word	0x20000008
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008
 800248c:	200095f8 	.word	0x200095f8

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200095f8 	.word	0x200095f8

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_Delay+0x40>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000008 	.word	0x20000008

080024ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e031      	b.n	8002566 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fdd8 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_ADC_Init+0x84>)
 8002530:	4013      	ands	r3, r2
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fbb2 	bl	8002ca4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
 8002556:	e001      	b.n	800255c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	ffffeefd 	.word	0xffffeefd

08002574 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d049      	beq.n	800264a <HAL_ADC_IRQHandler+0xd6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d046      	beq.n	800264a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d12b      	bne.n	800263a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d127      	bne.n	800263a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0220 	bic.w	r2, r2, #32
 8002614:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff f814 	bl	8001668 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0212 	mvn.w	r2, #18
 8002648:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d057      	beq.n	800272c <HAL_ADC_IRQHandler+0x1b8>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d054      	beq.n	800272c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d139      	bne.n	800271c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d12b      	bne.n	800271c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d124      	bne.n	800271c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11d      	bne.n	800271c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d119      	bne.n	800271c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fc3d 	bl	8002f9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f06f 020c 	mvn.w	r2, #12
 800272a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d017      	beq.n	800278e <HAL_ADC_IRQHandler+0x21a>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10d      	bne.n	800278e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f932 	bl	80029e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0201 	mvn.w	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b20      	cmp	r3, #32
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <HAL_ADC_IRQHandler+0x27a>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d012      	beq.n	80027ee <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0202 	orr.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0220 	mvn.w	r2, #32
 80027dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f90c 	bl	80029fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0220 	mvn.w	r2, #32
 80027ec:	601a      	str	r2, [r3, #0]
  }
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_ADC_Start_DMA+0x1e>
 8002812:	2302      	movs	r3, #2
 8002814:	e0c7      	b.n	80029a6 <HAL_ADC_Start_DMA+0x1ae>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d018      	beq.n	800285e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_ADC_Start_DMA+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a5c      	ldr	r2, [pc, #368]	; (80029b4 <HAL_ADC_Start_DMA+0x1bc>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0c9a      	lsrs	r2, r3, #18
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002850:	e002      	b.n	8002858 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3b01      	subs	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 809b 	bne.w	80029a4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002872:	4b51      	ldr	r3, [pc, #324]	; (80029b8 <HAL_ADC_Start_DMA+0x1c0>)
 8002874:	4013      	ands	r3, r2
 8002876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002894:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d106      	bne.n	80028b8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f023 0206 	bic.w	r2, r3, #6
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
 80028b6:	e002      	b.n	80028be <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <HAL_ADC_Start_DMA+0x1c4>)
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	4a3b      	ldr	r2, [pc, #236]	; (80029c0 <HAL_ADC_Start_DMA+0x1c8>)
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <HAL_ADC_Start_DMA+0x1cc>)
 80028dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	334c      	adds	r3, #76	; 0x4c
 8002912:	4619      	mov	r1, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f000 fd0a 	bl	8003330 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_ADC_Start_DMA+0x1d0>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d136      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	e02d      	b.n	80029a4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_ADC_Start_DMA+0x1d4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10e      	bne.n	8002970 <HAL_ADC_Start_DMA+0x178>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800296e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_ADC_Start_DMA+0x1d0>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d113      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_ADC_Start_DMA+0x1d8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10e      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x1ac>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029a2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000000 	.word	0x20000000
 80029b4:	431bde83 	.word	0x431bde83
 80029b8:	fffff8fe 	.word	0xfffff8fe
 80029bc:	08002e99 	.word	0x08002e99
 80029c0:	08002f53 	.word	0x08002f53
 80029c4:	08002f6f 	.word	0x08002f6f
 80029c8:	40012300 	.word	0x40012300
 80029cc:	40012000 	.word	0x40012000
 80029d0:	40012200 	.word	0x40012200

080029d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x1c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e12a      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x272>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d93a      	bls.n	8002ab2 <HAL_ADC_ConfigChannel+0xa2>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a44:	d035      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b1e      	subs	r3, #30
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a87      	ldr	r2, [pc, #540]	; (8002c90 <HAL_ADC_ConfigChannel+0x280>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	061a      	lsls	r2, r3, #24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a8a:	e035      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4403      	add	r3, r0
 8002aa4:	3b1e      	subs	r3, #30
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab0:	e022      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6919      	ldr	r1, [r3, #16]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4603      	mov	r3, r0
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4403      	add	r3, r0
 8002aee:	409a      	lsls	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d824      	bhi.n	8002b4a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b05      	subs	r3, #5
 8002b12:	221f      	movs	r2, #31
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	400a      	ands	r2, r1
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b05      	subs	r3, #5
 8002b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
 8002b48:	e04c      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d824      	bhi.n	8002b9c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3b23      	subs	r3, #35	; 0x23
 8002b64:	221f      	movs	r2, #31
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b23      	subs	r3, #35	; 0x23
 8002b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9a:	e023      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	3b41      	subs	r3, #65	; 0x41
 8002bae:	221f      	movs	r2, #31
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	400a      	ands	r2, r1
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b41      	subs	r3, #65	; 0x41
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <HAL_ADC_ConfigChannel+0x284>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10a      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1f4>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_ADC_ConfigChannel+0x288>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_ADC_ConfigChannel+0x288>)
 8002bfe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c02:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_ADC_ConfigChannel+0x284>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x212>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d105      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_ADC_ConfigChannel+0x288>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_ADC_ConfigChannel+0x288>)
 8002c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c20:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_ADC_ConfigChannel+0x284>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d125      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x268>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_ADC_ConfigChannel+0x280>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x22e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b11      	cmp	r3, #17
 8002c3c:	d11c      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_ADC_ConfigChannel+0x288>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <HAL_ADC_ConfigChannel+0x288>)
 8002c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_ADC_ConfigChannel+0x280>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d111      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_ADC_ConfigChannel+0x28c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_ADC_ConfigChannel+0x290>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0c9a      	lsrs	r2, r3, #18
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c6a:	e002      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f9      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	10000012 	.word	0x10000012
 8002c94:	40012000 	.word	0x40012000
 8002c98:	40012300 	.word	0x40012300
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cac:	4b78      	ldr	r3, [pc, #480]	; (8002e90 <ADC_Init+0x1ec>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a77      	ldr	r2, [pc, #476]	; (8002e90 <ADC_Init+0x1ec>)
 8002cb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <ADC_Init+0x1ec>)
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4973      	ldr	r1, [pc, #460]	; (8002e90 <ADC_Init+0x1ec>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <ADC_Init+0x1f0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00f      	b.n	8002d9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0202 	bic.w	r2, r2, #2
 8002dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	005a      	lsls	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	3b01      	subs	r3, #1
 8002df8:	035a      	lsls	r2, r3, #13
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e007      	b.n	8002e14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	051a      	lsls	r2, r3, #20
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e56:	025a      	lsls	r2, r3, #9
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	029a      	lsls	r2, r3, #10
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40012300 	.word	0x40012300
 8002e94:	0f000001 	.word	0x0f000001

08002e98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d13c      	bne.n	8002f2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d12b      	bne.n	8002f24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d127      	bne.n	8002f24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d119      	bne.n	8002f24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0220 	bic.w	r2, r2, #32
 8002efe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7fe fb9f 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f2a:	e00e      	b.n	8002f4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fd5f 	bl	80029fc <HAL_ADC_ErrorCallback>
}
 8002f3e:	e004      	b.n	8002f4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fd37 	bl	80029d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f043 0204 	orr.w	r2, r3, #4
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff fd34 	bl	80029fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00
 8002ff4:	05fa0000 	.word	0x05fa0000

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	; (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800311c:	d301      	bcc.n	8003122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311e:	2301      	movs	r3, #1
 8003120:	e00f      	b.n	8003142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <SysTick_Config+0x40>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312a:	210f      	movs	r1, #15
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f7ff ff8e 	bl	8003050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <SysTick_Config+0x40>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313a:	4b04      	ldr	r3, [pc, #16]	; (800314c <SysTick_Config+0x40>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	e000e010 	.word	0xe000e010

08003150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff29 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003178:	f7ff ff3e 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 800317c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff8e 	bl	80030a4 <NVIC_EncodePriority>
 8003188:	4602      	mov	r2, r0
 800318a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff5d 	bl	8003050 <__NVIC_SetPriority>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff31 	bl	8003014 <__NVIC_EnableIRQ>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffa2 	bl	800310c <SysTick_Config>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff f956 	bl	8002490 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e099      	b.n	8003324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003210:	e00f      	b.n	8003232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003212:	f7ff f93d 	bl	8002490 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b05      	cmp	r3, #5
 800321e:	d908      	bls.n	8003232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e078      	b.n	8003324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e8      	bne.n	8003212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_DMA_Init+0x158>)
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b04      	cmp	r3, #4
 800328a:	d107      	bne.n	800329c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4313      	orrs	r3, r2
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f023 0307 	bic.w	r3, r3, #7
 80032b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d117      	bne.n	80032f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa99 	bl	8003810 <DMA_CheckFifoParam>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032f2:	2301      	movs	r3, #1
 80032f4:	e016      	b.n	8003324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa50 	bl	80037a4 <DMA_CalcBaseAndBitshift>
 8003304:	4603      	mov	r3, r0
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	223f      	movs	r2, #63	; 0x3f
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	f010803f 	.word	0xf010803f

08003330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_DMA_Start_IT+0x26>
 8003352:	2302      	movs	r3, #2
 8003354:	e048      	b.n	80033e8 <HAL_DMA_Start_IT+0xb8>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d137      	bne.n	80033da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f9e2 	bl	8003748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	223f      	movs	r2, #63	; 0x3f
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0216 	orr.w	r2, r2, #22
 800339e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0208 	orr.w	r2, r2, #8
 80033c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e005      	b.n	80033e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d004      	beq.n	800340e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00c      	b.n	8003428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003440:	4b92      	ldr	r3, [pc, #584]	; (800368c <HAL_DMA_IRQHandler+0x258>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a92      	ldr	r2, [pc, #584]	; (8003690 <HAL_DMA_IRQHandler+0x25c>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2208      	movs	r2, #8
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	2208      	movs	r2, #8
 800348e:	409a      	lsls	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2201      	movs	r2, #1
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2204      	movs	r2, #4
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d043      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2210      	movs	r2, #16
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d024      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e01f      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e016      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0208 	bic.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	2220      	movs	r2, #32
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 808e 	beq.w	80036d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8086 	beq.w	80036d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d136      	bne.n	800364c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0216 	bic.w	r2, r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_DMA_IRQHandler+0x1da>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	223f      	movs	r2, #63	; 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07d      	beq.n	800373e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
        }
        return;
 800364a:	e078      	b.n	800373e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01c      	beq.n	8003694 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	2b00      	cmp	r3, #0
 800366e:	d030      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e02b      	b.n	80036d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	4798      	blx	r3
 800368a:	e022      	b.n	80036d2 <HAL_DMA_IRQHandler+0x29e>
 800368c:	20000000 	.word	0x20000000
 8003690:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0210 	bic.w	r2, r2, #16
 80036b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d032      	beq.n	8003740 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2205      	movs	r2, #5
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	429a      	cmp	r2, r3
 8003708:	d307      	bcc.n	800371a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f2      	bne.n	80036fe <HAL_DMA_IRQHandler+0x2ca>
 8003718:	e000      	b.n	800371c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800371a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
 800373c:	e000      	b.n	8003740 <HAL_DMA_IRQHandler+0x30c>
        return;
 800373e:	bf00      	nop
    }
  }
}
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop

08003748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d108      	bne.n	8003788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003786:	e007      	b.n	8003798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3b10      	subs	r3, #16
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <DMA_CalcBaseAndBitshift+0x60>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <DMA_CalcBaseAndBitshift+0x64>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d908      	bls.n	80037e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <DMA_CalcBaseAndBitshift+0x68>)
 80037da:	4013      	ands	r3, r2
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58
 80037e2:	e006      	b.n	80037f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <DMA_CalcBaseAndBitshift+0x68>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	aaaaaaab 	.word	0xaaaaaaab
 8003808:	0800bfd0 	.word	0x0800bfd0
 800380c:	fffffc00 	.word	0xfffffc00

08003810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11f      	bne.n	800386a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d855      	bhi.n	80038dc <DMA_CheckFifoParam+0xcc>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <DMA_CheckFifoParam+0x28>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	0800385b 	.word	0x0800385b
 8003840:	08003849 	.word	0x08003849
 8003844:	080038dd 	.word	0x080038dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d045      	beq.n	80038e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e042      	b.n	80038e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003862:	d13f      	bne.n	80038e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003868:	e03c      	b.n	80038e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003872:	d121      	bne.n	80038b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d836      	bhi.n	80038e8 <DMA_CheckFifoParam+0xd8>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <DMA_CheckFifoParam+0x70>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003891 	.word	0x08003891
 8003884:	08003897 	.word	0x08003897
 8003888:	08003891 	.word	0x08003891
 800388c:	080038a9 	.word	0x080038a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e02f      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d024      	beq.n	80038ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e021      	b.n	80038ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038b0:	d11e      	bne.n	80038f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038b6:	e01b      	b.n	80038f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <DMA_CheckFifoParam+0xb4>
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d003      	beq.n	80038ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038c2:	e018      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e015      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
      break;
 80038da:	e00b      	b.n	80038f4 <DMA_CheckFifoParam+0xe4>
      break;
 80038dc:	bf00      	nop
 80038de:	e00a      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038e0:	bf00      	nop
 80038e2:	e008      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038e4:	bf00      	nop
 80038e6:	e006      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038e8:	bf00      	nop
 80038ea:	e004      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038ec:	bf00      	nop
 80038ee:	e002      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038f4:	bf00      	nop
    }
  } 
  
  return status; 
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003914:	4ba9      	ldr	r3, [pc, #676]	; (8003bbc <HAL_ETH_Init+0x2b8>)
 8003916:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e183      	b.n	8003c32 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fce2 	bl	8001308 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003944:	4b9e      	ldr	r3, [pc, #632]	; (8003bc0 <HAL_ETH_Init+0x2bc>)
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	4a9d      	ldr	r2, [pc, #628]	; (8003bc0 <HAL_ETH_Init+0x2bc>)
 800394a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394e:	6453      	str	r3, [r2, #68]	; 0x44
 8003950:	4b9b      	ldr	r3, [pc, #620]	; (8003bc0 <HAL_ETH_Init+0x2bc>)
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800395c:	4b99      	ldr	r3, [pc, #612]	; (8003bc4 <HAL_ETH_Init+0x2c0>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a98      	ldr	r2, [pc, #608]	; (8003bc4 <HAL_ETH_Init+0x2c0>)
 8003962:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003966:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003968:	4b96      	ldr	r3, [pc, #600]	; (8003bc4 <HAL_ETH_Init+0x2c0>)
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4994      	ldr	r1, [pc, #592]	; (8003bc4 <HAL_ETH_Init+0x2c0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800398e:	f7fe fd7f 	bl	8002490 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003994:	e011      	b.n	80039ba <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003996:	f7fe fd7b 	bl	8002490 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039a4:	d909      	bls.n	80039ba <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e13b      	b.n	8003c32 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e4      	bne.n	8003996 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f023 031c 	bic.w	r3, r3, #28
 80039da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80039dc:	f001 fc02 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 80039e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	4a78      	ldr	r2, [pc, #480]	; (8003bc8 <HAL_ETH_Init+0x2c4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d908      	bls.n	80039fc <HAL_ETH_Init+0xf8>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4a77      	ldr	r2, [pc, #476]	; (8003bcc <HAL_ETH_Init+0x2c8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d804      	bhi.n	80039fc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	e027      	b.n	8003a4c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4a73      	ldr	r2, [pc, #460]	; (8003bcc <HAL_ETH_Init+0x2c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d908      	bls.n	8003a16 <HAL_ETH_Init+0x112>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4a72      	ldr	r2, [pc, #456]	; (8003bd0 <HAL_ETH_Init+0x2cc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d804      	bhi.n	8003a16 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f043 030c 	orr.w	r3, r3, #12
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e01a      	b.n	8003a4c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4a6d      	ldr	r2, [pc, #436]	; (8003bd0 <HAL_ETH_Init+0x2cc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d903      	bls.n	8003a26 <HAL_ETH_Init+0x122>
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4a6c      	ldr	r2, [pc, #432]	; (8003bd4 <HAL_ETH_Init+0x2d0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d911      	bls.n	8003a4a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <HAL_ETH_Init+0x2d0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d908      	bls.n	8003a40 <HAL_ETH_Init+0x13c>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_ETH_Init+0x2d4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d804      	bhi.n	8003a40 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e005      	b.n	8003a4c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f043 0310 	orr.w	r3, r3, #16
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e000      	b.n	8003a4c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003a4a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a58:	2100      	movs	r1, #0
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f956 	bl	8003d0c <HAL_ETH_WritePHYRegister>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003a6a:	6939      	ldr	r1, [r7, #16]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f9b3 	bl	8003dd8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0d9      	b.n	8003c32 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003a7e:	20ff      	movs	r0, #255	; 0xff
 8003a80:	f7fe fd12 	bl	80024a8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80a7 	beq.w	8003bdc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fcff 	bl	8002490 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003a94:	f107 030c 	add.w	r3, r7, #12
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8cd 	bl	8003c3c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003aa2:	f7fe fcf5 	bl	8002490 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d90f      	bls.n	8003ad4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003ab8:	6939      	ldr	r1, [r7, #16]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f98c 	bl	8003dd8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0ae      	b.n	8003c32 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0da      	beq.n	8003a94 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f911 	bl	8003d0c <HAL_ETH_WritePHYRegister>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003af4:	6939      	ldr	r1, [r7, #16]
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f96e 	bl	8003dd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003b04:	2301      	movs	r3, #1
 8003b06:	e094      	b.n	8003c32 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fe fcc2 	bl	8002490 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	461a      	mov	r2, r3
 8003b14:	2101      	movs	r1, #1
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f890 	bl	8003c3c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003b1c:	f7fe fcb8 	bl	8002490 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d90f      	bls.n	8003b4e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003b32:	6939      	ldr	r1, [r7, #16]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f94f 	bl	8003dd8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e071      	b.n	8003c32 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0da      	beq.n	8003b0e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	211f      	movs	r1, #31
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f86b 	bl	8003c3c <HAL_ETH_ReadPHYRegister>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003b70:	6939      	ldr	r1, [r7, #16]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f930 	bl	8003dd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003b80:	2301      	movs	r3, #1
 8003b82:	e056      	b.n	8003c32 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	e002      	b.n	8003b9e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	e037      	b.n	8003c20 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e032      	b.n	8003c20 <HAL_ETH_Init+0x31c>
 8003bba:	bf00      	nop
 8003bbc:	03938700 	.word	0x03938700
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	01312cff 	.word	0x01312cff
 8003bcc:	02160ebf 	.word	0x02160ebf
 8003bd0:	039386ff 	.word	0x039386ff
 8003bd4:	05f5e0ff 	.word	0x05f5e0ff
 8003bd8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f889 	bl	8003d0c <HAL_ETH_WritePHYRegister>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003c04:	6939      	ldr	r1, [r7, #16]
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8e6 	bl	8003dd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e00c      	b.n	8003c32 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003c18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003c1c:	f7fe fc44 	bl	80024a8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003c20:	6939      	ldr	r1, [r7, #16]
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8d8 	bl	8003dd8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop

08003c3c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	460b      	mov	r3, r1
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b82      	cmp	r3, #130	; 0x82
 8003c5c:	d101      	bne.n	8003c62 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e050      	b.n	8003d04 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2282      	movs	r2, #130	; 0x82
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 031c 	and.w	r3, r3, #28
 8003c78:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8a1b      	ldrh	r3, [r3, #16]
 8003c7e:	02db      	lsls	r3, r3, #11
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003c88:	897b      	ldrh	r3, [r7, #10]
 8003c8a:	019b      	lsls	r3, r3, #6
 8003c8c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 0302 	bic.w	r3, r3, #2
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003cae:	f7fe fbef 	bl	8002490 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003cb4:	e015      	b.n	8003ce2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003cb6:	f7fe fbeb 	bl	8002490 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d309      	bcc.n	8003cda <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e014      	b.n	8003d04 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e4      	bne.n	8003cb6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	460b      	mov	r3, r1
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b42      	cmp	r3, #66	; 0x42
 8003d2c:	d101      	bne.n	8003d32 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e04e      	b.n	8003dd0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2242      	movs	r2, #66	; 0x42
 8003d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 031c 	and.w	r3, r3, #28
 8003d48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8a1b      	ldrh	r3, [r3, #16]
 8003d4e:	02db      	lsls	r3, r3, #11
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	019b      	lsls	r3, r3, #6
 8003d5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d88:	f7fe fb82 	bl	8002490 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d8e:	e015      	b.n	8003dbc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003d90:	f7fe fb7e 	bl	8002490 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d309      	bcc.n	8003db4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e00d      	b.n	8003dd0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e4      	bne.n	8003d90 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b0b0      	sub	sp, #192	; 0xc0
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003e06:	2300      	movs	r3, #0
 8003e08:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e22:	663b      	str	r3, [r7, #96]	; 0x60
 8003e24:	e001      	b.n	8003e2a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e2e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e34:	2300      	movs	r3, #0
 8003e36:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003eac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eb0:	4bab      	ldr	r3, [pc, #684]	; (8004160 <ETH_MACDMAConfig+0x388>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003ebc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003ec0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003ec4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003eca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003ece:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003ed2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003ed8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003edc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003ee0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003ee4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003ee8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003eec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003eee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f7fe facb 	bl	80024a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f1a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003f1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003f20:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003f24:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003f2a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003f30:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003f36:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003f40:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003f48:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003f4a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f56:	2001      	movs	r0, #1
 8003f58:	f7fe faa6 	bl	80024a8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f64:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f6e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003f78:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003f84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f88:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f96:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003f98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003f9c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003fa2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003fa8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003fae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003fb4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003fb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fc8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f7fe fa67 	bl	80024a8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fe2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003fe4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003fe8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ffe:	2001      	movs	r0, #1
 8004000:	f7fe fa52 	bl	80024a8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800400c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004016:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800401c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004020:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004032:	2304      	movs	r3, #4
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800403c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800404c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004052:	2300      	movs	r3, #0
 8004054:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004056:	2300      	movs	r3, #0
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004062:	4413      	add	r3, r2
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800406a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <ETH_MACDMAConfig+0x38c>)
 8004070:	4013      	ands	r3, r2
 8004072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004076:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004078:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800407a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800407c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800407e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004080:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004082:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004084:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004086:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004088:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800408a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800408c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800408e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004092:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004096:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004098:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80040aa:	4413      	add	r3, r2
 80040ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f241 0318 	movw	r3, #4120	; 0x1018
 80040ba:	4413      	add	r3, r2
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80040c2:	2001      	movs	r0, #1
 80040c4:	f7fe f9f0 	bl	80024a8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80040d0:	4413      	add	r3, r2
 80040d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040d6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80040d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80040dc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80040e0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80040e4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80040e8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80040ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80040ee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80040f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80040f2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80040fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004100:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004110:	2001      	movs	r0, #1
 8004112:	f7fe f9c9 	bl	80024a8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004122:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10d      	bne.n	8004148 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	f241 031c 	movw	r3, #4124	; 0x101c
 8004134:	4413      	add	r3, r2
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6811      	ldr	r1, [r2, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <ETH_MACDMAConfig+0x390>)
 800413e:	431a      	orrs	r2, r3
 8004140:	f241 031c 	movw	r3, #4124	; 0x101c
 8004144:	440b      	add	r3, r1
 8004146:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	461a      	mov	r2, r3
 800414e:	2100      	movs	r1, #0
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f80b 	bl	800416c <ETH_MACAddressConfig>
}
 8004156:	bf00      	nop
 8004158:	37c0      	adds	r7, #192	; 0xc0
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	ff20810f 	.word	0xff20810f
 8004164:	f8de3f23 	.word	0xf8de3f23
 8004168:	00010040 	.word	0x00010040

0800416c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3305      	adds	r3, #5
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	3204      	adds	r2, #4
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <ETH_MACAddressConfig+0x68>)
 800418e:	4413      	add	r3, r2
 8004190:	461a      	mov	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3303      	adds	r3, #3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	061a      	lsls	r2, r3, #24
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3302      	adds	r3, #2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3301      	adds	r3, #1
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	4313      	orrs	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <ETH_MACAddressConfig+0x6c>)
 80041be:	4413      	add	r3, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6013      	str	r3, [r2, #0]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40028040 	.word	0x40028040
 80041d8:	40028044 	.word	0x40028044

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	e175      	b.n	80044e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041fc:	2201      	movs	r2, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	429a      	cmp	r2, r3
 8004216:	f040 8164 	bne.w	80044e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d00b      	beq.n	800423a <HAL_GPIO_Init+0x5e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d007      	beq.n	800423a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800422e:	2b11      	cmp	r3, #17
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b12      	cmp	r3, #18
 8004238:	d130      	bne.n	800429c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 0201 	and.w	r2, r3, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x100>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b12      	cmp	r3, #18
 80042da:	d123      	bne.n	8004324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	08da      	lsrs	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3208      	adds	r2, #8
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0203 	and.w	r2, r3, #3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80be 	beq.w	80044e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_GPIO_Init+0x320>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4a64      	ldr	r2, [pc, #400]	; (80044fc <HAL_GPIO_Init+0x320>)
 800436c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004370:	6453      	str	r3, [r2, #68]	; 0x44
 8004372:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_GPIO_Init+0x320>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800437e:	4a60      	ldr	r2, [pc, #384]	; (8004500 <HAL_GPIO_Init+0x324>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a57      	ldr	r2, [pc, #348]	; (8004504 <HAL_GPIO_Init+0x328>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d037      	beq.n	800441a <HAL_GPIO_Init+0x23e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a56      	ldr	r2, [pc, #344]	; (8004508 <HAL_GPIO_Init+0x32c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_GPIO_Init+0x23a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a55      	ldr	r2, [pc, #340]	; (800450c <HAL_GPIO_Init+0x330>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02b      	beq.n	8004412 <HAL_GPIO_Init+0x236>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a54      	ldr	r2, [pc, #336]	; (8004510 <HAL_GPIO_Init+0x334>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d025      	beq.n	800440e <HAL_GPIO_Init+0x232>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a53      	ldr	r2, [pc, #332]	; (8004514 <HAL_GPIO_Init+0x338>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01f      	beq.n	800440a <HAL_GPIO_Init+0x22e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_GPIO_Init+0x33c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d019      	beq.n	8004406 <HAL_GPIO_Init+0x22a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a51      	ldr	r2, [pc, #324]	; (800451c <HAL_GPIO_Init+0x340>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_GPIO_Init+0x226>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_GPIO_Init+0x344>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00d      	beq.n	80043fe <HAL_GPIO_Init+0x222>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4f      	ldr	r2, [pc, #316]	; (8004524 <HAL_GPIO_Init+0x348>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <HAL_GPIO_Init+0x21e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a4e      	ldr	r2, [pc, #312]	; (8004528 <HAL_GPIO_Init+0x34c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_GPIO_Init+0x21a>
 80043f2:	2309      	movs	r3, #9
 80043f4:	e012      	b.n	800441c <HAL_GPIO_Init+0x240>
 80043f6:	230a      	movs	r3, #10
 80043f8:	e010      	b.n	800441c <HAL_GPIO_Init+0x240>
 80043fa:	2308      	movs	r3, #8
 80043fc:	e00e      	b.n	800441c <HAL_GPIO_Init+0x240>
 80043fe:	2307      	movs	r3, #7
 8004400:	e00c      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004402:	2306      	movs	r3, #6
 8004404:	e00a      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004406:	2305      	movs	r3, #5
 8004408:	e008      	b.n	800441c <HAL_GPIO_Init+0x240>
 800440a:	2304      	movs	r3, #4
 800440c:	e006      	b.n	800441c <HAL_GPIO_Init+0x240>
 800440e:	2303      	movs	r3, #3
 8004410:	e004      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004412:	2302      	movs	r3, #2
 8004414:	e002      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_GPIO_Init+0x240>
 800441a:	2300      	movs	r3, #0
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f002 0203 	and.w	r2, r2, #3
 8004422:	0092      	lsls	r2, r2, #2
 8004424:	4093      	lsls	r3, r2
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800442c:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_GPIO_Init+0x324>)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800443a:	4b3c      	ldr	r3, [pc, #240]	; (800452c <HAL_GPIO_Init+0x350>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800445e:	4a33      	ldr	r2, [pc, #204]	; (800452c <HAL_GPIO_Init+0x350>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004464:	4b31      	ldr	r3, [pc, #196]	; (800452c <HAL_GPIO_Init+0x350>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004488:	4a28      	ldr	r2, [pc, #160]	; (800452c <HAL_GPIO_Init+0x350>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448e:	4b27      	ldr	r3, [pc, #156]	; (800452c <HAL_GPIO_Init+0x350>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <HAL_GPIO_Init+0x350>)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b8:	4b1c      	ldr	r3, [pc, #112]	; (800452c <HAL_GPIO_Init+0x350>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <HAL_GPIO_Init+0x350>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	f67f ae86 	bls.w	80041fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3724      	adds	r7, #36	; 0x24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40023800 	.word	0x40023800
 8004500:	40013800 	.word	0x40013800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40021400 	.word	0x40021400
 800451c:	40021800 	.word	0x40021800
 8004520:	40021c00 	.word	0x40021c00
 8004524:	40022000 	.word	0x40022000
 8004528:	40022400 	.word	0x40022400
 800452c:	40013c00 	.word	0x40013c00

08004530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	887b      	ldrh	r3, [r7, #2]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e001      	b.n	8004552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
 800456c:	4613      	mov	r3, r2
 800456e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004570:	787b      	ldrb	r3, [r7, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800457c:	e003      	b.n	8004586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	041a      	lsls	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	619a      	str	r2, [r3, #24]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045aa:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd f83a 	bl	800162c <HAL_GPIO_EXTI_Callback>
  }
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40013c00 	.word	0x40013c00

080045c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c6:	b08f      	sub	sp, #60	; 0x3c
 80045c8:	af0a      	add	r7, sp, #40	; 0x28
 80045ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e116      	b.n	8004804 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fd fe77 	bl	80022e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2203      	movs	r2, #3
 80045fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f003 fb4f 	bl	8007cb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	687e      	ldr	r6, [r7, #4]
 8004622:	466d      	mov	r5, sp
 8004624:	f106 0410 	add.w	r4, r6, #16
 8004628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004630:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004634:	e885 0003 	stmia.w	r5, {r0, r1}
 8004638:	1d33      	adds	r3, r6, #4
 800463a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800463c:	6838      	ldr	r0, [r7, #0]
 800463e:	f003 fae3 	bl	8007c08 <USB_CoreInit>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0d7      	b.n	8004804 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f003 fb3d 	bl	8007cda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e04a      	b.n	80046fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	333d      	adds	r3, #61	; 0x3d
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	333c      	adds	r3, #60	; 0x3c
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800468e:	7bfa      	ldrb	r2, [r7, #15]
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	b298      	uxth	r0, r3
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3342      	adds	r3, #66	; 0x42
 80046a2:	4602      	mov	r2, r0
 80046a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	333f      	adds	r3, #63	; 0x3f
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	3344      	adds	r3, #68	; 0x44
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3348      	adds	r3, #72	; 0x48
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	3350      	adds	r3, #80	; 0x50
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	3301      	adds	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	7bfa      	ldrb	r2, [r7, #15]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3af      	bcc.n	8004666 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e044      	b.n	8004796 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	3301      	adds	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3b5      	bcc.n	800470c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	687e      	ldr	r6, [r7, #4]
 80047a8:	466d      	mov	r5, sp
 80047aa:	f106 0410 	add.w	r4, r6, #16
 80047ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80047be:	1d33      	adds	r3, r6, #4
 80047c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047c2:	6838      	ldr	r0, [r7, #0]
 80047c4:	f003 fab4 	bl	8007d30 <USB_DevInit>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e014      	b.n	8004804 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f80a 	bl	800480c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 fc66 	bl	80080ce <USB_DevDisconnect>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800480c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_PCDEx_ActivateLPM+0x44>)
 800483c:	4313      	orrs	r3, r2
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	10000003 	.word	0x10000003

08004854 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800485e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40007000 	.word	0x40007000

08004874 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4b23      	ldr	r3, [pc, #140]	; (800490c <HAL_PWREx_EnableOverDrive+0x98>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_PWREx_EnableOverDrive+0x98>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_PWREx_EnableOverDrive+0x98>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048a2:	f7fd fdf5 	bl	8002490 <HAL_GetTick>
 80048a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048a8:	e009      	b.n	80048be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048aa:	f7fd fdf1 	bl	8002490 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048b8:	d901      	bls.n	80048be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e022      	b.n	8004904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d1ee      	bne.n	80048aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0f      	ldr	r2, [pc, #60]	; (8004910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048d8:	f7fd fdda 	bl	8002490 <HAL_GetTick>
 80048dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048de:	e009      	b.n	80048f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048e0:	f7fd fdd6 	bl	8002490 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ee:	d901      	bls.n	80048f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e007      	b.n	8004904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004900:	d1ee      	bne.n	80048e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	40007000 	.word	0x40007000

08004914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e291      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004938:	4b96      	ldr	r3, [pc, #600]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b04      	cmp	r3, #4
 8004942:	d00c      	beq.n	800495e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004944:	4b93      	ldr	r3, [pc, #588]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b08      	cmp	r3, #8
 800494e:	d112      	bne.n	8004976 <HAL_RCC_OscConfig+0x62>
 8004950:	4b90      	ldr	r3, [pc, #576]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495c:	d10b      	bne.n	8004976 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495e:	4b8d      	ldr	r3, [pc, #564]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d06c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x130>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d168      	bne.n	8004a44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e26b      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x7a>
 8004980:	4b84      	ldr	r3, [pc, #528]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a83      	ldr	r2, [pc, #524]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e02e      	b.n	80049ec <HAL_RCC_OscConfig+0xd8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x9c>
 8004996:	4b7f      	ldr	r3, [pc, #508]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7e      	ldr	r2, [pc, #504]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b7c      	ldr	r3, [pc, #496]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7b      	ldr	r2, [pc, #492]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xd8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0xc0>
 80049ba:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a75      	ldr	r2, [pc, #468]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b73      	ldr	r3, [pc, #460]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a72      	ldr	r2, [pc, #456]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xd8>
 80049d4:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6e      	ldr	r2, [pc, #440]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b6c      	ldr	r3, [pc, #432]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a6b      	ldr	r2, [pc, #428]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fd4c 	bl	8002490 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fd fd48 	bl	8002490 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e21f      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xe8>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fd38 	bl	8002490 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd fd34 	bl	8002490 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e20b      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b57      	ldr	r3, [pc, #348]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x110>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d069      	beq.n	8004b26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a52:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x190>
 8004a6a:	4b4a      	ldr	r3, [pc, #296]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x17a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1df      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	493d      	ldr	r1, [pc, #244]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e040      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd fcea 	bl	8002490 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fce6 	bl	8002490 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e1bd      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4929      	ldr	r1, [pc, #164]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
 8004af2:	e018      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a26      	ldr	r2, [pc, #152]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd fcc6 	bl	8002490 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fd fcc2 	bl	8002490 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e199      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d038      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d019      	beq.n	8004b6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3e:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b46:	f7fd fca3 	bl	8002490 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fc9f 	bl	8002490 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e176      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x23a>
 8004b6c:	e01a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b72:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <HAL_RCC_OscConfig+0x280>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7a:	f7fd fc89 	bl	8002490 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b82:	f7fd fc85 	bl	8002490 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d903      	bls.n	8004b98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e15c      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
 8004b94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b98:	4b91      	ldr	r3, [pc, #580]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ee      	bne.n	8004b82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80a4 	beq.w	8004cfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb2:	4b8b      	ldr	r3, [pc, #556]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	4b88      	ldr	r3, [pc, #544]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a87      	ldr	r2, [pc, #540]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bda:	4b82      	ldr	r3, [pc, #520]	; (8004de4 <HAL_RCC_OscConfig+0x4d0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d118      	bne.n	8004c18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004be6:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <HAL_RCC_OscConfig+0x4d0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a7e      	ldr	r2, [pc, #504]	; (8004de4 <HAL_RCC_OscConfig+0x4d0>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf2:	f7fd fc4d 	bl	8002490 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfa:	f7fd fc49 	bl	8002490 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b64      	cmp	r3, #100	; 0x64
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e120      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0c:	4b75      	ldr	r3, [pc, #468]	; (8004de4 <HAL_RCC_OscConfig+0x4d0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCC_OscConfig+0x31a>
 8004c20:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a6e      	ldr	r2, [pc, #440]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	e02d      	b.n	8004c8a <HAL_RCC_OscConfig+0x376>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x33c>
 8004c36:	4b6a      	ldr	r3, [pc, #424]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a69      	ldr	r2, [pc, #420]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	4b67      	ldr	r3, [pc, #412]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a66      	ldr	r2, [pc, #408]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	e01c      	b.n	8004c8a <HAL_RCC_OscConfig+0x376>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b05      	cmp	r3, #5
 8004c56:	d10c      	bne.n	8004c72 <HAL_RCC_OscConfig+0x35e>
 8004c58:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a60      	ldr	r2, [pc, #384]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	f043 0304 	orr.w	r3, r3, #4
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
 8004c64:	4b5e      	ldr	r3, [pc, #376]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a5d      	ldr	r2, [pc, #372]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c70:	e00b      	b.n	8004c8a <HAL_RCC_OscConfig+0x376>
 8004c72:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a5a      	ldr	r2, [pc, #360]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7e:	4b58      	ldr	r3, [pc, #352]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a57      	ldr	r2, [pc, #348]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d015      	beq.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fd fbfd 	bl	8002490 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fd fbf9 	bl	8002490 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0ce      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ee      	beq.n	8004c9a <HAL_RCC_OscConfig+0x386>
 8004cbc:	e014      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbe:	f7fd fbe7 	bl	8002490 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fd fbe3 	bl	8002490 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0b8      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ee      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4b3c      	ldr	r3, [pc, #240]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	4a3b      	ldr	r2, [pc, #236]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a4 	beq.w	8004e4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d04:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d06b      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d149      	bne.n	8004dac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd fbb4 	bl	8002490 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd fbb0 	bl	8002490 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e087      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	019b      	lsls	r3, r3, #6
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	3b01      	subs	r3, #1
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fb84 	bl	8002490 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fd fb80 	bl	8002490 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e057      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x478>
 8004daa:	e04f      	b.n	8004e4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd fb6a 	bl	8002490 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd fb66 	bl	8002490 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e03d      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <HAL_RCC_OscConfig+0x4cc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4ac>
 8004dde:	e035      	b.n	8004e4c <HAL_RCC_OscConfig+0x538>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004de8:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x544>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d028      	beq.n	8004e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d121      	bne.n	8004e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d11a      	bne.n	8004e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d111      	bne.n	8004e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800

08004e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0d0      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e74:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d910      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b67      	ldr	r3, [pc, #412]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 020f 	bic.w	r2, r3, #15
 8004e8a:	4965      	ldr	r1, [pc, #404]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b63      	ldr	r3, [pc, #396]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0b8      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ebc:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4a58      	ldr	r2, [pc, #352]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed4:	4b53      	ldr	r3, [pc, #332]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a52      	ldr	r2, [pc, #328]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee0:	4b50      	ldr	r3, [pc, #320]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	494d      	ldr	r1, [pc, #308]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d040      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	4b47      	ldr	r3, [pc, #284]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d115      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e07f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e073      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e06b      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4936      	ldr	r1, [pc, #216]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fd fa9e 	bl	8002490 <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7fd fa9a 	bl	8002490 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e053      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 020c 	and.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1eb      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d210      	bcs.n	8004fb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b24      	ldr	r3, [pc, #144]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 020f 	bic.w	r2, r3, #15
 8004f96:	4922      	ldr	r1, [pc, #136]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e032      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4916      	ldr	r1, [pc, #88]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	490e      	ldr	r1, [pc, #56]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fee:	f000 f821 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <HAL_RCC_ClockConfig+0x1cc>)
 8005000:	5cd3      	ldrb	r3, [r2, r3]
 8005002:	fa21 f303 	lsr.w	r3, r1, r3
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1d0>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_ClockConfig+0x1d4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd f9fa 	bl	8002408 <HAL_InitTick>

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023c00 	.word	0x40023c00
 8005024:	40023800 	.word	0x40023800
 8005028:	0800bfb8 	.word	0x0800bfb8
 800502c:	20000000 	.word	0x20000000
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	2300      	movs	r3, #0
 8005044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d007      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x32>
 8005056:	2b08      	cmp	r3, #8
 8005058:	d008      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x38>
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 80b4 	bne.w	80051c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b5e      	ldr	r3, [pc, #376]	; (80051dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005062:	60bb      	str	r3, [r7, #8]
      break;
 8005064:	e0b3      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b5e      	ldr	r3, [pc, #376]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005068:	60bb      	str	r3, [r7, #8]
      break;
 800506a:	e0b0      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b5a      	ldr	r3, [pc, #360]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005076:	4b58      	ldr	r3, [pc, #352]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d04a      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b55      	ldr	r3, [pc, #340]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	ea03 0501 	and.w	r5, r3, r1
 8005098:	ea04 0602 	and.w	r6, r4, r2
 800509c:	4629      	mov	r1, r5
 800509e:	4632      	mov	r2, r6
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f04f 0400 	mov.w	r4, #0
 80050a8:	0154      	lsls	r4, r2, #5
 80050aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050ae:	014b      	lsls	r3, r1, #5
 80050b0:	4619      	mov	r1, r3
 80050b2:	4622      	mov	r2, r4
 80050b4:	1b49      	subs	r1, r1, r5
 80050b6:	eb62 0206 	sbc.w	r2, r2, r6
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	f04f 0400 	mov.w	r4, #0
 80050c2:	0194      	lsls	r4, r2, #6
 80050c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050c8:	018b      	lsls	r3, r1, #6
 80050ca:	1a5b      	subs	r3, r3, r1
 80050cc:	eb64 0402 	sbc.w	r4, r4, r2
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	00e2      	lsls	r2, r4, #3
 80050da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050de:	00d9      	lsls	r1, r3, #3
 80050e0:	460b      	mov	r3, r1
 80050e2:	4614      	mov	r4, r2
 80050e4:	195b      	adds	r3, r3, r5
 80050e6:	eb44 0406 	adc.w	r4, r4, r6
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	0262      	lsls	r2, r4, #9
 80050f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050f8:	0259      	lsls	r1, r3, #9
 80050fa:	460b      	mov	r3, r1
 80050fc:	4614      	mov	r4, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	4621      	mov	r1, r4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f04f 0400 	mov.w	r4, #0
 8005108:	461a      	mov	r2, r3
 800510a:	4623      	mov	r3, r4
 800510c:	f7fb fddc 	bl	8000cc8 <__aeabi_uldivmod>
 8005110:	4603      	mov	r3, r0
 8005112:	460c      	mov	r4, r1
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e049      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005118:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	f04f 0400 	mov.w	r4, #0
 8005122:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	ea03 0501 	and.w	r5, r3, r1
 800512e:	ea04 0602 	and.w	r6, r4, r2
 8005132:	4629      	mov	r1, r5
 8005134:	4632      	mov	r2, r6
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	f04f 0400 	mov.w	r4, #0
 800513e:	0154      	lsls	r4, r2, #5
 8005140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005144:	014b      	lsls	r3, r1, #5
 8005146:	4619      	mov	r1, r3
 8005148:	4622      	mov	r2, r4
 800514a:	1b49      	subs	r1, r1, r5
 800514c:	eb62 0206 	sbc.w	r2, r2, r6
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	0194      	lsls	r4, r2, #6
 800515a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800515e:	018b      	lsls	r3, r1, #6
 8005160:	1a5b      	subs	r3, r3, r1
 8005162:	eb64 0402 	sbc.w	r4, r4, r2
 8005166:	f04f 0100 	mov.w	r1, #0
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	00e2      	lsls	r2, r4, #3
 8005170:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005174:	00d9      	lsls	r1, r3, #3
 8005176:	460b      	mov	r3, r1
 8005178:	4614      	mov	r4, r2
 800517a:	195b      	adds	r3, r3, r5
 800517c:	eb44 0406 	adc.w	r4, r4, r6
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	02a2      	lsls	r2, r4, #10
 800518a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800518e:	0299      	lsls	r1, r3, #10
 8005190:	460b      	mov	r3, r1
 8005192:	4614      	mov	r4, r2
 8005194:	4618      	mov	r0, r3
 8005196:	4621      	mov	r1, r4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f04f 0400 	mov.w	r4, #0
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	f7fb fd91 	bl	8000cc8 <__aeabi_uldivmod>
 80051a6:	4603      	mov	r3, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	60bb      	str	r3, [r7, #8]
      break;
 80051c6:	e002      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051ca:	60bb      	str	r3, [r7, #8]
      break;
 80051cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ce:	68bb      	ldr	r3, [r7, #8]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	40023800 	.word	0x40023800
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	007a1200 	.word	0x007a1200

080051e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000000 	.word	0x20000000

080051fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005200:	f7ff fff0 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005204:	4601      	mov	r1, r0
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0a9b      	lsrs	r3, r3, #10
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4a03      	ldr	r2, [pc, #12]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40023800 	.word	0x40023800
 8005220:	0800bfc8 	.word	0x0800bfc8

08005224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005228:	f7ff ffdc 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 800522c:	4601      	mov	r1, r0
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	0b5b      	lsrs	r3, r3, #13
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4a03      	ldr	r2, [pc, #12]	; (8005248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800523a:	5cd3      	ldrb	r3, [r2, r3]
 800523c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40023800 	.word	0x40023800
 8005248:	0800bfc8 	.word	0x0800bfc8

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d012      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005274:	4b69      	ldr	r3, [pc, #420]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4a68      	ldr	r2, [pc, #416]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800527e:	6093      	str	r3, [r2, #8]
 8005280:	4b66      	ldr	r3, [pc, #408]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	4964      	ldr	r1, [pc, #400]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d017      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a6:	4b5d      	ldr	r3, [pc, #372]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	4959      	ldr	r1, [pc, #356]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c4:	d101      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052e2:	4b4e      	ldr	r3, [pc, #312]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	494a      	ldr	r1, [pc, #296]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005300:	d101      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800530e:	2301      	movs	r3, #1
 8005310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800531e:	2301      	movs	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 808b 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005330:	4b3a      	ldr	r3, [pc, #232]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	4a39      	ldr	r2, [pc, #228]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533a:	6413      	str	r3, [r2, #64]	; 0x40
 800533c:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005348:	4b35      	ldr	r3, [pc, #212]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a34      	ldr	r2, [pc, #208]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005354:	f7fd f89c 	bl	8002490 <HAL_GetTick>
 8005358:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800535a:	e008      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535c:	f7fd f898 	bl	8002490 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e355      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800536e:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800537a:	4b28      	ldr	r3, [pc, #160]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005382:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d035      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d02e      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005398:	4b20      	ldr	r3, [pc, #128]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053a2:	4b1e      	ldr	r3, [pc, #120]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a1d      	ldr	r2, [pc, #116]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053c0:	4b16      	ldr	r3, [pc, #88]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d114      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fd f860 	bl	8002490 <HAL_GetTick>
 80053d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d2:	e00a      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fd f85c 	bl	8002490 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e317      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ee      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005402:	d111      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005412:	400b      	ands	r3, r1
 8005414:	4901      	ldr	r1, [pc, #4]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
 800541a:	e00b      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800541c:	40023800 	.word	0x40023800
 8005420:	40007000 	.word	0x40007000
 8005424:	0ffffcff 	.word	0x0ffffcff
 8005428:	4bb0      	ldr	r3, [pc, #704]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4aaf      	ldr	r2, [pc, #700]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800542e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005432:	6093      	str	r3, [r2, #8]
 8005434:	4bad      	ldr	r3, [pc, #692]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	49aa      	ldr	r1, [pc, #680]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005452:	4ba6      	ldr	r3, [pc, #664]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005458:	4aa4      	ldr	r2, [pc, #656]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800545a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005462:	4ba2      	ldr	r3, [pc, #648]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005464:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	499f      	ldr	r1, [pc, #636]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005480:	4b9a      	ldr	r3, [pc, #616]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800548e:	4997      	ldr	r1, [pc, #604]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a2:	4b92      	ldr	r3, [pc, #584]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b0:	498e      	ldr	r1, [pc, #568]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c4:	4b89      	ldr	r3, [pc, #548]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d2:	4986      	ldr	r1, [pc, #536]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054e6:	4b81      	ldr	r3, [pc, #516]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	497d      	ldr	r1, [pc, #500]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005508:	4b78      	ldr	r3, [pc, #480]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	4975      	ldr	r1, [pc, #468]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800552a:	4b70      	ldr	r3, [pc, #448]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f023 020c 	bic.w	r2, r3, #12
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005538:	496c      	ldr	r1, [pc, #432]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800554c:	4b67      	ldr	r3, [pc, #412]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	4964      	ldr	r1, [pc, #400]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800556e:	4b5f      	ldr	r3, [pc, #380]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	495b      	ldr	r1, [pc, #364]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005590:	4b56      	ldr	r3, [pc, #344]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	4953      	ldr	r1, [pc, #332]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055b2:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	494a      	ldr	r1, [pc, #296]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055d4:	4b45      	ldr	r3, [pc, #276]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	4942      	ldr	r1, [pc, #264]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055f6:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	4939      	ldr	r1, [pc, #228]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005626:	4931      	ldr	r1, [pc, #196]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800563a:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005648:	4928      	ldr	r1, [pc, #160]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005658:	d101      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800567a:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005688:	4918      	ldr	r1, [pc, #96]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800569c:	4b13      	ldr	r3, [pc, #76]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ac:	490f      	ldr	r1, [pc, #60]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d005      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c2:	f040 80d8 	bne.w	8005876 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a08      	ldr	r2, [pc, #32]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d2:	f7fc fedd 	bl	8002490 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056da:	f7fc fed9 	bl	8002490 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b64      	cmp	r3, #100	; 0x64
 80056e6:	d903      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e196      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80056ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f0:	4b6c      	ldr	r3, [pc, #432]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ee      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d021      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11d      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005710:	4b64      	ldr	r3, [pc, #400]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005716:	0c1b      	lsrs	r3, r3, #16
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800571e:	4b61      	ldr	r3, [pc, #388]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005724:	0e1b      	lsrs	r3, r3, #24
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	019a      	lsls	r2, r3, #6
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	431a      	orrs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	061b      	lsls	r3, r3, #24
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	071b      	lsls	r3, r3, #28
 8005744:	4957      	ldr	r1, [pc, #348]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800576a:	2b00      	cmp	r3, #0
 800576c:	d02e      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005776:	d129      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005778:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578c:	0f1b      	lsrs	r3, r3, #28
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	019a      	lsls	r2, r3, #6
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	071b      	lsls	r3, r3, #28
 80057ac:	493d      	ldr	r1, [pc, #244]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057b4:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ba:	f023 021f 	bic.w	r2, r3, #31
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	3b01      	subs	r3, #1
 80057c4:	4937      	ldr	r1, [pc, #220]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01d      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057de:	0e1b      	lsrs	r3, r3, #24
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057e6:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ec:	0f1b      	lsrs	r3, r3, #28
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	019a      	lsls	r2, r3, #6
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	431a      	orrs	r2, r3
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	431a      	orrs	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	071b      	lsls	r3, r3, #28
 800580c:	4925      	ldr	r1, [pc, #148]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	019a      	lsls	r2, r3, #6
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	071b      	lsls	r3, r3, #28
 800583c:	4919      	ldr	r1, [pc, #100]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800584a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800584e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005850:	f7fc fe1e 	bl	8002490 <HAL_GetTick>
 8005854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005858:	f7fc fe1a 	bl	8002490 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0d7      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800586a:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 80cd 	bne.w	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588a:	f7fc fe01 	bl	8002490 <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005892:	f7fc fdfd 	bl	8002490 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b64      	cmp	r3, #100	; 0x64
 800589e:	d903      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0ba      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80058a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058a8:	4b5e      	ldr	r3, [pc, #376]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058b4:	d0ed      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02e      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d12a      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058de:	4b51      	ldr	r3, [pc, #324]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058ec:	4b4d      	ldr	r3, [pc, #308]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	0f1b      	lsrs	r3, r3, #28
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	019a      	lsls	r2, r3, #6
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	061b      	lsls	r3, r3, #24
 800590c:	431a      	orrs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	071b      	lsls	r3, r3, #28
 8005912:	4944      	ldr	r1, [pc, #272]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800591a:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800591c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005920:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	3b01      	subs	r3, #1
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	493d      	ldr	r1, [pc, #244]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d022      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005948:	d11d      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800594a:	4b36      	ldr	r3, [pc, #216]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	0e1b      	lsrs	r3, r3, #24
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005958:	4b32      	ldr	r3, [pc, #200]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	0f1b      	lsrs	r3, r3, #28
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	019a      	lsls	r2, r3, #6
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	431a      	orrs	r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	431a      	orrs	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	071b      	lsls	r3, r3, #28
 800597e:	4929      	ldr	r1, [pc, #164]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d028      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	0e1b      	lsrs	r3, r3, #24
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059a0:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	019a      	lsls	r2, r3, #6
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	431a      	orrs	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	071b      	lsls	r3, r3, #28
 80059c6:	4917      	ldr	r1, [pc, #92]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4911      	ldr	r1, [pc, #68]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0e      	ldr	r2, [pc, #56]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f0:	f7fc fd4e 	bl	8002490 <HAL_GetTick>
 80059f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059f8:	f7fc fd4a 	bl	8002490 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e007      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a16:	d1ef      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40023800 	.word	0x40023800

08005a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e01d      	b.n	8005a76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc fa28 	bl	8001ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 fc50 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_TIM_Base_Start_IT+0x50>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_TIM_Base_Start_IT+0x42>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab0:	d007      	beq.n	8005ac2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	00010007 	.word	0x00010007

08005ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e01d      	b.n	8005b22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f815 	bl	8005b2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f000 fbfa 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	d841      	bhi.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x94>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_TIM_PWM_Start_IT+0x18>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005bd5 	.word	0x08005bd5
 8005b60:	08005bd5 	.word	0x08005bd5
 8005b64:	08005bd5 	.word	0x08005bd5
 8005b68:	08005b9f 	.word	0x08005b9f
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005bd5 	.word	0x08005bd5
 8005b74:	08005bd5 	.word	0x08005bd5
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bc3 	.word	0x08005bc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0202 	orr.w	r2, r2, #2
 8005b9a:	60da      	str	r2, [r3, #12]
      break;
 8005b9c:	e01b      	b.n	8005bd6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0204 	orr.w	r2, r2, #4
 8005bac:	60da      	str	r2, [r3, #12]
      break;
 8005bae:	e012      	b.n	8005bd6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0208 	orr.w	r2, r2, #8
 8005bbe:	60da      	str	r2, [r3, #12]
      break;
 8005bc0:	e009      	b.n	8005bd6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0210 	orr.w	r2, r2, #16
 8005bd0:	60da      	str	r2, [r3, #12]
      break;
 8005bd2:	e000      	b.n	8005bd6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8005bd4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f828 	bl	8006c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <HAL_TIM_PWM_Start_IT+0x108>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0xb8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <HAL_TIM_PWM_Start_IT+0x10c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIM_PWM_Start_IT+0xbc>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_TIM_PWM_Start_IT+0xbe>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_TIM_PWM_Start_IT+0x110>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b06      	cmp	r3, #6
 8005c22:	d00b      	beq.n	8005c3c <HAL_TIM_PWM_Start_IT+0xfc>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2a:	d007      	beq.n	8005c3c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010400 	.word	0x40010400
 8005c50:	00010007 	.word	0x00010007

08005c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d122      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d11b      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0202 	mvn.w	r2, #2
 8005c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fb1a 	bl	80062d0 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fb0c 	bl	80062bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb1d 	bl	80062e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0204 	mvn.w	r2, #4
 8005cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 faf0 	bl	80062d0 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fae2 	bl	80062bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 faf3 	bl	80062e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0208 	mvn.w	r2, #8
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fac6 	bl	80062d0 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fab8 	bl	80062bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fac9 	bl	80062e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d122      	bne.n	8005dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d11b      	bne.n	8005dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0210 	mvn.w	r2, #16
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2208      	movs	r2, #8
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa9c 	bl	80062d0 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa8e 	bl	80062bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa9f 	bl	80062e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10e      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0201 	mvn.w	r2, #1
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fb fc06 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d10e      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d107      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 f914 	bl	800702c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e12:	d10e      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d107      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 f907 	bl	8007040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	d10e      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa4d 	bl	80062f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d10e      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f06f 0220 	mvn.w	r2, #32
 8005e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fb fbc7 	bl	8001618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e105      	b.n	80060ba <HAL_TIM_PWM_ConfigChannel+0x226>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b14      	cmp	r3, #20
 8005ec2:	f200 80f0 	bhi.w	80060a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	080060a7 	.word	0x080060a7
 8005ed4:	080060a7 	.word	0x080060a7
 8005ed8:	080060a7 	.word	0x080060a7
 8005edc:	08005f61 	.word	0x08005f61
 8005ee0:	080060a7 	.word	0x080060a7
 8005ee4:	080060a7 	.word	0x080060a7
 8005ee8:	080060a7 	.word	0x080060a7
 8005eec:	08005fa3 	.word	0x08005fa3
 8005ef0:	080060a7 	.word	0x080060a7
 8005ef4:	080060a7 	.word	0x080060a7
 8005ef8:	080060a7 	.word	0x080060a7
 8005efc:	08005fe3 	.word	0x08005fe3
 8005f00:	080060a7 	.word	0x080060a7
 8005f04:	080060a7 	.word	0x080060a7
 8005f08:	080060a7 	.word	0x080060a7
 8005f0c:	08006025 	.word	0x08006025
 8005f10:	080060a7 	.word	0x080060a7
 8005f14:	080060a7 	.word	0x080060a7
 8005f18:	080060a7 	.word	0x080060a7
 8005f1c:	08006065 	.word	0x08006065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fa90 	bl	800644c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0204 	bic.w	r2, r2, #4
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	619a      	str	r2, [r3, #24]
      break;
 8005f5e:	e0a3      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fae2 	bl	8006530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6999      	ldr	r1, [r3, #24]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	021a      	lsls	r2, r3, #8
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	619a      	str	r2, [r3, #24]
      break;
 8005fa0:	e082      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fb39 	bl	8006620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0208 	orr.w	r2, r2, #8
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0204 	bic.w	r2, r2, #4
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	61da      	str	r2, [r3, #28]
      break;
 8005fe0:	e062      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fb8f 	bl	800670c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	021a      	lsls	r2, r3, #8
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	61da      	str	r2, [r3, #28]
      break;
 8006022:	e041      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fbc6 	bl	80067bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0208 	orr.w	r2, r2, #8
 800603e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0204 	bic.w	r2, r2, #4
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006062:	e021      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fbf8 	bl	8006860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060a4:	e000      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80060a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop

080060c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_ConfigClockSource+0x18>
 80060d8:	2302      	movs	r3, #2
 80060da:	e0a6      	b.n	800622a <HAL_TIM_ConfigClockSource+0x166>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4b4f      	ldr	r3, [pc, #316]	; (8006234 <HAL_TIM_ConfigClockSource+0x170>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d067      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0x120>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d80b      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x6c>
 8006118:	2b10      	cmp	r3, #16
 800611a:	d073      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x140>
 800611c:	2b10      	cmp	r3, #16
 800611e:	d802      	bhi.n	8006126 <HAL_TIM_ConfigClockSource+0x62>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d06f      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006124:	e078      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006126:	2b20      	cmp	r3, #32
 8006128:	d06c      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x140>
 800612a:	2b30      	cmp	r3, #48	; 0x30
 800612c:	d06a      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800612e:	e073      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006130:	2b70      	cmp	r3, #112	; 0x70
 8006132:	d00d      	beq.n	8006150 <HAL_TIM_ConfigClockSource+0x8c>
 8006134:	2b70      	cmp	r3, #112	; 0x70
 8006136:	d804      	bhi.n	8006142 <HAL_TIM_ConfigClockSource+0x7e>
 8006138:	2b50      	cmp	r3, #80	; 0x50
 800613a:	d033      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0xe0>
 800613c:	2b60      	cmp	r3, #96	; 0x60
 800613e:	d041      	beq.n	80061c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006140:	e06a      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d066      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x152>
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d017      	beq.n	800617e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800614e:	e063      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f000 fd48 	bl	8006bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006172:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	609a      	str	r2, [r3, #8]
      break;
 800617c:	e04c      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6899      	ldr	r1, [r3, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f000 fd31 	bl	8006bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a0:	609a      	str	r2, [r3, #8]
      break;
 80061a2:	e039      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	461a      	mov	r2, r3
 80061b2:	f000 fca5 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2150      	movs	r1, #80	; 0x50
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fcfe 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 80061c2:	e029      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f000 fcc4 	bl	8006b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2160      	movs	r1, #96	; 0x60
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fcee 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 80061e2:	e019      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f000 fc85 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2140      	movs	r1, #64	; 0x40
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fcde 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 8006202:	e009      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fcd5 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 8006214:	e000      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	fffeff88 	.word	0xfffeff88

08006238 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIM_SlaveConfigSynchro+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e031      	b.n	80062b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb50 	bl	8006908 <TIM_SlaveTimer_SetConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e018      	b.n	80062b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006290:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062a0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a40      	ldr	r2, [pc, #256]	; (8006420 <TIM_Base_SetConfig+0x114>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632a:	d00f      	beq.n	800634c <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a3d      	ldr	r2, [pc, #244]	; (8006424 <TIM_Base_SetConfig+0x118>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00b      	beq.n	800634c <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a3c      	ldr	r2, [pc, #240]	; (8006428 <TIM_Base_SetConfig+0x11c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a3b      	ldr	r2, [pc, #236]	; (800642c <TIM_Base_SetConfig+0x120>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a3a      	ldr	r2, [pc, #232]	; (8006430 <TIM_Base_SetConfig+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d108      	bne.n	800635e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2f      	ldr	r2, [pc, #188]	; (8006420 <TIM_Base_SetConfig+0x114>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d02b      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d027      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2c      	ldr	r2, [pc, #176]	; (8006424 <TIM_Base_SetConfig+0x118>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d023      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <TIM_Base_SetConfig+0x11c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01f      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2a      	ldr	r2, [pc, #168]	; (800642c <TIM_Base_SetConfig+0x120>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01b      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a29      	ldr	r2, [pc, #164]	; (8006430 <TIM_Base_SetConfig+0x124>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d017      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a28      	ldr	r2, [pc, #160]	; (8006434 <TIM_Base_SetConfig+0x128>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a27      	ldr	r2, [pc, #156]	; (8006438 <TIM_Base_SetConfig+0x12c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00f      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a26      	ldr	r2, [pc, #152]	; (800643c <TIM_Base_SetConfig+0x130>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a25      	ldr	r2, [pc, #148]	; (8006440 <TIM_Base_SetConfig+0x134>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a24      	ldr	r2, [pc, #144]	; (8006444 <TIM_Base_SetConfig+0x138>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a23      	ldr	r2, [pc, #140]	; (8006448 <TIM_Base_SetConfig+0x13c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d108      	bne.n	80063d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <TIM_Base_SetConfig+0x114>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0xf8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <TIM_Base_SetConfig+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	615a      	str	r2, [r3, #20]
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40010400 	.word	0x40010400
 8006434:	40014000 	.word	0x40014000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800
 8006440:	40001800 	.word	0x40001800
 8006444:	40001c00 	.word	0x40001c00
 8006448:	40002000 	.word	0x40002000

0800644c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <TIM_OC1_SetConfig+0xd8>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 0302 	bic.w	r3, r3, #2
 8006494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a21      	ldr	r2, [pc, #132]	; (8006528 <TIM_OC1_SetConfig+0xdc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_OC1_SetConfig+0x64>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a20      	ldr	r2, [pc, #128]	; (800652c <TIM_OC1_SetConfig+0xe0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10c      	bne.n	80064ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f023 0308 	bic.w	r3, r3, #8
 80064b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a16      	ldr	r2, [pc, #88]	; (8006528 <TIM_OC1_SetConfig+0xdc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_OC1_SetConfig+0x8e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <TIM_OC1_SetConfig+0xe0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d111      	bne.n	80064fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	fffeff8f 	.word	0xfffeff8f
 8006528:	40010000 	.word	0x40010000
 800652c:	40010400 	.word	0x40010400

08006530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f023 0210 	bic.w	r2, r3, #16
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <TIM_OC2_SetConfig+0xe4>)
 800655c:	4013      	ands	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0320 	bic.w	r3, r3, #32
 800657a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a23      	ldr	r2, [pc, #140]	; (8006618 <TIM_OC2_SetConfig+0xe8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC2_SetConfig+0x68>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a22      	ldr	r2, [pc, #136]	; (800661c <TIM_OC2_SetConfig+0xec>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10d      	bne.n	80065b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <TIM_OC2_SetConfig+0xe8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC2_SetConfig+0x94>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a17      	ldr	r2, [pc, #92]	; (800661c <TIM_OC2_SetConfig+0xec>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d113      	bne.n	80065ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	feff8fff 	.word	0xfeff8fff
 8006618:	40010000 	.word	0x40010000
 800661c:	40010400 	.word	0x40010400

08006620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <TIM_OC3_SetConfig+0xe0>)
 800664c:	4013      	ands	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a22      	ldr	r2, [pc, #136]	; (8006704 <TIM_OC3_SetConfig+0xe4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC3_SetConfig+0x66>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <TIM_OC3_SetConfig+0xe8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10d      	bne.n	80066a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800668c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a17      	ldr	r2, [pc, #92]	; (8006704 <TIM_OC3_SetConfig+0xe4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_OC3_SetConfig+0x92>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a16      	ldr	r2, [pc, #88]	; (8006708 <TIM_OC3_SetConfig+0xe8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d113      	bne.n	80066da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	fffeff8f 	.word	0xfffeff8f
 8006704:	40010000 	.word	0x40010000
 8006708:	40010400 	.word	0x40010400

0800670c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <TIM_OC4_SetConfig+0xa4>)
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <TIM_OC4_SetConfig+0xa8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC4_SetConfig+0x68>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a12      	ldr	r2, [pc, #72]	; (80067b8 <TIM_OC4_SetConfig+0xac>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d109      	bne.n	8006788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800677a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	019b      	lsls	r3, r3, #6
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	feff8fff 	.word	0xfeff8fff
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40010400 	.word	0x40010400

080067bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <TIM_OC5_SetConfig+0x98>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	041b      	lsls	r3, r3, #16
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a12      	ldr	r2, [pc, #72]	; (8006858 <TIM_OC5_SetConfig+0x9c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d003      	beq.n	800681a <TIM_OC5_SetConfig+0x5e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a11      	ldr	r2, [pc, #68]	; (800685c <TIM_OC5_SetConfig+0xa0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d109      	bne.n	800682e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	fffeff8f 	.word	0xfffeff8f
 8006858:	40010000 	.word	0x40010000
 800685c:	40010400 	.word	0x40010400

08006860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4b1c      	ldr	r3, [pc, #112]	; (80068fc <TIM_OC6_SetConfig+0x9c>)
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	051b      	lsls	r3, r3, #20
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a13      	ldr	r2, [pc, #76]	; (8006900 <TIM_OC6_SetConfig+0xa0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC6_SetConfig+0x60>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a12      	ldr	r2, [pc, #72]	; (8006904 <TIM_OC6_SetConfig+0xa4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d109      	bne.n	80068d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	029b      	lsls	r3, r3, #10
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	feff8fff 	.word	0xfeff8fff
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400

08006908 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4b39      	ldr	r3, [pc, #228]	; (8006a14 <TIM_SlaveTimer_SetConfig+0x10c>)
 8006930:	4013      	ands	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b30      	cmp	r3, #48	; 0x30
 800694c:	d05c      	beq.n	8006a08 <TIM_SlaveTimer_SetConfig+0x100>
 800694e:	2b30      	cmp	r3, #48	; 0x30
 8006950:	d806      	bhi.n	8006960 <TIM_SlaveTimer_SetConfig+0x58>
 8006952:	2b10      	cmp	r3, #16
 8006954:	d058      	beq.n	8006a08 <TIM_SlaveTimer_SetConfig+0x100>
 8006956:	2b20      	cmp	r3, #32
 8006958:	d056      	beq.n	8006a08 <TIM_SlaveTimer_SetConfig+0x100>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d054      	beq.n	8006a08 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800695e:	e054      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006960:	2b50      	cmp	r3, #80	; 0x50
 8006962:	d03d      	beq.n	80069e0 <TIM_SlaveTimer_SetConfig+0xd8>
 8006964:	2b50      	cmp	r3, #80	; 0x50
 8006966:	d802      	bhi.n	800696e <TIM_SlaveTimer_SetConfig+0x66>
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d010      	beq.n	800698e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800696c:	e04d      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800696e:	2b60      	cmp	r3, #96	; 0x60
 8006970:	d040      	beq.n	80069f4 <TIM_SlaveTimer_SetConfig+0xec>
 8006972:	2b70      	cmp	r3, #112	; 0x70
 8006974:	d000      	beq.n	8006978 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006976:	e048      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68d9      	ldr	r1, [r3, #12]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f000 f934 	bl	8006bf4 <TIM_ETR_SetConfig>
      break;
 800698c:	e03d      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b05      	cmp	r3, #5
 8006994:	d101      	bne.n	800699a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e038      	b.n	8006a0c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069c0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	621a      	str	r2, [r3, #32]
      break;
 80069de:	e014      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f000 f887 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      break;
 80069f2:	e00a      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f000 f8ac 	bl	8006b5e <TIM_TI2_ConfigInputStage>
      break;
 8006a06:	e000      	b.n	8006a0a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006a08:	bf00      	nop
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	fffefff8 	.word	0xfffefff8

08006a18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <TIM_TI1_SetConfig+0xcc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01b      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4c:	d017      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <TIM_TI1_SetConfig+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a24      	ldr	r2, [pc, #144]	; (8006aec <TIM_TI1_SetConfig+0xd4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a23      	ldr	r2, [pc, #140]	; (8006af0 <TIM_TI1_SetConfig+0xd8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <TIM_TI1_SetConfig+0xdc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <TIM_TI1_SetConfig+0xe0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_TI1_SetConfig+0x66>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a20      	ldr	r2, [pc, #128]	; (8006afc <TIM_TI1_SetConfig+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d101      	bne.n	8006a82 <TIM_TI1_SetConfig+0x6a>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <TIM_TI1_SetConfig+0x6c>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e003      	b.n	8006aa2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f023 030a 	bic.w	r3, r3, #10
 8006abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f003 030a 	and.w	r3, r3, #10
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40001800 	.word	0x40001800

08006b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 030a 	bic.w	r3, r3, #10
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b087      	sub	sp, #28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f023 0210 	bic.w	r2, r3, #16
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	031b      	lsls	r3, r3, #12
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f043 0307 	orr.w	r3, r3, #7
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	021a      	lsls	r2, r3, #8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	2201      	movs	r2, #1
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1a      	ldr	r2, [r3, #32]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	401a      	ands	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1a      	ldr	r2, [r3, #32]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e086      	b.n	8006da2 <HAL_TIMEx_HallSensor_Init+0x122>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f881 	bl	8006db0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7ff fb23 	bl	800630c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6819      	ldr	r1, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	f7ff fea0 	bl	8006a18 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 020c 	bic.w	r2, r2, #12
 8006ce6:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6999      	ldr	r1, [r3, #24]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d08:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d18:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d28:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <HAL_TIMEx_HallSensor_Init+0x12c>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0204 	orr.w	r2, r2, #4
 8006d48:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006d52:	2370      	movs	r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006d56:	2300      	movs	r3, #0
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f107 020c 	add.w	r2, r7, #12
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fbdc 	bl	8006530 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d86:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006d96:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3728      	adds	r7, #40	; 0x28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	fffefff8 	.word	0xfffefff8

08006db0 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff ff2d 	bl	8006c34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_TIMEx_HallSensor_Start+0x4c>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b06      	cmp	r3, #6
 8006dea:	d00b      	beq.n	8006e04 <HAL_TIMEx_HallSensor_Start+0x40>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df2:	d007      	beq.n	8006e04 <HAL_TIMEx_HallSensor_Start+0x40>
  {
    __HAL_TIM_ENABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	00010007 	.word	0x00010007

08006e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e06d      	b.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a30      	ldr	r2, [pc, #192]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a20      	ldr	r2, [pc, #128]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d022      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d01d      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1a      	ldr	r2, [pc, #104]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a16      	ldr	r2, [pc, #88]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a15      	ldr	r2, [pc, #84]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10c      	bne.n	8006ef6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40001800 	.word	0x40001800

08006f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e065      	b.n	8007018 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a16      	ldr	r2, [pc, #88]	; (8007024 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a14      	ldr	r2, [pc, #80]	; (8007028 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d115      	bne.n	8007006 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	051b      	lsls	r3, r3, #20
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	40010000 	.word	0x40010000
 8007028:	40010400 	.word	0x40010400

0800702c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e040      	b.n	80070e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fb f832 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2224      	movs	r2, #36	; 0x24
 8007080:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f972 	bl	800737c <UART_SetConfig>
 8007098:	4603      	mov	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e022      	b.n	80070e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fc10 	bl	80078d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fc97 	bl	8007a14 <UART_CheckIdleState>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	f640 030f 	movw	r3, #2063	; 0x80f
 8007116:	4013      	ands	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d113      	bne.n	8007148 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00e      	beq.n	8007148 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8100 	beq.w	800733e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
      }
      return;
 8007146:	e0fa      	b.n	800733e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80d5 	beq.w	80072fa <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80ca 	beq.w	80072fa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00e      	beq.n	800718e <HAL_UART_IRQHandler+0x9e>
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007186:	f043 0201 	orr.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <HAL_UART_IRQHandler+0xc6>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ae:	f043 0204 	orr.w	r2, r3, #4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <HAL_UART_IRQHandler+0xee>
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2204      	movs	r2, #4
 80071d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d6:	f043 0202 	orr.w	r2, r3, #2
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d013      	beq.n	8007210 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2208      	movs	r2, #8
 8007202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007208:	f043 0208 	orr.w	r2, r3, #8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00f      	beq.n	800723a <HAL_UART_IRQHandler+0x14a>
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800722c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007232:	f043 0220 	orr.w	r2, r3, #32
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d07f      	beq.n	8007342 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00c      	beq.n	8007266 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800726a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d004      	beq.n	8007284 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007280:	2b00      	cmp	r3, #0
 8007282:	d031      	beq.n	80072e8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fc6f 	bl	8007b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d123      	bne.n	80072e0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d013      	beq.n	80072d8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b4:	4a26      	ldr	r2, [pc, #152]	; (8007350 <HAL_UART_IRQHandler+0x260>)
 80072b6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fc f897 	bl	80033f0 <HAL_DMA_Abort_IT>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d016      	beq.n	80072f6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80072d2:	4610      	mov	r0, r2
 80072d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d6:	e00e      	b.n	80072f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f845 	bl	8007368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072de:	e00a      	b.n	80072f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f841 	bl	8007368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e6:	e006      	b.n	80072f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f83d 	bl	8007368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80072f4:	e025      	b.n	8007342 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f6:	bf00      	nop
    return;
 80072f8:	e023      	b.n	8007342 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00d      	beq.n	8007320 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d008      	beq.n	8007320 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
    }
    return;
 800731e:	e012      	b.n	8007346 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00e      	beq.n	8007348 <HAL_UART_IRQHandler+0x258>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fc4d 	bl	8007bd4 <UART_EndTransmit_IT>
    return;
 800733a:	bf00      	nop
 800733c:	e004      	b.n	8007348 <HAL_UART_IRQHandler+0x258>
      return;
 800733e:	bf00      	nop
 8007340:	e002      	b.n	8007348 <HAL_UART_IRQHandler+0x258>
    return;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <HAL_UART_IRQHandler+0x258>
    return;
 8007346:	bf00      	nop
  }

}
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	08007ba9 	.word	0x08007ba9

08007354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007384:	2300      	movs	r3, #0
 8007386:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4bb1      	ldr	r3, [pc, #708]	; (8007670 <UART_SetConfig+0x2f4>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	6939      	ldr	r1, [r7, #16]
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a9f      	ldr	r2, [pc, #636]	; (8007674 <UART_SetConfig+0x2f8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d121      	bne.n	8007440 <UART_SetConfig+0xc4>
 80073fc:	4b9e      	ldr	r3, [pc, #632]	; (8007678 <UART_SetConfig+0x2fc>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b03      	cmp	r3, #3
 8007408:	d816      	bhi.n	8007438 <UART_SetConfig+0xbc>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <UART_SetConfig+0x94>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007421 	.word	0x08007421
 8007414:	0800742d 	.word	0x0800742d
 8007418:	08007427 	.word	0x08007427
 800741c:	08007433 	.word	0x08007433
 8007420:	2301      	movs	r3, #1
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e151      	b.n	80076ca <UART_SetConfig+0x34e>
 8007426:	2302      	movs	r3, #2
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e14e      	b.n	80076ca <UART_SetConfig+0x34e>
 800742c:	2304      	movs	r3, #4
 800742e:	77fb      	strb	r3, [r7, #31]
 8007430:	e14b      	b.n	80076ca <UART_SetConfig+0x34e>
 8007432:	2308      	movs	r3, #8
 8007434:	77fb      	strb	r3, [r7, #31]
 8007436:	e148      	b.n	80076ca <UART_SetConfig+0x34e>
 8007438:	2310      	movs	r3, #16
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	bf00      	nop
 800743e:	e144      	b.n	80076ca <UART_SetConfig+0x34e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a8d      	ldr	r2, [pc, #564]	; (800767c <UART_SetConfig+0x300>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d134      	bne.n	80074b4 <UART_SetConfig+0x138>
 800744a:	4b8b      	ldr	r3, [pc, #556]	; (8007678 <UART_SetConfig+0x2fc>)
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007450:	f003 030c 	and.w	r3, r3, #12
 8007454:	2b0c      	cmp	r3, #12
 8007456:	d829      	bhi.n	80074ac <UART_SetConfig+0x130>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0xe4>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007495 	.word	0x08007495
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074a1 	.word	0x080074a1
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	0800749b 	.word	0x0800749b
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074a7 	.word	0x080074a7
 8007494:	2300      	movs	r3, #0
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e117      	b.n	80076ca <UART_SetConfig+0x34e>
 800749a:	2302      	movs	r3, #2
 800749c:	77fb      	strb	r3, [r7, #31]
 800749e:	e114      	b.n	80076ca <UART_SetConfig+0x34e>
 80074a0:	2304      	movs	r3, #4
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e111      	b.n	80076ca <UART_SetConfig+0x34e>
 80074a6:	2308      	movs	r3, #8
 80074a8:	77fb      	strb	r3, [r7, #31]
 80074aa:	e10e      	b.n	80076ca <UART_SetConfig+0x34e>
 80074ac:	2310      	movs	r3, #16
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	bf00      	nop
 80074b2:	e10a      	b.n	80076ca <UART_SetConfig+0x34e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a71      	ldr	r2, [pc, #452]	; (8007680 <UART_SetConfig+0x304>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d120      	bne.n	8007500 <UART_SetConfig+0x184>
 80074be:	4b6e      	ldr	r3, [pc, #440]	; (8007678 <UART_SetConfig+0x2fc>)
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d00f      	beq.n	80074ec <UART_SetConfig+0x170>
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d802      	bhi.n	80074d6 <UART_SetConfig+0x15a>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <UART_SetConfig+0x164>
 80074d4:	e010      	b.n	80074f8 <UART_SetConfig+0x17c>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d005      	beq.n	80074e6 <UART_SetConfig+0x16a>
 80074da:	2b30      	cmp	r3, #48	; 0x30
 80074dc:	d009      	beq.n	80074f2 <UART_SetConfig+0x176>
 80074de:	e00b      	b.n	80074f8 <UART_SetConfig+0x17c>
 80074e0:	2300      	movs	r3, #0
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e0f1      	b.n	80076ca <UART_SetConfig+0x34e>
 80074e6:	2302      	movs	r3, #2
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e0ee      	b.n	80076ca <UART_SetConfig+0x34e>
 80074ec:	2304      	movs	r3, #4
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e0eb      	b.n	80076ca <UART_SetConfig+0x34e>
 80074f2:	2308      	movs	r3, #8
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e0e8      	b.n	80076ca <UART_SetConfig+0x34e>
 80074f8:	2310      	movs	r3, #16
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	bf00      	nop
 80074fe:	e0e4      	b.n	80076ca <UART_SetConfig+0x34e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a5f      	ldr	r2, [pc, #380]	; (8007684 <UART_SetConfig+0x308>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d120      	bne.n	800754c <UART_SetConfig+0x1d0>
 800750a:	4b5b      	ldr	r3, [pc, #364]	; (8007678 <UART_SetConfig+0x2fc>)
 800750c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d00f      	beq.n	8007538 <UART_SetConfig+0x1bc>
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d802      	bhi.n	8007522 <UART_SetConfig+0x1a6>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <UART_SetConfig+0x1b0>
 8007520:	e010      	b.n	8007544 <UART_SetConfig+0x1c8>
 8007522:	2b80      	cmp	r3, #128	; 0x80
 8007524:	d005      	beq.n	8007532 <UART_SetConfig+0x1b6>
 8007526:	2bc0      	cmp	r3, #192	; 0xc0
 8007528:	d009      	beq.n	800753e <UART_SetConfig+0x1c2>
 800752a:	e00b      	b.n	8007544 <UART_SetConfig+0x1c8>
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e0cb      	b.n	80076ca <UART_SetConfig+0x34e>
 8007532:	2302      	movs	r3, #2
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e0c8      	b.n	80076ca <UART_SetConfig+0x34e>
 8007538:	2304      	movs	r3, #4
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e0c5      	b.n	80076ca <UART_SetConfig+0x34e>
 800753e:	2308      	movs	r3, #8
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e0c2      	b.n	80076ca <UART_SetConfig+0x34e>
 8007544:	2310      	movs	r3, #16
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	bf00      	nop
 800754a:	e0be      	b.n	80076ca <UART_SetConfig+0x34e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a4d      	ldr	r2, [pc, #308]	; (8007688 <UART_SetConfig+0x30c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d124      	bne.n	80075a0 <UART_SetConfig+0x224>
 8007556:	4b48      	ldr	r3, [pc, #288]	; (8007678 <UART_SetConfig+0x2fc>)
 8007558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007564:	d012      	beq.n	800758c <UART_SetConfig+0x210>
 8007566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756a:	d802      	bhi.n	8007572 <UART_SetConfig+0x1f6>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <UART_SetConfig+0x204>
 8007570:	e012      	b.n	8007598 <UART_SetConfig+0x21c>
 8007572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007576:	d006      	beq.n	8007586 <UART_SetConfig+0x20a>
 8007578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0x216>
 800757e:	e00b      	b.n	8007598 <UART_SetConfig+0x21c>
 8007580:	2300      	movs	r3, #0
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e0a1      	b.n	80076ca <UART_SetConfig+0x34e>
 8007586:	2302      	movs	r3, #2
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e09e      	b.n	80076ca <UART_SetConfig+0x34e>
 800758c:	2304      	movs	r3, #4
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e09b      	b.n	80076ca <UART_SetConfig+0x34e>
 8007592:	2308      	movs	r3, #8
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e098      	b.n	80076ca <UART_SetConfig+0x34e>
 8007598:	2310      	movs	r3, #16
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	bf00      	nop
 800759e:	e094      	b.n	80076ca <UART_SetConfig+0x34e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a39      	ldr	r2, [pc, #228]	; (800768c <UART_SetConfig+0x310>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d124      	bne.n	80075f4 <UART_SetConfig+0x278>
 80075aa:	4b33      	ldr	r3, [pc, #204]	; (8007678 <UART_SetConfig+0x2fc>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b8:	d012      	beq.n	80075e0 <UART_SetConfig+0x264>
 80075ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075be:	d802      	bhi.n	80075c6 <UART_SetConfig+0x24a>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <UART_SetConfig+0x258>
 80075c4:	e012      	b.n	80075ec <UART_SetConfig+0x270>
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ca:	d006      	beq.n	80075da <UART_SetConfig+0x25e>
 80075cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d0:	d009      	beq.n	80075e6 <UART_SetConfig+0x26a>
 80075d2:	e00b      	b.n	80075ec <UART_SetConfig+0x270>
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e077      	b.n	80076ca <UART_SetConfig+0x34e>
 80075da:	2302      	movs	r3, #2
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e074      	b.n	80076ca <UART_SetConfig+0x34e>
 80075e0:	2304      	movs	r3, #4
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e071      	b.n	80076ca <UART_SetConfig+0x34e>
 80075e6:	2308      	movs	r3, #8
 80075e8:	77fb      	strb	r3, [r7, #31]
 80075ea:	e06e      	b.n	80076ca <UART_SetConfig+0x34e>
 80075ec:	2310      	movs	r3, #16
 80075ee:	77fb      	strb	r3, [r7, #31]
 80075f0:	bf00      	nop
 80075f2:	e06a      	b.n	80076ca <UART_SetConfig+0x34e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a25      	ldr	r2, [pc, #148]	; (8007690 <UART_SetConfig+0x314>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d124      	bne.n	8007648 <UART_SetConfig+0x2cc>
 80075fe:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <UART_SetConfig+0x2fc>)
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007604:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760c:	d012      	beq.n	8007634 <UART_SetConfig+0x2b8>
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007612:	d802      	bhi.n	800761a <UART_SetConfig+0x29e>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <UART_SetConfig+0x2ac>
 8007618:	e012      	b.n	8007640 <UART_SetConfig+0x2c4>
 800761a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761e:	d006      	beq.n	800762e <UART_SetConfig+0x2b2>
 8007620:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007624:	d009      	beq.n	800763a <UART_SetConfig+0x2be>
 8007626:	e00b      	b.n	8007640 <UART_SetConfig+0x2c4>
 8007628:	2300      	movs	r3, #0
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e04d      	b.n	80076ca <UART_SetConfig+0x34e>
 800762e:	2302      	movs	r3, #2
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e04a      	b.n	80076ca <UART_SetConfig+0x34e>
 8007634:	2304      	movs	r3, #4
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e047      	b.n	80076ca <UART_SetConfig+0x34e>
 800763a:	2308      	movs	r3, #8
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e044      	b.n	80076ca <UART_SetConfig+0x34e>
 8007640:	2310      	movs	r3, #16
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	bf00      	nop
 8007646:	e040      	b.n	80076ca <UART_SetConfig+0x34e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a11      	ldr	r2, [pc, #68]	; (8007694 <UART_SetConfig+0x318>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d139      	bne.n	80076c6 <UART_SetConfig+0x34a>
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <UART_SetConfig+0x2fc>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800765c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007660:	d027      	beq.n	80076b2 <UART_SetConfig+0x336>
 8007662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007666:	d817      	bhi.n	8007698 <UART_SetConfig+0x31c>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01c      	beq.n	80076a6 <UART_SetConfig+0x32a>
 800766c:	e027      	b.n	80076be <UART_SetConfig+0x342>
 800766e:	bf00      	nop
 8007670:	efff69f3 	.word	0xefff69f3
 8007674:	40011000 	.word	0x40011000
 8007678:	40023800 	.word	0x40023800
 800767c:	40004400 	.word	0x40004400
 8007680:	40004800 	.word	0x40004800
 8007684:	40004c00 	.word	0x40004c00
 8007688:	40005000 	.word	0x40005000
 800768c:	40011400 	.word	0x40011400
 8007690:	40007800 	.word	0x40007800
 8007694:	40007c00 	.word	0x40007c00
 8007698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769c:	d006      	beq.n	80076ac <UART_SetConfig+0x330>
 800769e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076a2:	d009      	beq.n	80076b8 <UART_SetConfig+0x33c>
 80076a4:	e00b      	b.n	80076be <UART_SetConfig+0x342>
 80076a6:	2300      	movs	r3, #0
 80076a8:	77fb      	strb	r3, [r7, #31]
 80076aa:	e00e      	b.n	80076ca <UART_SetConfig+0x34e>
 80076ac:	2302      	movs	r3, #2
 80076ae:	77fb      	strb	r3, [r7, #31]
 80076b0:	e00b      	b.n	80076ca <UART_SetConfig+0x34e>
 80076b2:	2304      	movs	r3, #4
 80076b4:	77fb      	strb	r3, [r7, #31]
 80076b6:	e008      	b.n	80076ca <UART_SetConfig+0x34e>
 80076b8:	2308      	movs	r3, #8
 80076ba:	77fb      	strb	r3, [r7, #31]
 80076bc:	e005      	b.n	80076ca <UART_SetConfig+0x34e>
 80076be:	2310      	movs	r3, #16
 80076c0:	77fb      	strb	r3, [r7, #31]
 80076c2:	bf00      	nop
 80076c4:	e001      	b.n	80076ca <UART_SetConfig+0x34e>
 80076c6:	2310      	movs	r3, #16
 80076c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d2:	d17f      	bne.n	80077d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80076d4:	7ffb      	ldrb	r3, [r7, #31]
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d85c      	bhi.n	8007794 <UART_SetConfig+0x418>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <UART_SetConfig+0x364>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007705 	.word	0x08007705
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007745 	.word	0x08007745
 80076ec:	08007795 	.word	0x08007795
 80076f0:	0800775d 	.word	0x0800775d
 80076f4:	08007795 	.word	0x08007795
 80076f8:	08007795 	.word	0x08007795
 80076fc:	08007795 	.word	0x08007795
 8007700:	0800777d 	.word	0x0800777d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fd fd7a 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8007708:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	005a      	lsls	r2, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	085b      	lsrs	r3, r3, #1
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	fbb2 f3f3 	udiv	r3, r2, r3
 800771e:	b29b      	uxth	r3, r3
 8007720:	61bb      	str	r3, [r7, #24]
        break;
 8007722:	e03a      	b.n	800779a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007724:	f7fd fd7e 	bl	8005224 <HAL_RCC_GetPCLK2Freq>
 8007728:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	005a      	lsls	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	441a      	add	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	fbb2 f3f3 	udiv	r3, r2, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	61bb      	str	r3, [r7, #24]
        break;
 8007742:	e02a      	b.n	800779a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	085a      	lsrs	r2, r3, #1
 800774a:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <UART_SetConfig+0x54c>)
 800774c:	4413      	add	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6852      	ldr	r2, [r2, #4]
 8007752:	fbb3 f3f2 	udiv	r3, r3, r2
 8007756:	b29b      	uxth	r3, r3
 8007758:	61bb      	str	r3, [r7, #24]
        break;
 800775a:	e01e      	b.n	800779a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775c:	f7fd fc6a 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8007760:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	005a      	lsls	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	441a      	add	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	61bb      	str	r3, [r7, #24]
        break;
 800777a:	e00e      	b.n	800779a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	fbb2 f3f3 	udiv	r3, r2, r3
 800778e:	b29b      	uxth	r3, r3
 8007790:	61bb      	str	r3, [r7, #24]
        break;
 8007792:	e002      	b.n	800779a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
        break;
 8007798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b0f      	cmp	r3, #15
 800779e:	d916      	bls.n	80077ce <UART_SetConfig+0x452>
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a6:	d212      	bcs.n	80077ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f023 030f 	bic.w	r3, r3, #15
 80077b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	b29a      	uxth	r2, r3
 80077be:	897b      	ldrh	r3, [r7, #10]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	897a      	ldrh	r2, [r7, #10]
 80077ca:	60da      	str	r2, [r3, #12]
 80077cc:	e070      	b.n	80078b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
 80077d2:	e06d      	b.n	80078b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80077d4:	7ffb      	ldrb	r3, [r7, #31]
 80077d6:	2b08      	cmp	r3, #8
 80077d8:	d859      	bhi.n	800788e <UART_SetConfig+0x512>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UART_SetConfig+0x464>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007823 	.word	0x08007823
 80077e8:	08007841 	.word	0x08007841
 80077ec:	0800788f 	.word	0x0800788f
 80077f0:	08007859 	.word	0x08007859
 80077f4:	0800788f 	.word	0x0800788f
 80077f8:	0800788f 	.word	0x0800788f
 80077fc:	0800788f 	.word	0x0800788f
 8007800:	08007877 	.word	0x08007877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007804:	f7fd fcfa 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8007808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	085a      	lsrs	r2, r3, #1
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	441a      	add	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	b29b      	uxth	r3, r3
 800781e:	61bb      	str	r3, [r7, #24]
        break;
 8007820:	e038      	b.n	8007894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007822:	f7fd fcff 	bl	8005224 <HAL_RCC_GetPCLK2Freq>
 8007826:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	085a      	lsrs	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	b29b      	uxth	r3, r3
 800783c:	61bb      	str	r3, [r7, #24]
        break;
 800783e:	e029      	b.n	8007894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	085a      	lsrs	r2, r3, #1
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <UART_SetConfig+0x550>)
 8007848:	4413      	add	r3, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6852      	ldr	r2, [r2, #4]
 800784e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	61bb      	str	r3, [r7, #24]
        break;
 8007856:	e01d      	b.n	8007894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007858:	f7fd fbec 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 800785c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	085a      	lsrs	r2, r3, #1
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	441a      	add	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	b29b      	uxth	r3, r3
 8007872:	61bb      	str	r3, [r7, #24]
        break;
 8007874:	e00e      	b.n	8007894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	b29b      	uxth	r3, r3
 800788a:	61bb      	str	r3, [r7, #24]
        break;
 800788c:	e002      	b.n	8007894 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]
        break;
 8007892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d908      	bls.n	80078ac <UART_SetConfig+0x530>
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a0:	d204      	bcs.n	80078ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	e001      	b.n	80078b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	01e84800 	.word	0x01e84800
 80078cc:	00f42400 	.word	0x00f42400

080078d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01a      	beq.n	80079e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ce:	d10a      	bne.n	80079e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
  }
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a22:	f7fa fd35 	bl	8002490 <HAL_GetTick>
 8007a26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d10e      	bne.n	8007a54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f814 	bl	8007a72 <UART_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e00a      	b.n	8007a6a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a82:	e05d      	b.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d059      	beq.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8c:	f7fa fd00 	bl	8002490 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d11b      	bne.n	8007ada <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ab0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e042      	b.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d02b      	beq.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af6:	d123      	bne.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2220      	movs	r2, #32
 8007b32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e00f      	b.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d092      	beq.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7ff fbce 	bl	8007368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fbab 	bl	8007354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c08:	b084      	sub	sp, #16
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	f107 001c 	add.w	r0, r7, #28
 8007c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d120      	bne.n	8007c62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <USB_CoreInit+0xac>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d105      	bne.n	8007c56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa52 	bl	8008100 <USB_CoreReset>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]
 8007c60:	e010      	b.n	8007c84 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa46 	bl	8008100 <USB_CoreReset>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d10b      	bne.n	8007ca2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f043 0206 	orr.w	r2, r3, #6
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cae:	b004      	add	sp, #16
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	ffbdffbf 	.word	0xffbdffbf

08007cb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f023 0201 	bic.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d106      	bne.n	8007d06 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]
 8007d04:	e00b      	b.n	8007d1e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d106      	bne.n	8007d1a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]
 8007d18:	e001      	b.n	8007d1e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e003      	b.n	8007d26 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d1e:	2032      	movs	r0, #50	; 0x32
 8007d20:	f7fa fbc2 	bl	80024a8 <HAL_Delay>

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d30:	b084      	sub	sp, #16
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	e009      	b.n	8007d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3340      	adds	r3, #64	; 0x40
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b0e      	cmp	r3, #14
 8007d68:	d9f2      	bls.n	8007d50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11c      	bne.n	8007daa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d7e:	f043 0302 	orr.w	r3, r3, #2
 8007d82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	e005      	b.n	8007db6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	680b      	ldr	r3, [r1, #0]
 8007dd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d10c      	bne.n	8007df6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007de2:	2100      	movs	r1, #0
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f959 	bl	800809c <USB_SetDevSpeed>
 8007dea:	e018      	b.n	8007e1e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dec:	2101      	movs	r1, #1
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f954 	bl	800809c <USB_SetDevSpeed>
 8007df4:	e013      	b.n	8007e1e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d10c      	bne.n	8007e16 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f949 	bl	800809c <USB_SetDevSpeed>
 8007e0a:	e008      	b.n	8007e1e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f944 	bl	800809c <USB_SetDevSpeed>
 8007e14:	e003      	b.n	8007e1e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e16:	2103      	movs	r1, #3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f93f 	bl	800809c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e1e:	2110      	movs	r1, #16
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f8f3 	bl	800800c <USB_FlushTxFifo>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f911 	bl	8008058 <USB_FlushRxFifo>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e46:	461a      	mov	r2, r3
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e52:	461a      	mov	r2, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e64:	2300      	movs	r3, #0
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	e043      	b.n	8007ef2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e80:	d118      	bne.n	8007eb4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	461a      	mov	r2, r3
 8007e96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	e013      	b.n	8007ec6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e008      	b.n	8007ec6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d3b7      	bcc.n	8007e6a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	e043      	b.n	8007f88 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f16:	d118      	bne.n	8007f4a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e013      	b.n	8007f5c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	461a      	mov	r2, r3
 8007f42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e008      	b.n	8007f5c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	461a      	mov	r2, r3
 8007f58:	2300      	movs	r3, #0
 8007f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3301      	adds	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d3b7      	bcc.n	8007f00 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d105      	bne.n	8007fc4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f043 0210 	orr.w	r2, r3, #16
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699a      	ldr	r2, [r3, #24]
 8007fc8:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <USB_DevInit+0x2d4>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f043 0208 	orr.w	r2, r3, #8
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d105      	bne.n	8007ff4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <USB_DevInit+0x2d8>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008000:	b004      	add	sp, #16
 8008002:	4770      	bx	lr
 8008004:	803c3800 	.word	0x803c3800
 8008008:	40000004 	.word	0x40000004

0800800c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	019b      	lsls	r3, r3, #6
 800801e:	f043 0220 	orr.w	r2, r3, #32
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a09      	ldr	r2, [pc, #36]	; (8008054 <USB_FlushTxFifo+0x48>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e006      	b.n	8008046 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b20      	cmp	r3, #32
 8008042:	d0f0      	beq.n	8008026 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	00030d40 	.word	0x00030d40

08008058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2210      	movs	r2, #16
 8008068:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <USB_FlushRxFifo+0x40>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d901      	bls.n	800807c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b10      	cmp	r3, #16
 8008086:	d0f0      	beq.n	800806a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	00030d40 	.word	0x00030d40

0800809c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080bc:	4313      	orrs	r3, r2
 80080be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e8:	f043 0302 	orr.w	r3, r3, #2
 80080ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80080ee:	2003      	movs	r0, #3
 80080f0:	f7fa f9da 	bl	80024a8 <HAL_Delay>

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4a13      	ldr	r2, [pc, #76]	; (8008164 <USB_CoreReset+0x64>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d901      	bls.n	800811e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e01b      	b.n	8008156 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	daf2      	bge.n	800810c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f043 0201 	orr.w	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4a09      	ldr	r2, [pc, #36]	; (8008164 <USB_CoreReset+0x64>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d901      	bls.n	8008148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e006      	b.n	8008156 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b01      	cmp	r3, #1
 8008152:	d0f0      	beq.n	8008136 <USB_CoreReset+0x36>

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	00030d40 	.word	0x00030d40

08008168 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	ed93 7a06 	vldr	s14, [r3, #24]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	edd3 7a07 	vldr	s15, [r3, #28]
 800817e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	edd3 7a08 	vldr	s15, [r3, #32]
 8008188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	edd3 7a06 	vldr	s15, [r3, #24]
 8008198:	eeb1 7a67 	vneg.f32	s14, s15
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	edd3 7a08 	vldr	s15, [r3, #32]
 80081a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d006      	beq.n	80081cc <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	330c      	adds	r3, #12
 80081c2:	220c      	movs	r2, #12
 80081c4:	2100      	movs	r1, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f9a8 	bl	800851c <memset>
  }

}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b091      	sub	sp, #68	; 0x44
 80081d8:	af00      	add	r7, sp, #0
 80081da:	ed87 0a03 	vstr	s0, [r7, #12]
 80081de:	60b8      	str	r0, [r7, #8]
 80081e0:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 80081e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80081e6:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80084b8 <arm_sin_cos_f32+0x2e4>
 80081ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 80081f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80081f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fe:	d505      	bpl.n	800820c <arm_sin_cos_f32+0x38>
    {
        in = -in;
 8008200:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008204:	eef1 7a67 	vneg.f32	s15, s15
 8008208:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 800820c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008218:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800821c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008220:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8008224:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008228:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80084bc <arm_sin_cos_f32+0x2e8>
 800822c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008230:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 8008234:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823c:	ee17 3a90 	vmov	r3, s15
 8008240:	b29b      	uxth	r3, r3
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 8008248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800824a:	3380      	adds	r3, #128	; 0x80
 800824c:	b29b      	uxth	r3, r3
 800824e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008252:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 8008254:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008266:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 800826a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800826c:	4a94      	ldr	r2, [pc, #592]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 8008276:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008278:	3301      	adds	r3, #1
 800827a:	4a91      	ldr	r2, [pc, #580]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 8008284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008286:	4a8e      	ldr	r2, [pc, #568]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	edd3 7a00 	vldr	s15, [r3]
 8008290:	eef1 7a67 	vneg.f32	s15, s15
 8008294:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 8008298:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800829a:	3301      	adds	r3, #1
 800829c:	4a88      	ldr	r2, [pc, #544]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	edd3 7a00 	vldr	s15, [r3]
 80082a6:	eef1 7a67 	vneg.f32	s15, s15
 80082aa:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 80082ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80082b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80082be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082c2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80082c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80082ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082d2:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 80082d6:	4b7b      	ldr	r3, [pc, #492]	; (80084c4 <arm_sin_cos_f32+0x2f0>)
 80082d8:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 80082da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80082de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80082e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082e6:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 80082ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80082ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80082f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80082fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8008302:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800830e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008312:	edd7 7a07 	vldr	s15, [r7, #28]
 8008316:	ee27 7a27 	vmul.f32	s14, s14, s15
 800831a:	edd7 7a05 	vldr	s15, [r7, #20]
 800831e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8008322:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008326:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800832a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800832e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008332:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008336:	edd7 7a06 	vldr	s15, [r7, #24]
 800833a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800833e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 800834a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800834e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008356:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800835a:	edd7 7a06 	vldr	s15, [r7, #24]
 800835e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008366:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 800836a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800836e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008376:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800837a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 8008384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008386:	4a4e      	ldr	r2, [pc, #312]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 8008390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008392:	3301      	adds	r3, #1
 8008394:	4a4a      	ldr	r2, [pc, #296]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 800839e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083a0:	4a47      	ldr	r2, [pc, #284]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 80083aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083ac:	3301      	adds	r3, #1
 80083ae:	4a44      	ldr	r2, [pc, #272]	; (80084c0 <arm_sin_cos_f32+0x2ec>)
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 80083b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083cc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80083d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083dc:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 80083e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80083e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083ec:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 80083f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80083f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80083f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008404:	edd7 7a05 	vldr	s15, [r7, #20]
 8008408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800840c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008410:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 8008414:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008418:	edd7 7a07 	vldr	s15, [r7, #28]
 800841c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008420:	edd7 7a05 	vldr	s15, [r7, #20]
 8008424:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8008428:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800842c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008430:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8008434:	edd7 7a08 	vldr	s15, [r7, #32]
 8008438:	ee36 6a27 	vadd.f32	s12, s12, s15
 800843c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008440:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008444:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800844c:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 8008450:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008454:	edd7 7a07 	vldr	s15, [r7, #28]
 8008458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800845c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008460:	edd7 7a06 	vldr	s15, [r7, #24]
 8008464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800846c:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 8008470:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008474:	edd7 7a07 	vldr	s15, [r7, #28]
 8008478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800847c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 800848a:	edd7 7a03 	vldr	s15, [r7, #12]
 800848e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008496:	d400      	bmi.n	800849a <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 8008498:	e007      	b.n	80084aa <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	edd3 7a00 	vldr	s15, [r3]
 80084a0:	eef1 7a67 	vneg.f32	s15, s15
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	edc3 7a00 	vstr	s15, [r3]
}
 80084aa:	bf00      	nop
 80084ac:	3744      	adds	r7, #68	; 0x44
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	3b360b61 	.word	0x3b360b61
 80084bc:	44000000 	.word	0x44000000
 80084c0:	0800bfd8 	.word	0x0800bfd8
 80084c4:	3c490fdb 	.word	0x3c490fdb

080084c8 <__errno>:
 80084c8:	4b01      	ldr	r3, [pc, #4]	; (80084d0 <__errno+0x8>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	2000000c 	.word	0x2000000c

080084d4 <__libc_init_array>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	4e0d      	ldr	r6, [pc, #52]	; (800850c <__libc_init_array+0x38>)
 80084d8:	4c0d      	ldr	r4, [pc, #52]	; (8008510 <__libc_init_array+0x3c>)
 80084da:	1ba4      	subs	r4, r4, r6
 80084dc:	10a4      	asrs	r4, r4, #2
 80084de:	2500      	movs	r5, #0
 80084e0:	42a5      	cmp	r5, r4
 80084e2:	d109      	bne.n	80084f8 <__libc_init_array+0x24>
 80084e4:	4e0b      	ldr	r6, [pc, #44]	; (8008514 <__libc_init_array+0x40>)
 80084e6:	4c0c      	ldr	r4, [pc, #48]	; (8008518 <__libc_init_array+0x44>)
 80084e8:	f003 fd58 	bl	800bf9c <_init>
 80084ec:	1ba4      	subs	r4, r4, r6
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	2500      	movs	r5, #0
 80084f2:	42a5      	cmp	r5, r4
 80084f4:	d105      	bne.n	8008502 <__libc_init_array+0x2e>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084fc:	4798      	blx	r3
 80084fe:	3501      	adds	r5, #1
 8008500:	e7ee      	b.n	80084e0 <__libc_init_array+0xc>
 8008502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008506:	4798      	blx	r3
 8008508:	3501      	adds	r5, #1
 800850a:	e7f2      	b.n	80084f2 <__libc_init_array+0x1e>
 800850c:	0800ca98 	.word	0x0800ca98
 8008510:	0800ca98 	.word	0x0800ca98
 8008514:	0800ca98 	.word	0x0800ca98
 8008518:	0800ca9c 	.word	0x0800ca9c

0800851c <memset>:
 800851c:	4402      	add	r2, r0
 800851e:	4603      	mov	r3, r0
 8008520:	4293      	cmp	r3, r2
 8008522:	d100      	bne.n	8008526 <memset+0xa>
 8008524:	4770      	bx	lr
 8008526:	f803 1b01 	strb.w	r1, [r3], #1
 800852a:	e7f9      	b.n	8008520 <memset+0x4>

0800852c <__cvt>:
 800852c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	ec55 4b10 	vmov	r4, r5, d0
 8008534:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008536:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800853a:	2d00      	cmp	r5, #0
 800853c:	460e      	mov	r6, r1
 800853e:	4691      	mov	r9, r2
 8008540:	4619      	mov	r1, r3
 8008542:	bfb8      	it	lt
 8008544:	4622      	movlt	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	f027 0720 	bic.w	r7, r7, #32
 800854c:	bfbb      	ittet	lt
 800854e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008552:	461d      	movlt	r5, r3
 8008554:	2300      	movge	r3, #0
 8008556:	232d      	movlt	r3, #45	; 0x2d
 8008558:	bfb8      	it	lt
 800855a:	4614      	movlt	r4, r2
 800855c:	2f46      	cmp	r7, #70	; 0x46
 800855e:	700b      	strb	r3, [r1, #0]
 8008560:	d004      	beq.n	800856c <__cvt+0x40>
 8008562:	2f45      	cmp	r7, #69	; 0x45
 8008564:	d100      	bne.n	8008568 <__cvt+0x3c>
 8008566:	3601      	adds	r6, #1
 8008568:	2102      	movs	r1, #2
 800856a:	e000      	b.n	800856e <__cvt+0x42>
 800856c:	2103      	movs	r1, #3
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	ab02      	add	r3, sp, #8
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	4632      	mov	r2, r6
 8008578:	4653      	mov	r3, sl
 800857a:	ec45 4b10 	vmov	d0, r4, r5
 800857e:	f001 fd77 	bl	800a070 <_dtoa_r>
 8008582:	2f47      	cmp	r7, #71	; 0x47
 8008584:	4680      	mov	r8, r0
 8008586:	d102      	bne.n	800858e <__cvt+0x62>
 8008588:	f019 0f01 	tst.w	r9, #1
 800858c:	d026      	beq.n	80085dc <__cvt+0xb0>
 800858e:	2f46      	cmp	r7, #70	; 0x46
 8008590:	eb08 0906 	add.w	r9, r8, r6
 8008594:	d111      	bne.n	80085ba <__cvt+0x8e>
 8008596:	f898 3000 	ldrb.w	r3, [r8]
 800859a:	2b30      	cmp	r3, #48	; 0x30
 800859c:	d10a      	bne.n	80085b4 <__cvt+0x88>
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	4620      	mov	r0, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7f8 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 80085aa:	b918      	cbnz	r0, 80085b4 <__cvt+0x88>
 80085ac:	f1c6 0601 	rsb	r6, r6, #1
 80085b0:	f8ca 6000 	str.w	r6, [sl]
 80085b4:	f8da 3000 	ldr.w	r3, [sl]
 80085b8:	4499      	add	r9, r3
 80085ba:	2200      	movs	r2, #0
 80085bc:	2300      	movs	r3, #0
 80085be:	4620      	mov	r0, r4
 80085c0:	4629      	mov	r1, r5
 80085c2:	f7f8 faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80085c6:	b938      	cbnz	r0, 80085d8 <__cvt+0xac>
 80085c8:	2230      	movs	r2, #48	; 0x30
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	454b      	cmp	r3, r9
 80085ce:	d205      	bcs.n	80085dc <__cvt+0xb0>
 80085d0:	1c59      	adds	r1, r3, #1
 80085d2:	9103      	str	r1, [sp, #12]
 80085d4:	701a      	strb	r2, [r3, #0]
 80085d6:	e7f8      	b.n	80085ca <__cvt+0x9e>
 80085d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085e0:	eba3 0308 	sub.w	r3, r3, r8
 80085e4:	4640      	mov	r0, r8
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	b004      	add	sp, #16
 80085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080085ee <__exponent>:
 80085ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f0:	2900      	cmp	r1, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	bfba      	itte	lt
 80085f6:	4249      	neglt	r1, r1
 80085f8:	232d      	movlt	r3, #45	; 0x2d
 80085fa:	232b      	movge	r3, #43	; 0x2b
 80085fc:	2909      	cmp	r1, #9
 80085fe:	f804 2b02 	strb.w	r2, [r4], #2
 8008602:	7043      	strb	r3, [r0, #1]
 8008604:	dd20      	ble.n	8008648 <__exponent+0x5a>
 8008606:	f10d 0307 	add.w	r3, sp, #7
 800860a:	461f      	mov	r7, r3
 800860c:	260a      	movs	r6, #10
 800860e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008612:	fb06 1115 	mls	r1, r6, r5, r1
 8008616:	3130      	adds	r1, #48	; 0x30
 8008618:	2d09      	cmp	r5, #9
 800861a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800861e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008622:	4629      	mov	r1, r5
 8008624:	dc09      	bgt.n	800863a <__exponent+0x4c>
 8008626:	3130      	adds	r1, #48	; 0x30
 8008628:	3b02      	subs	r3, #2
 800862a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800862e:	42bb      	cmp	r3, r7
 8008630:	4622      	mov	r2, r4
 8008632:	d304      	bcc.n	800863e <__exponent+0x50>
 8008634:	1a10      	subs	r0, r2, r0
 8008636:	b003      	add	sp, #12
 8008638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863a:	4613      	mov	r3, r2
 800863c:	e7e7      	b.n	800860e <__exponent+0x20>
 800863e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008642:	f804 2b01 	strb.w	r2, [r4], #1
 8008646:	e7f2      	b.n	800862e <__exponent+0x40>
 8008648:	2330      	movs	r3, #48	; 0x30
 800864a:	4419      	add	r1, r3
 800864c:	7083      	strb	r3, [r0, #2]
 800864e:	1d02      	adds	r2, r0, #4
 8008650:	70c1      	strb	r1, [r0, #3]
 8008652:	e7ef      	b.n	8008634 <__exponent+0x46>

08008654 <_printf_float>:
 8008654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	b08d      	sub	sp, #52	; 0x34
 800865a:	460c      	mov	r4, r1
 800865c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008660:	4616      	mov	r6, r2
 8008662:	461f      	mov	r7, r3
 8008664:	4605      	mov	r5, r0
 8008666:	f002 fde7 	bl	800b238 <_localeconv_r>
 800866a:	6803      	ldr	r3, [r0, #0]
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	4618      	mov	r0, r3
 8008670:	f7f7 fdce 	bl	8000210 <strlen>
 8008674:	2300      	movs	r3, #0
 8008676:	930a      	str	r3, [sp, #40]	; 0x28
 8008678:	f8d8 3000 	ldr.w	r3, [r8]
 800867c:	9005      	str	r0, [sp, #20]
 800867e:	3307      	adds	r3, #7
 8008680:	f023 0307 	bic.w	r3, r3, #7
 8008684:	f103 0208 	add.w	r2, r3, #8
 8008688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800868c:	f8d4 b000 	ldr.w	fp, [r4]
 8008690:	f8c8 2000 	str.w	r2, [r8]
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800869c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086a4:	9307      	str	r3, [sp, #28]
 80086a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295
 80086ae:	4ba7      	ldr	r3, [pc, #668]	; (800894c <_printf_float+0x2f8>)
 80086b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086b4:	f7f8 fa5a 	bl	8000b6c <__aeabi_dcmpun>
 80086b8:	bb70      	cbnz	r0, 8008718 <_printf_float+0xc4>
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	4ba3      	ldr	r3, [pc, #652]	; (800894c <_printf_float+0x2f8>)
 80086c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c4:	f7f8 fa34 	bl	8000b30 <__aeabi_dcmple>
 80086c8:	bb30      	cbnz	r0, 8008718 <_printf_float+0xc4>
 80086ca:	2200      	movs	r2, #0
 80086cc:	2300      	movs	r3, #0
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f8 fa23 	bl	8000b1c <__aeabi_dcmplt>
 80086d6:	b110      	cbz	r0, 80086de <_printf_float+0x8a>
 80086d8:	232d      	movs	r3, #45	; 0x2d
 80086da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086de:	4a9c      	ldr	r2, [pc, #624]	; (8008950 <_printf_float+0x2fc>)
 80086e0:	4b9c      	ldr	r3, [pc, #624]	; (8008954 <_printf_float+0x300>)
 80086e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086e6:	bf8c      	ite	hi
 80086e8:	4690      	movhi	r8, r2
 80086ea:	4698      	movls	r8, r3
 80086ec:	2303      	movs	r3, #3
 80086ee:	f02b 0204 	bic.w	r2, fp, #4
 80086f2:	6123      	str	r3, [r4, #16]
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	f04f 0900 	mov.w	r9, #0
 80086fa:	9700      	str	r7, [sp, #0]
 80086fc:	4633      	mov	r3, r6
 80086fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008700:	4621      	mov	r1, r4
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f9e6 	bl	8008ad4 <_printf_common>
 8008708:	3001      	adds	r0, #1
 800870a:	f040 808d 	bne.w	8008828 <_printf_float+0x1d4>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	b00d      	add	sp, #52	; 0x34
 8008714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 fa24 	bl	8000b6c <__aeabi_dcmpun>
 8008724:	b110      	cbz	r0, 800872c <_printf_float+0xd8>
 8008726:	4a8c      	ldr	r2, [pc, #560]	; (8008958 <_printf_float+0x304>)
 8008728:	4b8c      	ldr	r3, [pc, #560]	; (800895c <_printf_float+0x308>)
 800872a:	e7da      	b.n	80086e2 <_printf_float+0x8e>
 800872c:	6861      	ldr	r1, [r4, #4]
 800872e:	1c4b      	adds	r3, r1, #1
 8008730:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008734:	a80a      	add	r0, sp, #40	; 0x28
 8008736:	d13e      	bne.n	80087b6 <_printf_float+0x162>
 8008738:	2306      	movs	r3, #6
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	2300      	movs	r3, #0
 800873e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008742:	ab09      	add	r3, sp, #36	; 0x24
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	ec49 8b10 	vmov	d0, r8, r9
 800874a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	f8cd a004 	str.w	sl, [sp, #4]
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4628      	mov	r0, r5
 8008758:	f7ff fee8 	bl	800852c <__cvt>
 800875c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008760:	2b47      	cmp	r3, #71	; 0x47
 8008762:	4680      	mov	r8, r0
 8008764:	d109      	bne.n	800877a <_printf_float+0x126>
 8008766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008768:	1cd8      	adds	r0, r3, #3
 800876a:	db02      	blt.n	8008772 <_printf_float+0x11e>
 800876c:	6862      	ldr	r2, [r4, #4]
 800876e:	4293      	cmp	r3, r2
 8008770:	dd47      	ble.n	8008802 <_printf_float+0x1ae>
 8008772:	f1aa 0a02 	sub.w	sl, sl, #2
 8008776:	fa5f fa8a 	uxtb.w	sl, sl
 800877a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800877e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008780:	d824      	bhi.n	80087cc <_printf_float+0x178>
 8008782:	3901      	subs	r1, #1
 8008784:	4652      	mov	r2, sl
 8008786:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800878a:	9109      	str	r1, [sp, #36]	; 0x24
 800878c:	f7ff ff2f 	bl	80085ee <__exponent>
 8008790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008792:	1813      	adds	r3, r2, r0
 8008794:	2a01      	cmp	r2, #1
 8008796:	4681      	mov	r9, r0
 8008798:	6123      	str	r3, [r4, #16]
 800879a:	dc02      	bgt.n	80087a2 <_printf_float+0x14e>
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	07d1      	lsls	r1, r2, #31
 80087a0:	d501      	bpl.n	80087a6 <_printf_float+0x152>
 80087a2:	3301      	adds	r3, #1
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0a5      	beq.n	80086fa <_printf_float+0xa6>
 80087ae:	232d      	movs	r3, #45	; 0x2d
 80087b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b4:	e7a1      	b.n	80086fa <_printf_float+0xa6>
 80087b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80087ba:	f000 8177 	beq.w	8008aac <_printf_float+0x458>
 80087be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80087c2:	d1bb      	bne.n	800873c <_printf_float+0xe8>
 80087c4:	2900      	cmp	r1, #0
 80087c6:	d1b9      	bne.n	800873c <_printf_float+0xe8>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7b6      	b.n	800873a <_printf_float+0xe6>
 80087cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80087d0:	d119      	bne.n	8008806 <_printf_float+0x1b2>
 80087d2:	2900      	cmp	r1, #0
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	dd0c      	ble.n	80087f2 <_printf_float+0x19e>
 80087d8:	6121      	str	r1, [r4, #16]
 80087da:	b913      	cbnz	r3, 80087e2 <_printf_float+0x18e>
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	07d2      	lsls	r2, r2, #31
 80087e0:	d502      	bpl.n	80087e8 <_printf_float+0x194>
 80087e2:	3301      	adds	r3, #1
 80087e4:	440b      	add	r3, r1
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80087ec:	f04f 0900 	mov.w	r9, #0
 80087f0:	e7d9      	b.n	80087a6 <_printf_float+0x152>
 80087f2:	b913      	cbnz	r3, 80087fa <_printf_float+0x1a6>
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	07d0      	lsls	r0, r2, #31
 80087f8:	d501      	bpl.n	80087fe <_printf_float+0x1aa>
 80087fa:	3302      	adds	r3, #2
 80087fc:	e7f3      	b.n	80087e6 <_printf_float+0x192>
 80087fe:	2301      	movs	r3, #1
 8008800:	e7f1      	b.n	80087e6 <_printf_float+0x192>
 8008802:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008806:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800880a:	4293      	cmp	r3, r2
 800880c:	db05      	blt.n	800881a <_printf_float+0x1c6>
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	07d1      	lsls	r1, r2, #31
 8008814:	d5e8      	bpl.n	80087e8 <_printf_float+0x194>
 8008816:	3301      	adds	r3, #1
 8008818:	e7e5      	b.n	80087e6 <_printf_float+0x192>
 800881a:	2b00      	cmp	r3, #0
 800881c:	bfd4      	ite	le
 800881e:	f1c3 0302 	rsble	r3, r3, #2
 8008822:	2301      	movgt	r3, #1
 8008824:	4413      	add	r3, r2
 8008826:	e7de      	b.n	80087e6 <_printf_float+0x192>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	055a      	lsls	r2, r3, #21
 800882c:	d407      	bmi.n	800883e <_printf_float+0x1ea>
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	4642      	mov	r2, r8
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	d12b      	bne.n	8008894 <_printf_float+0x240>
 800883c:	e767      	b.n	800870e <_printf_float+0xba>
 800883e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008842:	f240 80dc 	bls.w	80089fe <_printf_float+0x3aa>
 8008846:	2200      	movs	r2, #0
 8008848:	2300      	movs	r3, #0
 800884a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800884e:	f7f8 f95b 	bl	8000b08 <__aeabi_dcmpeq>
 8008852:	2800      	cmp	r0, #0
 8008854:	d033      	beq.n	80088be <_printf_float+0x26a>
 8008856:	2301      	movs	r3, #1
 8008858:	4a41      	ldr	r2, [pc, #260]	; (8008960 <_printf_float+0x30c>)
 800885a:	4631      	mov	r1, r6
 800885c:	4628      	mov	r0, r5
 800885e:	47b8      	blx	r7
 8008860:	3001      	adds	r0, #1
 8008862:	f43f af54 	beq.w	800870e <_printf_float+0xba>
 8008866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800886a:	429a      	cmp	r2, r3
 800886c:	db02      	blt.n	8008874 <_printf_float+0x220>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	07d8      	lsls	r0, r3, #31
 8008872:	d50f      	bpl.n	8008894 <_printf_float+0x240>
 8008874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f af45 	beq.w	800870e <_printf_float+0xba>
 8008884:	f04f 0800 	mov.w	r8, #0
 8008888:	f104 091a 	add.w	r9, r4, #26
 800888c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888e:	3b01      	subs	r3, #1
 8008890:	4543      	cmp	r3, r8
 8008892:	dc09      	bgt.n	80088a8 <_printf_float+0x254>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	079b      	lsls	r3, r3, #30
 8008898:	f100 8103 	bmi.w	8008aa2 <_printf_float+0x44e>
 800889c:	68e0      	ldr	r0, [r4, #12]
 800889e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a0:	4298      	cmp	r0, r3
 80088a2:	bfb8      	it	lt
 80088a4:	4618      	movlt	r0, r3
 80088a6:	e734      	b.n	8008712 <_printf_float+0xbe>
 80088a8:	2301      	movs	r3, #1
 80088aa:	464a      	mov	r2, r9
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	f43f af2b 	beq.w	800870e <_printf_float+0xba>
 80088b8:	f108 0801 	add.w	r8, r8, #1
 80088bc:	e7e6      	b.n	800888c <_printf_float+0x238>
 80088be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dc2b      	bgt.n	800891c <_printf_float+0x2c8>
 80088c4:	2301      	movs	r3, #1
 80088c6:	4a26      	ldr	r2, [pc, #152]	; (8008960 <_printf_float+0x30c>)
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b8      	blx	r7
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f af1d 	beq.w	800870e <_printf_float+0xba>
 80088d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d6:	b923      	cbnz	r3, 80088e2 <_printf_float+0x28e>
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	b913      	cbnz	r3, 80088e2 <_printf_float+0x28e>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d5d8      	bpl.n	8008894 <_printf_float+0x240>
 80088e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	f43f af0e 	beq.w	800870e <_printf_float+0xba>
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	f104 0a1a 	add.w	sl, r4, #26
 80088fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fc:	425b      	negs	r3, r3
 80088fe:	454b      	cmp	r3, r9
 8008900:	dc01      	bgt.n	8008906 <_printf_float+0x2b2>
 8008902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008904:	e794      	b.n	8008830 <_printf_float+0x1dc>
 8008906:	2301      	movs	r3, #1
 8008908:	4652      	mov	r2, sl
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f aefc 	beq.w	800870e <_printf_float+0xba>
 8008916:	f109 0901 	add.w	r9, r9, #1
 800891a:	e7ee      	b.n	80088fa <_printf_float+0x2a6>
 800891c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800891e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008920:	429a      	cmp	r2, r3
 8008922:	bfa8      	it	ge
 8008924:	461a      	movge	r2, r3
 8008926:	2a00      	cmp	r2, #0
 8008928:	4691      	mov	r9, r2
 800892a:	dd07      	ble.n	800893c <_printf_float+0x2e8>
 800892c:	4613      	mov	r3, r2
 800892e:	4631      	mov	r1, r6
 8008930:	4642      	mov	r2, r8
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f aee9 	beq.w	800870e <_printf_float+0xba>
 800893c:	f104 031a 	add.w	r3, r4, #26
 8008940:	f04f 0b00 	mov.w	fp, #0
 8008944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008948:	9306      	str	r3, [sp, #24]
 800894a:	e015      	b.n	8008978 <_printf_float+0x324>
 800894c:	7fefffff 	.word	0x7fefffff
 8008950:	0800c7e0 	.word	0x0800c7e0
 8008954:	0800c7dc 	.word	0x0800c7dc
 8008958:	0800c7e8 	.word	0x0800c7e8
 800895c:	0800c7e4 	.word	0x0800c7e4
 8008960:	0800c7ec 	.word	0x0800c7ec
 8008964:	2301      	movs	r3, #1
 8008966:	9a06      	ldr	r2, [sp, #24]
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f aecd 	beq.w	800870e <_printf_float+0xba>
 8008974:	f10b 0b01 	add.w	fp, fp, #1
 8008978:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800897c:	ebaa 0309 	sub.w	r3, sl, r9
 8008980:	455b      	cmp	r3, fp
 8008982:	dcef      	bgt.n	8008964 <_printf_float+0x310>
 8008984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008988:	429a      	cmp	r2, r3
 800898a:	44d0      	add	r8, sl
 800898c:	db15      	blt.n	80089ba <_printf_float+0x366>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	07da      	lsls	r2, r3, #31
 8008992:	d412      	bmi.n	80089ba <_printf_float+0x366>
 8008994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008998:	eba3 020a 	sub.w	r2, r3, sl
 800899c:	eba3 0a01 	sub.w	sl, r3, r1
 80089a0:	4592      	cmp	sl, r2
 80089a2:	bfa8      	it	ge
 80089a4:	4692      	movge	sl, r2
 80089a6:	f1ba 0f00 	cmp.w	sl, #0
 80089aa:	dc0e      	bgt.n	80089ca <_printf_float+0x376>
 80089ac:	f04f 0800 	mov.w	r8, #0
 80089b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089b4:	f104 091a 	add.w	r9, r4, #26
 80089b8:	e019      	b.n	80089ee <_printf_float+0x39a>
 80089ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	d1e5      	bne.n	8008994 <_printf_float+0x340>
 80089c8:	e6a1      	b.n	800870e <_printf_float+0xba>
 80089ca:	4653      	mov	r3, sl
 80089cc:	4642      	mov	r2, r8
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	d1e9      	bne.n	80089ac <_printf_float+0x358>
 80089d8:	e699      	b.n	800870e <_printf_float+0xba>
 80089da:	2301      	movs	r3, #1
 80089dc:	464a      	mov	r2, r9
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f ae92 	beq.w	800870e <_printf_float+0xba>
 80089ea:	f108 0801 	add.w	r8, r8, #1
 80089ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	eba3 030a 	sub.w	r3, r3, sl
 80089f8:	4543      	cmp	r3, r8
 80089fa:	dcee      	bgt.n	80089da <_printf_float+0x386>
 80089fc:	e74a      	b.n	8008894 <_printf_float+0x240>
 80089fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a00:	2a01      	cmp	r2, #1
 8008a02:	dc01      	bgt.n	8008a08 <_printf_float+0x3b4>
 8008a04:	07db      	lsls	r3, r3, #31
 8008a06:	d53a      	bpl.n	8008a7e <_printf_float+0x42a>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4642      	mov	r2, r8
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f ae7b 	beq.w	800870e <_printf_float+0xba>
 8008a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f108 0801 	add.w	r8, r8, #1
 8008a28:	f43f ae71 	beq.w	800870e <_printf_float+0xba>
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f103 3aff 	add.w	sl, r3, #4294967295
 8008a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f7f8 f865 	bl	8000b08 <__aeabi_dcmpeq>
 8008a3e:	b9c8      	cbnz	r0, 8008a74 <_printf_float+0x420>
 8008a40:	4653      	mov	r3, sl
 8008a42:	4642      	mov	r2, r8
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d10e      	bne.n	8008a6c <_printf_float+0x418>
 8008a4e:	e65e      	b.n	800870e <_printf_float+0xba>
 8008a50:	2301      	movs	r3, #1
 8008a52:	4652      	mov	r2, sl
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f ae57 	beq.w	800870e <_printf_float+0xba>
 8008a60:	f108 0801 	add.w	r8, r8, #1
 8008a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4543      	cmp	r3, r8
 8008a6a:	dcf1      	bgt.n	8008a50 <_printf_float+0x3fc>
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a72:	e6de      	b.n	8008832 <_printf_float+0x1de>
 8008a74:	f04f 0800 	mov.w	r8, #0
 8008a78:	f104 0a1a 	add.w	sl, r4, #26
 8008a7c:	e7f2      	b.n	8008a64 <_printf_float+0x410>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7df      	b.n	8008a42 <_printf_float+0x3ee>
 8008a82:	2301      	movs	r3, #1
 8008a84:	464a      	mov	r2, r9
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f ae3e 	beq.w	800870e <_printf_float+0xba>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	4543      	cmp	r3, r8
 8008a9e:	dcf0      	bgt.n	8008a82 <_printf_float+0x42e>
 8008aa0:	e6fc      	b.n	800889c <_printf_float+0x248>
 8008aa2:	f04f 0800 	mov.w	r8, #0
 8008aa6:	f104 0919 	add.w	r9, r4, #25
 8008aaa:	e7f4      	b.n	8008a96 <_printf_float+0x442>
 8008aac:	2900      	cmp	r1, #0
 8008aae:	f43f ae8b 	beq.w	80087c8 <_printf_float+0x174>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ab8:	ab09      	add	r3, sp, #36	; 0x24
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	ec49 8b10 	vmov	d0, r8, r9
 8008ac0:	6022      	str	r2, [r4, #0]
 8008ac2:	f8cd a004 	str.w	sl, [sp, #4]
 8008ac6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7ff fd2e 	bl	800852c <__cvt>
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	e648      	b.n	8008766 <_printf_float+0x112>

08008ad4 <_printf_common>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	4691      	mov	r9, r2
 8008ada:	461f      	mov	r7, r3
 8008adc:	688a      	ldr	r2, [r1, #8]
 8008ade:	690b      	ldr	r3, [r1, #16]
 8008ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	bfb8      	it	lt
 8008ae8:	4613      	movlt	r3, r2
 8008aea:	f8c9 3000 	str.w	r3, [r9]
 8008aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af2:	4606      	mov	r6, r0
 8008af4:	460c      	mov	r4, r1
 8008af6:	b112      	cbz	r2, 8008afe <_printf_common+0x2a>
 8008af8:	3301      	adds	r3, #1
 8008afa:	f8c9 3000 	str.w	r3, [r9]
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	0699      	lsls	r1, r3, #26
 8008b02:	bf42      	ittt	mi
 8008b04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b08:	3302      	addmi	r3, #2
 8008b0a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b0e:	6825      	ldr	r5, [r4, #0]
 8008b10:	f015 0506 	ands.w	r5, r5, #6
 8008b14:	d107      	bne.n	8008b26 <_printf_common+0x52>
 8008b16:	f104 0a19 	add.w	sl, r4, #25
 8008b1a:	68e3      	ldr	r3, [r4, #12]
 8008b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	42ab      	cmp	r3, r5
 8008b24:	dc28      	bgt.n	8008b78 <_printf_common+0xa4>
 8008b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	3300      	adds	r3, #0
 8008b2e:	bf18      	it	ne
 8008b30:	2301      	movne	r3, #1
 8008b32:	0692      	lsls	r2, r2, #26
 8008b34:	d42d      	bmi.n	8008b92 <_printf_common+0xbe>
 8008b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	47c0      	blx	r8
 8008b40:	3001      	adds	r0, #1
 8008b42:	d020      	beq.n	8008b86 <_printf_common+0xb2>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	68e5      	ldr	r5, [r4, #12]
 8008b48:	f8d9 2000 	ldr.w	r2, [r9]
 8008b4c:	f003 0306 	and.w	r3, r3, #6
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	bf08      	it	eq
 8008b54:	1aad      	subeq	r5, r5, r2
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	6922      	ldr	r2, [r4, #16]
 8008b5a:	bf0c      	ite	eq
 8008b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b60:	2500      	movne	r5, #0
 8008b62:	4293      	cmp	r3, r2
 8008b64:	bfc4      	itt	gt
 8008b66:	1a9b      	subgt	r3, r3, r2
 8008b68:	18ed      	addgt	r5, r5, r3
 8008b6a:	f04f 0900 	mov.w	r9, #0
 8008b6e:	341a      	adds	r4, #26
 8008b70:	454d      	cmp	r5, r9
 8008b72:	d11a      	bne.n	8008baa <_printf_common+0xd6>
 8008b74:	2000      	movs	r0, #0
 8008b76:	e008      	b.n	8008b8a <_printf_common+0xb6>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4652      	mov	r2, sl
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	4630      	mov	r0, r6
 8008b80:	47c0      	blx	r8
 8008b82:	3001      	adds	r0, #1
 8008b84:	d103      	bne.n	8008b8e <_printf_common+0xba>
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	3501      	adds	r5, #1
 8008b90:	e7c3      	b.n	8008b1a <_printf_common+0x46>
 8008b92:	18e1      	adds	r1, r4, r3
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	2030      	movs	r0, #48	; 0x30
 8008b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b9c:	4422      	add	r2, r4
 8008b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	e7c5      	b.n	8008b36 <_printf_common+0x62>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4622      	mov	r2, r4
 8008bae:	4639      	mov	r1, r7
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d0e6      	beq.n	8008b86 <_printf_common+0xb2>
 8008bb8:	f109 0901 	add.w	r9, r9, #1
 8008bbc:	e7d8      	b.n	8008b70 <_printf_common+0x9c>
	...

08008bc0 <_printf_i>:
 8008bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008bc8:	460c      	mov	r4, r1
 8008bca:	7e09      	ldrb	r1, [r1, #24]
 8008bcc:	b085      	sub	sp, #20
 8008bce:	296e      	cmp	r1, #110	; 0x6e
 8008bd0:	4617      	mov	r7, r2
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	4698      	mov	r8, r3
 8008bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd8:	f000 80b3 	beq.w	8008d42 <_printf_i+0x182>
 8008bdc:	d822      	bhi.n	8008c24 <_printf_i+0x64>
 8008bde:	2963      	cmp	r1, #99	; 0x63
 8008be0:	d036      	beq.n	8008c50 <_printf_i+0x90>
 8008be2:	d80a      	bhi.n	8008bfa <_printf_i+0x3a>
 8008be4:	2900      	cmp	r1, #0
 8008be6:	f000 80b9 	beq.w	8008d5c <_printf_i+0x19c>
 8008bea:	2958      	cmp	r1, #88	; 0x58
 8008bec:	f000 8083 	beq.w	8008cf6 <_printf_i+0x136>
 8008bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bf8:	e032      	b.n	8008c60 <_printf_i+0xa0>
 8008bfa:	2964      	cmp	r1, #100	; 0x64
 8008bfc:	d001      	beq.n	8008c02 <_printf_i+0x42>
 8008bfe:	2969      	cmp	r1, #105	; 0x69
 8008c00:	d1f6      	bne.n	8008bf0 <_printf_i+0x30>
 8008c02:	6820      	ldr	r0, [r4, #0]
 8008c04:	6813      	ldr	r3, [r2, #0]
 8008c06:	0605      	lsls	r5, r0, #24
 8008c08:	f103 0104 	add.w	r1, r3, #4
 8008c0c:	d52a      	bpl.n	8008c64 <_printf_i+0xa4>
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da03      	bge.n	8008c1e <_printf_i+0x5e>
 8008c16:	222d      	movs	r2, #45	; 0x2d
 8008c18:	425b      	negs	r3, r3
 8008c1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c1e:	486f      	ldr	r0, [pc, #444]	; (8008ddc <_printf_i+0x21c>)
 8008c20:	220a      	movs	r2, #10
 8008c22:	e039      	b.n	8008c98 <_printf_i+0xd8>
 8008c24:	2973      	cmp	r1, #115	; 0x73
 8008c26:	f000 809d 	beq.w	8008d64 <_printf_i+0x1a4>
 8008c2a:	d808      	bhi.n	8008c3e <_printf_i+0x7e>
 8008c2c:	296f      	cmp	r1, #111	; 0x6f
 8008c2e:	d020      	beq.n	8008c72 <_printf_i+0xb2>
 8008c30:	2970      	cmp	r1, #112	; 0x70
 8008c32:	d1dd      	bne.n	8008bf0 <_printf_i+0x30>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	f043 0320 	orr.w	r3, r3, #32
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	e003      	b.n	8008c46 <_printf_i+0x86>
 8008c3e:	2975      	cmp	r1, #117	; 0x75
 8008c40:	d017      	beq.n	8008c72 <_printf_i+0xb2>
 8008c42:	2978      	cmp	r1, #120	; 0x78
 8008c44:	d1d4      	bne.n	8008bf0 <_printf_i+0x30>
 8008c46:	2378      	movs	r3, #120	; 0x78
 8008c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c4c:	4864      	ldr	r0, [pc, #400]	; (8008de0 <_printf_i+0x220>)
 8008c4e:	e055      	b.n	8008cfc <_printf_i+0x13c>
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	1d19      	adds	r1, r3, #4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6011      	str	r1, [r2, #0]
 8008c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c60:	2301      	movs	r3, #1
 8008c62:	e08c      	b.n	8008d7e <_printf_i+0x1be>
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6011      	str	r1, [r2, #0]
 8008c68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c6c:	bf18      	it	ne
 8008c6e:	b21b      	sxthne	r3, r3
 8008c70:	e7cf      	b.n	8008c12 <_printf_i+0x52>
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	6825      	ldr	r5, [r4, #0]
 8008c76:	1d18      	adds	r0, r3, #4
 8008c78:	6010      	str	r0, [r2, #0]
 8008c7a:	0628      	lsls	r0, r5, #24
 8008c7c:	d501      	bpl.n	8008c82 <_printf_i+0xc2>
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	e002      	b.n	8008c88 <_printf_i+0xc8>
 8008c82:	0668      	lsls	r0, r5, #25
 8008c84:	d5fb      	bpl.n	8008c7e <_printf_i+0xbe>
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	4854      	ldr	r0, [pc, #336]	; (8008ddc <_printf_i+0x21c>)
 8008c8a:	296f      	cmp	r1, #111	; 0x6f
 8008c8c:	bf14      	ite	ne
 8008c8e:	220a      	movne	r2, #10
 8008c90:	2208      	moveq	r2, #8
 8008c92:	2100      	movs	r1, #0
 8008c94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c98:	6865      	ldr	r5, [r4, #4]
 8008c9a:	60a5      	str	r5, [r4, #8]
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	f2c0 8095 	blt.w	8008dcc <_printf_i+0x20c>
 8008ca2:	6821      	ldr	r1, [r4, #0]
 8008ca4:	f021 0104 	bic.w	r1, r1, #4
 8008ca8:	6021      	str	r1, [r4, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d13d      	bne.n	8008d2a <_printf_i+0x16a>
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f040 808e 	bne.w	8008dd0 <_printf_i+0x210>
 8008cb4:	4665      	mov	r5, ip
 8008cb6:	2a08      	cmp	r2, #8
 8008cb8:	d10b      	bne.n	8008cd2 <_printf_i+0x112>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	07db      	lsls	r3, r3, #31
 8008cbe:	d508      	bpl.n	8008cd2 <_printf_i+0x112>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	6862      	ldr	r2, [r4, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	bfde      	ittt	le
 8008cc8:	2330      	movle	r3, #48	; 0x30
 8008cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd2:	ebac 0305 	sub.w	r3, ip, r5
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	f8cd 8000 	str.w	r8, [sp]
 8008cdc:	463b      	mov	r3, r7
 8008cde:	aa03      	add	r2, sp, #12
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff fef6 	bl	8008ad4 <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d14d      	bne.n	8008d88 <_printf_i+0x1c8>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	b005      	add	sp, #20
 8008cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	4839      	ldr	r0, [pc, #228]	; (8008ddc <_printf_i+0x21c>)
 8008cf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cfc:	6813      	ldr	r3, [r2, #0]
 8008cfe:	6821      	ldr	r1, [r4, #0]
 8008d00:	1d1d      	adds	r5, r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6015      	str	r5, [r2, #0]
 8008d06:	060a      	lsls	r2, r1, #24
 8008d08:	d50b      	bpl.n	8008d22 <_printf_i+0x162>
 8008d0a:	07ca      	lsls	r2, r1, #31
 8008d0c:	bf44      	itt	mi
 8008d0e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d12:	6021      	strmi	r1, [r4, #0]
 8008d14:	b91b      	cbnz	r3, 8008d1e <_printf_i+0x15e>
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	f022 0220 	bic.w	r2, r2, #32
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	e7b7      	b.n	8008c92 <_printf_i+0xd2>
 8008d22:	064d      	lsls	r5, r1, #25
 8008d24:	bf48      	it	mi
 8008d26:	b29b      	uxthmi	r3, r3
 8008d28:	e7ef      	b.n	8008d0a <_printf_i+0x14a>
 8008d2a:	4665      	mov	r5, ip
 8008d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d30:	fb02 3311 	mls	r3, r2, r1, r3
 8008d34:	5cc3      	ldrb	r3, [r0, r3]
 8008d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d1f5      	bne.n	8008d2c <_printf_i+0x16c>
 8008d40:	e7b9      	b.n	8008cb6 <_printf_i+0xf6>
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	6825      	ldr	r5, [r4, #0]
 8008d46:	6961      	ldr	r1, [r4, #20]
 8008d48:	1d18      	adds	r0, r3, #4
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	0628      	lsls	r0, r5, #24
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	d501      	bpl.n	8008d56 <_printf_i+0x196>
 8008d52:	6019      	str	r1, [r3, #0]
 8008d54:	e002      	b.n	8008d5c <_printf_i+0x19c>
 8008d56:	066a      	lsls	r2, r5, #25
 8008d58:	d5fb      	bpl.n	8008d52 <_printf_i+0x192>
 8008d5a:	8019      	strh	r1, [r3, #0]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	4665      	mov	r5, ip
 8008d62:	e7b9      	b.n	8008cd8 <_printf_i+0x118>
 8008d64:	6813      	ldr	r3, [r2, #0]
 8008d66:	1d19      	adds	r1, r3, #4
 8008d68:	6011      	str	r1, [r2, #0]
 8008d6a:	681d      	ldr	r5, [r3, #0]
 8008d6c:	6862      	ldr	r2, [r4, #4]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7f7 fa55 	bl	8000220 <memchr>
 8008d76:	b108      	cbz	r0, 8008d7c <_printf_i+0x1bc>
 8008d78:	1b40      	subs	r0, r0, r5
 8008d7a:	6060      	str	r0, [r4, #4]
 8008d7c:	6863      	ldr	r3, [r4, #4]
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	2300      	movs	r3, #0
 8008d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d86:	e7a7      	b.n	8008cd8 <_printf_i+0x118>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4630      	mov	r0, r6
 8008d90:	47c0      	blx	r8
 8008d92:	3001      	adds	r0, #1
 8008d94:	d0aa      	beq.n	8008cec <_printf_i+0x12c>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	079b      	lsls	r3, r3, #30
 8008d9a:	d413      	bmi.n	8008dc4 <_printf_i+0x204>
 8008d9c:	68e0      	ldr	r0, [r4, #12]
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	4298      	cmp	r0, r3
 8008da2:	bfb8      	it	lt
 8008da4:	4618      	movlt	r0, r3
 8008da6:	e7a3      	b.n	8008cf0 <_printf_i+0x130>
 8008da8:	2301      	movs	r3, #1
 8008daa:	464a      	mov	r2, r9
 8008dac:	4639      	mov	r1, r7
 8008dae:	4630      	mov	r0, r6
 8008db0:	47c0      	blx	r8
 8008db2:	3001      	adds	r0, #1
 8008db4:	d09a      	beq.n	8008cec <_printf_i+0x12c>
 8008db6:	3501      	adds	r5, #1
 8008db8:	68e3      	ldr	r3, [r4, #12]
 8008dba:	9a03      	ldr	r2, [sp, #12]
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	42ab      	cmp	r3, r5
 8008dc0:	dcf2      	bgt.n	8008da8 <_printf_i+0x1e8>
 8008dc2:	e7eb      	b.n	8008d9c <_printf_i+0x1dc>
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	f104 0919 	add.w	r9, r4, #25
 8008dca:	e7f5      	b.n	8008db8 <_printf_i+0x1f8>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1ac      	bne.n	8008d2a <_printf_i+0x16a>
 8008dd0:	7803      	ldrb	r3, [r0, #0]
 8008dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dda:	e76c      	b.n	8008cb6 <_printf_i+0xf6>
 8008ddc:	0800c7ee 	.word	0x0800c7ee
 8008de0:	0800c7ff 	.word	0x0800c7ff

08008de4 <_scanf_float>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	469a      	mov	sl, r3
 8008dea:	688b      	ldr	r3, [r1, #8]
 8008dec:	4616      	mov	r6, r2
 8008dee:	1e5a      	subs	r2, r3, #1
 8008df0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008df4:	b087      	sub	sp, #28
 8008df6:	bf83      	ittte	hi
 8008df8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008dfc:	189b      	addhi	r3, r3, r2
 8008dfe:	9301      	strhi	r3, [sp, #4]
 8008e00:	2300      	movls	r3, #0
 8008e02:	bf86      	itte	hi
 8008e04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e08:	608b      	strhi	r3, [r1, #8]
 8008e0a:	9301      	strls	r3, [sp, #4]
 8008e0c:	680b      	ldr	r3, [r1, #0]
 8008e0e:	4688      	mov	r8, r1
 8008e10:	f04f 0b00 	mov.w	fp, #0
 8008e14:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e18:	f848 3b1c 	str.w	r3, [r8], #28
 8008e1c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008e20:	4607      	mov	r7, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	4645      	mov	r5, r8
 8008e26:	465a      	mov	r2, fp
 8008e28:	46d9      	mov	r9, fp
 8008e2a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e2e:	68a1      	ldr	r1, [r4, #8]
 8008e30:	b181      	cbz	r1, 8008e54 <_scanf_float+0x70>
 8008e32:	6833      	ldr	r3, [r6, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b49      	cmp	r3, #73	; 0x49
 8008e38:	d071      	beq.n	8008f1e <_scanf_float+0x13a>
 8008e3a:	d84d      	bhi.n	8008ed8 <_scanf_float+0xf4>
 8008e3c:	2b39      	cmp	r3, #57	; 0x39
 8008e3e:	d840      	bhi.n	8008ec2 <_scanf_float+0xde>
 8008e40:	2b31      	cmp	r3, #49	; 0x31
 8008e42:	f080 8088 	bcs.w	8008f56 <_scanf_float+0x172>
 8008e46:	2b2d      	cmp	r3, #45	; 0x2d
 8008e48:	f000 8090 	beq.w	8008f6c <_scanf_float+0x188>
 8008e4c:	d815      	bhi.n	8008e7a <_scanf_float+0x96>
 8008e4e:	2b2b      	cmp	r3, #43	; 0x2b
 8008e50:	f000 808c 	beq.w	8008f6c <_scanf_float+0x188>
 8008e54:	f1b9 0f00 	cmp.w	r9, #0
 8008e58:	d003      	beq.n	8008e62 <_scanf_float+0x7e>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	3a01      	subs	r2, #1
 8008e64:	2a01      	cmp	r2, #1
 8008e66:	f200 80ea 	bhi.w	800903e <_scanf_float+0x25a>
 8008e6a:	4545      	cmp	r5, r8
 8008e6c:	f200 80dc 	bhi.w	8009028 <_scanf_float+0x244>
 8008e70:	2601      	movs	r6, #1
 8008e72:	4630      	mov	r0, r6
 8008e74:	b007      	add	sp, #28
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e7c:	f000 809f 	beq.w	8008fbe <_scanf_float+0x1da>
 8008e80:	2b30      	cmp	r3, #48	; 0x30
 8008e82:	d1e7      	bne.n	8008e54 <_scanf_float+0x70>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008e8a:	d064      	beq.n	8008f56 <_scanf_float+0x172>
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008e92:	6020      	str	r0, [r4, #0]
 8008e94:	f109 0901 	add.w	r9, r9, #1
 8008e98:	b11b      	cbz	r3, 8008ea2 <_scanf_float+0xbe>
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	3101      	adds	r1, #1
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	60a1      	str	r1, [r4, #8]
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	60a3      	str	r3, [r4, #8]
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	6873      	ldr	r3, [r6, #4]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	6073      	str	r3, [r6, #4]
 8008eb6:	f340 80ac 	ble.w	8009012 <_scanf_float+0x22e>
 8008eba:	6833      	ldr	r3, [r6, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	e7b5      	b.n	8008e2e <_scanf_float+0x4a>
 8008ec2:	2b45      	cmp	r3, #69	; 0x45
 8008ec4:	f000 8085 	beq.w	8008fd2 <_scanf_float+0x1ee>
 8008ec8:	2b46      	cmp	r3, #70	; 0x46
 8008eca:	d06a      	beq.n	8008fa2 <_scanf_float+0x1be>
 8008ecc:	2b41      	cmp	r3, #65	; 0x41
 8008ece:	d1c1      	bne.n	8008e54 <_scanf_float+0x70>
 8008ed0:	2a01      	cmp	r2, #1
 8008ed2:	d1bf      	bne.n	8008e54 <_scanf_float+0x70>
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	e046      	b.n	8008f66 <_scanf_float+0x182>
 8008ed8:	2b65      	cmp	r3, #101	; 0x65
 8008eda:	d07a      	beq.n	8008fd2 <_scanf_float+0x1ee>
 8008edc:	d818      	bhi.n	8008f10 <_scanf_float+0x12c>
 8008ede:	2b54      	cmp	r3, #84	; 0x54
 8008ee0:	d066      	beq.n	8008fb0 <_scanf_float+0x1cc>
 8008ee2:	d811      	bhi.n	8008f08 <_scanf_float+0x124>
 8008ee4:	2b4e      	cmp	r3, #78	; 0x4e
 8008ee6:	d1b5      	bne.n	8008e54 <_scanf_float+0x70>
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d146      	bne.n	8008f7a <_scanf_float+0x196>
 8008eec:	f1b9 0f00 	cmp.w	r9, #0
 8008ef0:	d145      	bne.n	8008f7e <_scanf_float+0x19a>
 8008ef2:	6821      	ldr	r1, [r4, #0]
 8008ef4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008ef8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008efc:	d13f      	bne.n	8008f7e <_scanf_float+0x19a>
 8008efe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008f02:	6021      	str	r1, [r4, #0]
 8008f04:	2201      	movs	r2, #1
 8008f06:	e02e      	b.n	8008f66 <_scanf_float+0x182>
 8008f08:	2b59      	cmp	r3, #89	; 0x59
 8008f0a:	d01e      	beq.n	8008f4a <_scanf_float+0x166>
 8008f0c:	2b61      	cmp	r3, #97	; 0x61
 8008f0e:	e7de      	b.n	8008ece <_scanf_float+0xea>
 8008f10:	2b6e      	cmp	r3, #110	; 0x6e
 8008f12:	d0e9      	beq.n	8008ee8 <_scanf_float+0x104>
 8008f14:	d815      	bhi.n	8008f42 <_scanf_float+0x15e>
 8008f16:	2b66      	cmp	r3, #102	; 0x66
 8008f18:	d043      	beq.n	8008fa2 <_scanf_float+0x1be>
 8008f1a:	2b69      	cmp	r3, #105	; 0x69
 8008f1c:	d19a      	bne.n	8008e54 <_scanf_float+0x70>
 8008f1e:	f1bb 0f00 	cmp.w	fp, #0
 8008f22:	d138      	bne.n	8008f96 <_scanf_float+0x1b2>
 8008f24:	f1b9 0f00 	cmp.w	r9, #0
 8008f28:	d197      	bne.n	8008e5a <_scanf_float+0x76>
 8008f2a:	6821      	ldr	r1, [r4, #0]
 8008f2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008f30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008f34:	d195      	bne.n	8008e62 <_scanf_float+0x7e>
 8008f36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008f3a:	6021      	str	r1, [r4, #0]
 8008f3c:	f04f 0b01 	mov.w	fp, #1
 8008f40:	e011      	b.n	8008f66 <_scanf_float+0x182>
 8008f42:	2b74      	cmp	r3, #116	; 0x74
 8008f44:	d034      	beq.n	8008fb0 <_scanf_float+0x1cc>
 8008f46:	2b79      	cmp	r3, #121	; 0x79
 8008f48:	d184      	bne.n	8008e54 <_scanf_float+0x70>
 8008f4a:	f1bb 0f07 	cmp.w	fp, #7
 8008f4e:	d181      	bne.n	8008e54 <_scanf_float+0x70>
 8008f50:	f04f 0b08 	mov.w	fp, #8
 8008f54:	e007      	b.n	8008f66 <_scanf_float+0x182>
 8008f56:	eb12 0f0b 	cmn.w	r2, fp
 8008f5a:	f47f af7b 	bne.w	8008e54 <_scanf_float+0x70>
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008f64:	6021      	str	r1, [r4, #0]
 8008f66:	702b      	strb	r3, [r5, #0]
 8008f68:	3501      	adds	r5, #1
 8008f6a:	e79a      	b.n	8008ea2 <_scanf_float+0xbe>
 8008f6c:	6821      	ldr	r1, [r4, #0]
 8008f6e:	0608      	lsls	r0, r1, #24
 8008f70:	f57f af70 	bpl.w	8008e54 <_scanf_float+0x70>
 8008f74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f78:	e7f4      	b.n	8008f64 <_scanf_float+0x180>
 8008f7a:	2a02      	cmp	r2, #2
 8008f7c:	d047      	beq.n	800900e <_scanf_float+0x22a>
 8008f7e:	f1bb 0f01 	cmp.w	fp, #1
 8008f82:	d003      	beq.n	8008f8c <_scanf_float+0x1a8>
 8008f84:	f1bb 0f04 	cmp.w	fp, #4
 8008f88:	f47f af64 	bne.w	8008e54 <_scanf_float+0x70>
 8008f8c:	f10b 0b01 	add.w	fp, fp, #1
 8008f90:	fa5f fb8b 	uxtb.w	fp, fp
 8008f94:	e7e7      	b.n	8008f66 <_scanf_float+0x182>
 8008f96:	f1bb 0f03 	cmp.w	fp, #3
 8008f9a:	d0f7      	beq.n	8008f8c <_scanf_float+0x1a8>
 8008f9c:	f1bb 0f05 	cmp.w	fp, #5
 8008fa0:	e7f2      	b.n	8008f88 <_scanf_float+0x1a4>
 8008fa2:	f1bb 0f02 	cmp.w	fp, #2
 8008fa6:	f47f af55 	bne.w	8008e54 <_scanf_float+0x70>
 8008faa:	f04f 0b03 	mov.w	fp, #3
 8008fae:	e7da      	b.n	8008f66 <_scanf_float+0x182>
 8008fb0:	f1bb 0f06 	cmp.w	fp, #6
 8008fb4:	f47f af4e 	bne.w	8008e54 <_scanf_float+0x70>
 8008fb8:	f04f 0b07 	mov.w	fp, #7
 8008fbc:	e7d3      	b.n	8008f66 <_scanf_float+0x182>
 8008fbe:	6821      	ldr	r1, [r4, #0]
 8008fc0:	0588      	lsls	r0, r1, #22
 8008fc2:	f57f af47 	bpl.w	8008e54 <_scanf_float+0x70>
 8008fc6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008fca:	6021      	str	r1, [r4, #0]
 8008fcc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fd0:	e7c9      	b.n	8008f66 <_scanf_float+0x182>
 8008fd2:	6821      	ldr	r1, [r4, #0]
 8008fd4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008fd8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008fdc:	d006      	beq.n	8008fec <_scanf_float+0x208>
 8008fde:	0548      	lsls	r0, r1, #21
 8008fe0:	f57f af38 	bpl.w	8008e54 <_scanf_float+0x70>
 8008fe4:	f1b9 0f00 	cmp.w	r9, #0
 8008fe8:	f43f af3b 	beq.w	8008e62 <_scanf_float+0x7e>
 8008fec:	0588      	lsls	r0, r1, #22
 8008fee:	bf58      	it	pl
 8008ff0:	9802      	ldrpl	r0, [sp, #8]
 8008ff2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008ff6:	bf58      	it	pl
 8008ff8:	eba9 0000 	subpl.w	r0, r9, r0
 8008ffc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009000:	bf58      	it	pl
 8009002:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009006:	6021      	str	r1, [r4, #0]
 8009008:	f04f 0900 	mov.w	r9, #0
 800900c:	e7ab      	b.n	8008f66 <_scanf_float+0x182>
 800900e:	2203      	movs	r2, #3
 8009010:	e7a9      	b.n	8008f66 <_scanf_float+0x182>
 8009012:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009016:	9205      	str	r2, [sp, #20]
 8009018:	4631      	mov	r1, r6
 800901a:	4638      	mov	r0, r7
 800901c:	4798      	blx	r3
 800901e:	9a05      	ldr	r2, [sp, #20]
 8009020:	2800      	cmp	r0, #0
 8009022:	f43f af04 	beq.w	8008e2e <_scanf_float+0x4a>
 8009026:	e715      	b.n	8008e54 <_scanf_float+0x70>
 8009028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800902c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009030:	4632      	mov	r2, r6
 8009032:	4638      	mov	r0, r7
 8009034:	4798      	blx	r3
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	3b01      	subs	r3, #1
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	e715      	b.n	8008e6a <_scanf_float+0x86>
 800903e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009042:	2b06      	cmp	r3, #6
 8009044:	d80a      	bhi.n	800905c <_scanf_float+0x278>
 8009046:	f1bb 0f02 	cmp.w	fp, #2
 800904a:	d968      	bls.n	800911e <_scanf_float+0x33a>
 800904c:	f1ab 0b03 	sub.w	fp, fp, #3
 8009050:	fa5f fb8b 	uxtb.w	fp, fp
 8009054:	eba5 0b0b 	sub.w	fp, r5, fp
 8009058:	455d      	cmp	r5, fp
 800905a:	d14b      	bne.n	80090f4 <_scanf_float+0x310>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	05da      	lsls	r2, r3, #23
 8009060:	d51f      	bpl.n	80090a2 <_scanf_float+0x2be>
 8009062:	055b      	lsls	r3, r3, #21
 8009064:	d468      	bmi.n	8009138 <_scanf_float+0x354>
 8009066:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	2965      	cmp	r1, #101	; 0x65
 800906e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009072:	f105 3bff 	add.w	fp, r5, #4294967295
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	d00d      	beq.n	8009096 <_scanf_float+0x2b2>
 800907a:	2945      	cmp	r1, #69	; 0x45
 800907c:	d00b      	beq.n	8009096 <_scanf_float+0x2b2>
 800907e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009082:	4632      	mov	r2, r6
 8009084:	4638      	mov	r0, r7
 8009086:	4798      	blx	r3
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800908e:	3b01      	subs	r3, #1
 8009090:	f1a5 0b02 	sub.w	fp, r5, #2
 8009094:	6123      	str	r3, [r4, #16]
 8009096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800909a:	4632      	mov	r2, r6
 800909c:	4638      	mov	r0, r7
 800909e:	4798      	blx	r3
 80090a0:	465d      	mov	r5, fp
 80090a2:	6826      	ldr	r6, [r4, #0]
 80090a4:	f016 0610 	ands.w	r6, r6, #16
 80090a8:	d17a      	bne.n	80091a0 <_scanf_float+0x3bc>
 80090aa:	702e      	strb	r6, [r5, #0]
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090b6:	d142      	bne.n	800913e <_scanf_float+0x35a>
 80090b8:	9b02      	ldr	r3, [sp, #8]
 80090ba:	eba9 0303 	sub.w	r3, r9, r3
 80090be:	425a      	negs	r2, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d149      	bne.n	8009158 <_scanf_float+0x374>
 80090c4:	2200      	movs	r2, #0
 80090c6:	4641      	mov	r1, r8
 80090c8:	4638      	mov	r0, r7
 80090ca:	f000 fea5 	bl	8009e18 <_strtod_r>
 80090ce:	6825      	ldr	r5, [r4, #0]
 80090d0:	f8da 3000 	ldr.w	r3, [sl]
 80090d4:	f015 0f02 	tst.w	r5, #2
 80090d8:	f103 0204 	add.w	r2, r3, #4
 80090dc:	ec59 8b10 	vmov	r8, r9, d0
 80090e0:	f8ca 2000 	str.w	r2, [sl]
 80090e4:	d043      	beq.n	800916e <_scanf_float+0x38a>
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	e9c3 8900 	strd	r8, r9, [r3]
 80090ec:	68e3      	ldr	r3, [r4, #12]
 80090ee:	3301      	adds	r3, #1
 80090f0:	60e3      	str	r3, [r4, #12]
 80090f2:	e6be      	b.n	8008e72 <_scanf_float+0x8e>
 80090f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80090fc:	4632      	mov	r2, r6
 80090fe:	4638      	mov	r0, r7
 8009100:	4798      	blx	r3
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	3b01      	subs	r3, #1
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	e7a6      	b.n	8009058 <_scanf_float+0x274>
 800910a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800910e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009112:	4632      	mov	r2, r6
 8009114:	4638      	mov	r0, r7
 8009116:	4798      	blx	r3
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	3b01      	subs	r3, #1
 800911c:	6123      	str	r3, [r4, #16]
 800911e:	4545      	cmp	r5, r8
 8009120:	d8f3      	bhi.n	800910a <_scanf_float+0x326>
 8009122:	e6a5      	b.n	8008e70 <_scanf_float+0x8c>
 8009124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009128:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800912c:	4632      	mov	r2, r6
 800912e:	4638      	mov	r0, r7
 8009130:	4798      	blx	r3
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	3b01      	subs	r3, #1
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	4545      	cmp	r5, r8
 800913a:	d8f3      	bhi.n	8009124 <_scanf_float+0x340>
 800913c:	e698      	b.n	8008e70 <_scanf_float+0x8c>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0bf      	beq.n	80090c4 <_scanf_float+0x2e0>
 8009144:	9904      	ldr	r1, [sp, #16]
 8009146:	230a      	movs	r3, #10
 8009148:	4632      	mov	r2, r6
 800914a:	3101      	adds	r1, #1
 800914c:	4638      	mov	r0, r7
 800914e:	f000 feef 	bl	8009f30 <_strtol_r>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	9d04      	ldr	r5, [sp, #16]
 8009156:	1ac2      	subs	r2, r0, r3
 8009158:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800915c:	429d      	cmp	r5, r3
 800915e:	bf28      	it	cs
 8009160:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009164:	490f      	ldr	r1, [pc, #60]	; (80091a4 <_scanf_float+0x3c0>)
 8009166:	4628      	mov	r0, r5
 8009168:	f000 f824 	bl	80091b4 <siprintf>
 800916c:	e7aa      	b.n	80090c4 <_scanf_float+0x2e0>
 800916e:	f015 0504 	ands.w	r5, r5, #4
 8009172:	d1b8      	bne.n	80090e6 <_scanf_float+0x302>
 8009174:	681f      	ldr	r7, [r3, #0]
 8009176:	ee10 2a10 	vmov	r2, s0
 800917a:	464b      	mov	r3, r9
 800917c:	ee10 0a10 	vmov	r0, s0
 8009180:	4649      	mov	r1, r9
 8009182:	f7f7 fcf3 	bl	8000b6c <__aeabi_dcmpun>
 8009186:	b128      	cbz	r0, 8009194 <_scanf_float+0x3b0>
 8009188:	4628      	mov	r0, r5
 800918a:	f000 f80d 	bl	80091a8 <nanf>
 800918e:	ed87 0a00 	vstr	s0, [r7]
 8009192:	e7ab      	b.n	80090ec <_scanf_float+0x308>
 8009194:	4640      	mov	r0, r8
 8009196:	4649      	mov	r1, r9
 8009198:	f7f7 fd46 	bl	8000c28 <__aeabi_d2f>
 800919c:	6038      	str	r0, [r7, #0]
 800919e:	e7a5      	b.n	80090ec <_scanf_float+0x308>
 80091a0:	2600      	movs	r6, #0
 80091a2:	e666      	b.n	8008e72 <_scanf_float+0x8e>
 80091a4:	0800c810 	.word	0x0800c810

080091a8 <nanf>:
 80091a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80091b0 <nanf+0x8>
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	7fc00000 	.word	0x7fc00000

080091b4 <siprintf>:
 80091b4:	b40e      	push	{r1, r2, r3}
 80091b6:	b500      	push	{lr}
 80091b8:	b09c      	sub	sp, #112	; 0x70
 80091ba:	ab1d      	add	r3, sp, #116	; 0x74
 80091bc:	9002      	str	r0, [sp, #8]
 80091be:	9006      	str	r0, [sp, #24]
 80091c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091c4:	4809      	ldr	r0, [pc, #36]	; (80091ec <siprintf+0x38>)
 80091c6:	9107      	str	r1, [sp, #28]
 80091c8:	9104      	str	r1, [sp, #16]
 80091ca:	4909      	ldr	r1, [pc, #36]	; (80091f0 <siprintf+0x3c>)
 80091cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d0:	9105      	str	r1, [sp, #20]
 80091d2:	6800      	ldr	r0, [r0, #0]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	a902      	add	r1, sp, #8
 80091d8:	f002 fd70 	bl	800bcbc <_svfiprintf_r>
 80091dc:	9b02      	ldr	r3, [sp, #8]
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	b01c      	add	sp, #112	; 0x70
 80091e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e8:	b003      	add	sp, #12
 80091ea:	4770      	bx	lr
 80091ec:	2000000c 	.word	0x2000000c
 80091f0:	ffff0208 	.word	0xffff0208

080091f4 <sulp>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	460d      	mov	r5, r1
 80091fa:	ec45 4b10 	vmov	d0, r4, r5
 80091fe:	4616      	mov	r6, r2
 8009200:	f002 fb18 	bl	800b834 <__ulp>
 8009204:	ec51 0b10 	vmov	r0, r1, d0
 8009208:	b17e      	cbz	r6, 800922a <sulp+0x36>
 800920a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800920e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009212:	2b00      	cmp	r3, #0
 8009214:	dd09      	ble.n	800922a <sulp+0x36>
 8009216:	051b      	lsls	r3, r3, #20
 8009218:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800921c:	2400      	movs	r4, #0
 800921e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009222:	4622      	mov	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	f7f7 fa07 	bl	8000638 <__aeabi_dmul>
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	0000      	movs	r0, r0
	...

08009230 <_strtod_l>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	461f      	mov	r7, r3
 8009236:	b0a1      	sub	sp, #132	; 0x84
 8009238:	2300      	movs	r3, #0
 800923a:	4681      	mov	r9, r0
 800923c:	4638      	mov	r0, r7
 800923e:	460e      	mov	r6, r1
 8009240:	9217      	str	r2, [sp, #92]	; 0x5c
 8009242:	931c      	str	r3, [sp, #112]	; 0x70
 8009244:	f001 fff5 	bl	800b232 <__localeconv_l>
 8009248:	4680      	mov	r8, r0
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	f7f6 ffe0 	bl	8000210 <strlen>
 8009250:	f04f 0a00 	mov.w	sl, #0
 8009254:	4604      	mov	r4, r0
 8009256:	f04f 0b00 	mov.w	fp, #0
 800925a:	961b      	str	r6, [sp, #108]	; 0x6c
 800925c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	2a0d      	cmp	r2, #13
 8009262:	d832      	bhi.n	80092ca <_strtod_l+0x9a>
 8009264:	2a09      	cmp	r2, #9
 8009266:	d236      	bcs.n	80092d6 <_strtod_l+0xa6>
 8009268:	2a00      	cmp	r2, #0
 800926a:	d03e      	beq.n	80092ea <_strtod_l+0xba>
 800926c:	2300      	movs	r3, #0
 800926e:	930d      	str	r3, [sp, #52]	; 0x34
 8009270:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009272:	782b      	ldrb	r3, [r5, #0]
 8009274:	2b30      	cmp	r3, #48	; 0x30
 8009276:	f040 80ac 	bne.w	80093d2 <_strtod_l+0x1a2>
 800927a:	786b      	ldrb	r3, [r5, #1]
 800927c:	2b58      	cmp	r3, #88	; 0x58
 800927e:	d001      	beq.n	8009284 <_strtod_l+0x54>
 8009280:	2b78      	cmp	r3, #120	; 0x78
 8009282:	d167      	bne.n	8009354 <_strtod_l+0x124>
 8009284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	ab1c      	add	r3, sp, #112	; 0x70
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	9702      	str	r7, [sp, #8]
 800928e:	ab1d      	add	r3, sp, #116	; 0x74
 8009290:	4a88      	ldr	r2, [pc, #544]	; (80094b4 <_strtod_l+0x284>)
 8009292:	a91b      	add	r1, sp, #108	; 0x6c
 8009294:	4648      	mov	r0, r9
 8009296:	f001 fcf2 	bl	800ac7e <__gethex>
 800929a:	f010 0407 	ands.w	r4, r0, #7
 800929e:	4606      	mov	r6, r0
 80092a0:	d005      	beq.n	80092ae <_strtod_l+0x7e>
 80092a2:	2c06      	cmp	r4, #6
 80092a4:	d12b      	bne.n	80092fe <_strtod_l+0xce>
 80092a6:	3501      	adds	r5, #1
 80092a8:	2300      	movs	r3, #0
 80092aa:	951b      	str	r5, [sp, #108]	; 0x6c
 80092ac:	930d      	str	r3, [sp, #52]	; 0x34
 80092ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 859a 	bne.w	8009dea <_strtod_l+0xbba>
 80092b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b8:	b1e3      	cbz	r3, 80092f4 <_strtod_l+0xc4>
 80092ba:	4652      	mov	r2, sl
 80092bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092c0:	ec43 2b10 	vmov	d0, r2, r3
 80092c4:	b021      	add	sp, #132	; 0x84
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	2a2b      	cmp	r2, #43	; 0x2b
 80092cc:	d015      	beq.n	80092fa <_strtod_l+0xca>
 80092ce:	2a2d      	cmp	r2, #45	; 0x2d
 80092d0:	d004      	beq.n	80092dc <_strtod_l+0xac>
 80092d2:	2a20      	cmp	r2, #32
 80092d4:	d1ca      	bne.n	800926c <_strtod_l+0x3c>
 80092d6:	3301      	adds	r3, #1
 80092d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80092da:	e7bf      	b.n	800925c <_strtod_l+0x2c>
 80092dc:	2201      	movs	r2, #1
 80092de:	920d      	str	r2, [sp, #52]	; 0x34
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1c2      	bne.n	8009270 <_strtod_l+0x40>
 80092ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 8579 	bne.w	8009de6 <_strtod_l+0xbb6>
 80092f4:	4652      	mov	r2, sl
 80092f6:	465b      	mov	r3, fp
 80092f8:	e7e2      	b.n	80092c0 <_strtod_l+0x90>
 80092fa:	2200      	movs	r2, #0
 80092fc:	e7ef      	b.n	80092de <_strtod_l+0xae>
 80092fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009300:	b13a      	cbz	r2, 8009312 <_strtod_l+0xe2>
 8009302:	2135      	movs	r1, #53	; 0x35
 8009304:	a81e      	add	r0, sp, #120	; 0x78
 8009306:	f002 fb8d 	bl	800ba24 <__copybits>
 800930a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800930c:	4648      	mov	r0, r9
 800930e:	f001 fffa 	bl	800b306 <_Bfree>
 8009312:	3c01      	subs	r4, #1
 8009314:	2c04      	cmp	r4, #4
 8009316:	d806      	bhi.n	8009326 <_strtod_l+0xf6>
 8009318:	e8df f004 	tbb	[pc, r4]
 800931c:	1714030a 	.word	0x1714030a
 8009320:	0a          	.byte	0x0a
 8009321:	00          	.byte	0x00
 8009322:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009326:	0730      	lsls	r0, r6, #28
 8009328:	d5c1      	bpl.n	80092ae <_strtod_l+0x7e>
 800932a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800932e:	e7be      	b.n	80092ae <_strtod_l+0x7e>
 8009330:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009334:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009336:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800933a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800933e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009342:	e7f0      	b.n	8009326 <_strtod_l+0xf6>
 8009344:	f8df b170 	ldr.w	fp, [pc, #368]	; 80094b8 <_strtod_l+0x288>
 8009348:	e7ed      	b.n	8009326 <_strtod_l+0xf6>
 800934a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800934e:	f04f 3aff 	mov.w	sl, #4294967295
 8009352:	e7e8      	b.n	8009326 <_strtod_l+0xf6>
 8009354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	921b      	str	r2, [sp, #108]	; 0x6c
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b30      	cmp	r3, #48	; 0x30
 800935e:	d0f9      	beq.n	8009354 <_strtod_l+0x124>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0a4      	beq.n	80092ae <_strtod_l+0x7e>
 8009364:	2301      	movs	r3, #1
 8009366:	2500      	movs	r5, #0
 8009368:	9306      	str	r3, [sp, #24]
 800936a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800936c:	9308      	str	r3, [sp, #32]
 800936e:	9507      	str	r5, [sp, #28]
 8009370:	9505      	str	r5, [sp, #20]
 8009372:	220a      	movs	r2, #10
 8009374:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009376:	7807      	ldrb	r7, [r0, #0]
 8009378:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800937c:	b2d9      	uxtb	r1, r3
 800937e:	2909      	cmp	r1, #9
 8009380:	d929      	bls.n	80093d6 <_strtod_l+0x1a6>
 8009382:	4622      	mov	r2, r4
 8009384:	f8d8 1000 	ldr.w	r1, [r8]
 8009388:	f002 fda0 	bl	800becc <strncmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	d031      	beq.n	80093f4 <_strtod_l+0x1c4>
 8009390:	2000      	movs	r0, #0
 8009392:	9c05      	ldr	r4, [sp, #20]
 8009394:	9004      	str	r0, [sp, #16]
 8009396:	463b      	mov	r3, r7
 8009398:	4602      	mov	r2, r0
 800939a:	2b65      	cmp	r3, #101	; 0x65
 800939c:	d001      	beq.n	80093a2 <_strtod_l+0x172>
 800939e:	2b45      	cmp	r3, #69	; 0x45
 80093a0:	d114      	bne.n	80093cc <_strtod_l+0x19c>
 80093a2:	b924      	cbnz	r4, 80093ae <_strtod_l+0x17e>
 80093a4:	b910      	cbnz	r0, 80093ac <_strtod_l+0x17c>
 80093a6:	9b06      	ldr	r3, [sp, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d09e      	beq.n	80092ea <_strtod_l+0xba>
 80093ac:	2400      	movs	r4, #0
 80093ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80093b0:	1c73      	adds	r3, r6, #1
 80093b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80093b4:	7873      	ldrb	r3, [r6, #1]
 80093b6:	2b2b      	cmp	r3, #43	; 0x2b
 80093b8:	d078      	beq.n	80094ac <_strtod_l+0x27c>
 80093ba:	2b2d      	cmp	r3, #45	; 0x2d
 80093bc:	d070      	beq.n	80094a0 <_strtod_l+0x270>
 80093be:	f04f 0c00 	mov.w	ip, #0
 80093c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80093c6:	2f09      	cmp	r7, #9
 80093c8:	d97c      	bls.n	80094c4 <_strtod_l+0x294>
 80093ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80093cc:	f04f 0e00 	mov.w	lr, #0
 80093d0:	e09a      	b.n	8009508 <_strtod_l+0x2d8>
 80093d2:	2300      	movs	r3, #0
 80093d4:	e7c7      	b.n	8009366 <_strtod_l+0x136>
 80093d6:	9905      	ldr	r1, [sp, #20]
 80093d8:	2908      	cmp	r1, #8
 80093da:	bfdd      	ittte	le
 80093dc:	9907      	ldrle	r1, [sp, #28]
 80093de:	fb02 3301 	mlale	r3, r2, r1, r3
 80093e2:	9307      	strle	r3, [sp, #28]
 80093e4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	3001      	adds	r0, #1
 80093ec:	3301      	adds	r3, #1
 80093ee:	9305      	str	r3, [sp, #20]
 80093f0:	901b      	str	r0, [sp, #108]	; 0x6c
 80093f2:	e7bf      	b.n	8009374 <_strtod_l+0x144>
 80093f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093f6:	191a      	adds	r2, r3, r4
 80093f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80093fa:	9a05      	ldr	r2, [sp, #20]
 80093fc:	5d1b      	ldrb	r3, [r3, r4]
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d037      	beq.n	8009472 <_strtod_l+0x242>
 8009402:	9c05      	ldr	r4, [sp, #20]
 8009404:	4602      	mov	r2, r0
 8009406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800940a:	2909      	cmp	r1, #9
 800940c:	d913      	bls.n	8009436 <_strtod_l+0x206>
 800940e:	2101      	movs	r1, #1
 8009410:	9104      	str	r1, [sp, #16]
 8009412:	e7c2      	b.n	800939a <_strtod_l+0x16a>
 8009414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	921b      	str	r2, [sp, #108]	; 0x6c
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	3001      	adds	r0, #1
 800941e:	2b30      	cmp	r3, #48	; 0x30
 8009420:	d0f8      	beq.n	8009414 <_strtod_l+0x1e4>
 8009422:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009426:	2a08      	cmp	r2, #8
 8009428:	f200 84e4 	bhi.w	8009df4 <_strtod_l+0xbc4>
 800942c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800942e:	9208      	str	r2, [sp, #32]
 8009430:	4602      	mov	r2, r0
 8009432:	2000      	movs	r0, #0
 8009434:	4604      	mov	r4, r0
 8009436:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800943a:	f100 0101 	add.w	r1, r0, #1
 800943e:	d012      	beq.n	8009466 <_strtod_l+0x236>
 8009440:	440a      	add	r2, r1
 8009442:	eb00 0c04 	add.w	ip, r0, r4
 8009446:	4621      	mov	r1, r4
 8009448:	270a      	movs	r7, #10
 800944a:	458c      	cmp	ip, r1
 800944c:	d113      	bne.n	8009476 <_strtod_l+0x246>
 800944e:	1821      	adds	r1, r4, r0
 8009450:	2908      	cmp	r1, #8
 8009452:	f104 0401 	add.w	r4, r4, #1
 8009456:	4404      	add	r4, r0
 8009458:	dc19      	bgt.n	800948e <_strtod_l+0x25e>
 800945a:	9b07      	ldr	r3, [sp, #28]
 800945c:	210a      	movs	r1, #10
 800945e:	fb01 e303 	mla	r3, r1, r3, lr
 8009462:	9307      	str	r3, [sp, #28]
 8009464:	2100      	movs	r1, #0
 8009466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009468:	1c58      	adds	r0, r3, #1
 800946a:	901b      	str	r0, [sp, #108]	; 0x6c
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	4608      	mov	r0, r1
 8009470:	e7c9      	b.n	8009406 <_strtod_l+0x1d6>
 8009472:	9805      	ldr	r0, [sp, #20]
 8009474:	e7d3      	b.n	800941e <_strtod_l+0x1ee>
 8009476:	2908      	cmp	r1, #8
 8009478:	f101 0101 	add.w	r1, r1, #1
 800947c:	dc03      	bgt.n	8009486 <_strtod_l+0x256>
 800947e:	9b07      	ldr	r3, [sp, #28]
 8009480:	437b      	muls	r3, r7
 8009482:	9307      	str	r3, [sp, #28]
 8009484:	e7e1      	b.n	800944a <_strtod_l+0x21a>
 8009486:	2910      	cmp	r1, #16
 8009488:	bfd8      	it	le
 800948a:	437d      	mulle	r5, r7
 800948c:	e7dd      	b.n	800944a <_strtod_l+0x21a>
 800948e:	2c10      	cmp	r4, #16
 8009490:	bfdc      	itt	le
 8009492:	210a      	movle	r1, #10
 8009494:	fb01 e505 	mlale	r5, r1, r5, lr
 8009498:	e7e4      	b.n	8009464 <_strtod_l+0x234>
 800949a:	2301      	movs	r3, #1
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	e781      	b.n	80093a4 <_strtod_l+0x174>
 80094a0:	f04f 0c01 	mov.w	ip, #1
 80094a4:	1cb3      	adds	r3, r6, #2
 80094a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80094a8:	78b3      	ldrb	r3, [r6, #2]
 80094aa:	e78a      	b.n	80093c2 <_strtod_l+0x192>
 80094ac:	f04f 0c00 	mov.w	ip, #0
 80094b0:	e7f8      	b.n	80094a4 <_strtod_l+0x274>
 80094b2:	bf00      	nop
 80094b4:	0800c818 	.word	0x0800c818
 80094b8:	7ff00000 	.word	0x7ff00000
 80094bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094be:	1c5f      	adds	r7, r3, #1
 80094c0:	971b      	str	r7, [sp, #108]	; 0x6c
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b30      	cmp	r3, #48	; 0x30
 80094c6:	d0f9      	beq.n	80094bc <_strtod_l+0x28c>
 80094c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80094cc:	2f08      	cmp	r7, #8
 80094ce:	f63f af7d 	bhi.w	80093cc <_strtod_l+0x19c>
 80094d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80094d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094d8:	930a      	str	r3, [sp, #40]	; 0x28
 80094da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094dc:	1c5f      	adds	r7, r3, #1
 80094de:	971b      	str	r7, [sp, #108]	; 0x6c
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80094e6:	f1b8 0f09 	cmp.w	r8, #9
 80094ea:	d937      	bls.n	800955c <_strtod_l+0x32c>
 80094ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094ee:	1a7f      	subs	r7, r7, r1
 80094f0:	2f08      	cmp	r7, #8
 80094f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80094f6:	dc37      	bgt.n	8009568 <_strtod_l+0x338>
 80094f8:	45be      	cmp	lr, r7
 80094fa:	bfa8      	it	ge
 80094fc:	46be      	movge	lr, r7
 80094fe:	f1bc 0f00 	cmp.w	ip, #0
 8009502:	d001      	beq.n	8009508 <_strtod_l+0x2d8>
 8009504:	f1ce 0e00 	rsb	lr, lr, #0
 8009508:	2c00      	cmp	r4, #0
 800950a:	d151      	bne.n	80095b0 <_strtod_l+0x380>
 800950c:	2800      	cmp	r0, #0
 800950e:	f47f aece 	bne.w	80092ae <_strtod_l+0x7e>
 8009512:	9a06      	ldr	r2, [sp, #24]
 8009514:	2a00      	cmp	r2, #0
 8009516:	f47f aeca 	bne.w	80092ae <_strtod_l+0x7e>
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	2a00      	cmp	r2, #0
 800951e:	f47f aee4 	bne.w	80092ea <_strtod_l+0xba>
 8009522:	2b4e      	cmp	r3, #78	; 0x4e
 8009524:	d027      	beq.n	8009576 <_strtod_l+0x346>
 8009526:	dc21      	bgt.n	800956c <_strtod_l+0x33c>
 8009528:	2b49      	cmp	r3, #73	; 0x49
 800952a:	f47f aede 	bne.w	80092ea <_strtod_l+0xba>
 800952e:	49a0      	ldr	r1, [pc, #640]	; (80097b0 <_strtod_l+0x580>)
 8009530:	a81b      	add	r0, sp, #108	; 0x6c
 8009532:	f001 fdd7 	bl	800b0e4 <__match>
 8009536:	2800      	cmp	r0, #0
 8009538:	f43f aed7 	beq.w	80092ea <_strtod_l+0xba>
 800953c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953e:	499d      	ldr	r1, [pc, #628]	; (80097b4 <_strtod_l+0x584>)
 8009540:	3b01      	subs	r3, #1
 8009542:	a81b      	add	r0, sp, #108	; 0x6c
 8009544:	931b      	str	r3, [sp, #108]	; 0x6c
 8009546:	f001 fdcd 	bl	800b0e4 <__match>
 800954a:	b910      	cbnz	r0, 8009552 <_strtod_l+0x322>
 800954c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800954e:	3301      	adds	r3, #1
 8009550:	931b      	str	r3, [sp, #108]	; 0x6c
 8009552:	f8df b274 	ldr.w	fp, [pc, #628]	; 80097c8 <_strtod_l+0x598>
 8009556:	f04f 0a00 	mov.w	sl, #0
 800955a:	e6a8      	b.n	80092ae <_strtod_l+0x7e>
 800955c:	210a      	movs	r1, #10
 800955e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009562:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009566:	e7b8      	b.n	80094da <_strtod_l+0x2aa>
 8009568:	46be      	mov	lr, r7
 800956a:	e7c8      	b.n	80094fe <_strtod_l+0x2ce>
 800956c:	2b69      	cmp	r3, #105	; 0x69
 800956e:	d0de      	beq.n	800952e <_strtod_l+0x2fe>
 8009570:	2b6e      	cmp	r3, #110	; 0x6e
 8009572:	f47f aeba 	bne.w	80092ea <_strtod_l+0xba>
 8009576:	4990      	ldr	r1, [pc, #576]	; (80097b8 <_strtod_l+0x588>)
 8009578:	a81b      	add	r0, sp, #108	; 0x6c
 800957a:	f001 fdb3 	bl	800b0e4 <__match>
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f aeb3 	beq.w	80092ea <_strtod_l+0xba>
 8009584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b28      	cmp	r3, #40	; 0x28
 800958a:	d10e      	bne.n	80095aa <_strtod_l+0x37a>
 800958c:	aa1e      	add	r2, sp, #120	; 0x78
 800958e:	498b      	ldr	r1, [pc, #556]	; (80097bc <_strtod_l+0x58c>)
 8009590:	a81b      	add	r0, sp, #108	; 0x6c
 8009592:	f001 fdbb 	bl	800b10c <__hexnan>
 8009596:	2805      	cmp	r0, #5
 8009598:	d107      	bne.n	80095aa <_strtod_l+0x37a>
 800959a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800959c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80095a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095a8:	e681      	b.n	80092ae <_strtod_l+0x7e>
 80095aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 80097d0 <_strtod_l+0x5a0>
 80095ae:	e7d2      	b.n	8009556 <_strtod_l+0x326>
 80095b0:	ebae 0302 	sub.w	r3, lr, r2
 80095b4:	9306      	str	r3, [sp, #24]
 80095b6:	9b05      	ldr	r3, [sp, #20]
 80095b8:	9807      	ldr	r0, [sp, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bf08      	it	eq
 80095be:	4623      	moveq	r3, r4
 80095c0:	2c10      	cmp	r4, #16
 80095c2:	9305      	str	r3, [sp, #20]
 80095c4:	46a0      	mov	r8, r4
 80095c6:	bfa8      	it	ge
 80095c8:	f04f 0810 	movge.w	r8, #16
 80095cc:	f7f6 ffba 	bl	8000544 <__aeabi_ui2d>
 80095d0:	2c09      	cmp	r4, #9
 80095d2:	4682      	mov	sl, r0
 80095d4:	468b      	mov	fp, r1
 80095d6:	dc13      	bgt.n	8009600 <_strtod_l+0x3d0>
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f43f ae67 	beq.w	80092ae <_strtod_l+0x7e>
 80095e0:	9b06      	ldr	r3, [sp, #24]
 80095e2:	dd7a      	ble.n	80096da <_strtod_l+0x4aa>
 80095e4:	2b16      	cmp	r3, #22
 80095e6:	dc61      	bgt.n	80096ac <_strtod_l+0x47c>
 80095e8:	4a75      	ldr	r2, [pc, #468]	; (80097c0 <_strtod_l+0x590>)
 80095ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80095ee:	e9de 0100 	ldrd	r0, r1, [lr]
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	f7f7 f81f 	bl	8000638 <__aeabi_dmul>
 80095fa:	4682      	mov	sl, r0
 80095fc:	468b      	mov	fp, r1
 80095fe:	e656      	b.n	80092ae <_strtod_l+0x7e>
 8009600:	4b6f      	ldr	r3, [pc, #444]	; (80097c0 <_strtod_l+0x590>)
 8009602:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009606:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800960a:	f7f7 f815 	bl	8000638 <__aeabi_dmul>
 800960e:	4606      	mov	r6, r0
 8009610:	4628      	mov	r0, r5
 8009612:	460f      	mov	r7, r1
 8009614:	f7f6 ff96 	bl	8000544 <__aeabi_ui2d>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4630      	mov	r0, r6
 800961e:	4639      	mov	r1, r7
 8009620:	f7f6 fe54 	bl	80002cc <__adddf3>
 8009624:	2c0f      	cmp	r4, #15
 8009626:	4682      	mov	sl, r0
 8009628:	468b      	mov	fp, r1
 800962a:	ddd5      	ble.n	80095d8 <_strtod_l+0x3a8>
 800962c:	9b06      	ldr	r3, [sp, #24]
 800962e:	eba4 0808 	sub.w	r8, r4, r8
 8009632:	4498      	add	r8, r3
 8009634:	f1b8 0f00 	cmp.w	r8, #0
 8009638:	f340 8096 	ble.w	8009768 <_strtod_l+0x538>
 800963c:	f018 030f 	ands.w	r3, r8, #15
 8009640:	d00a      	beq.n	8009658 <_strtod_l+0x428>
 8009642:	495f      	ldr	r1, [pc, #380]	; (80097c0 <_strtod_l+0x590>)
 8009644:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009648:	4652      	mov	r2, sl
 800964a:	465b      	mov	r3, fp
 800964c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	4682      	mov	sl, r0
 8009656:	468b      	mov	fp, r1
 8009658:	f038 080f 	bics.w	r8, r8, #15
 800965c:	d073      	beq.n	8009746 <_strtod_l+0x516>
 800965e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009662:	dd47      	ble.n	80096f4 <_strtod_l+0x4c4>
 8009664:	2400      	movs	r4, #0
 8009666:	46a0      	mov	r8, r4
 8009668:	9407      	str	r4, [sp, #28]
 800966a:	9405      	str	r4, [sp, #20]
 800966c:	2322      	movs	r3, #34	; 0x22
 800966e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80097c8 <_strtod_l+0x598>
 8009672:	f8c9 3000 	str.w	r3, [r9]
 8009676:	f04f 0a00 	mov.w	sl, #0
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f43f ae16 	beq.w	80092ae <_strtod_l+0x7e>
 8009682:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009684:	4648      	mov	r0, r9
 8009686:	f001 fe3e 	bl	800b306 <_Bfree>
 800968a:	9905      	ldr	r1, [sp, #20]
 800968c:	4648      	mov	r0, r9
 800968e:	f001 fe3a 	bl	800b306 <_Bfree>
 8009692:	4641      	mov	r1, r8
 8009694:	4648      	mov	r0, r9
 8009696:	f001 fe36 	bl	800b306 <_Bfree>
 800969a:	9907      	ldr	r1, [sp, #28]
 800969c:	4648      	mov	r0, r9
 800969e:	f001 fe32 	bl	800b306 <_Bfree>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4648      	mov	r0, r9
 80096a6:	f001 fe2e 	bl	800b306 <_Bfree>
 80096aa:	e600      	b.n	80092ae <_strtod_l+0x7e>
 80096ac:	9a06      	ldr	r2, [sp, #24]
 80096ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80096b2:	4293      	cmp	r3, r2
 80096b4:	dbba      	blt.n	800962c <_strtod_l+0x3fc>
 80096b6:	4d42      	ldr	r5, [pc, #264]	; (80097c0 <_strtod_l+0x590>)
 80096b8:	f1c4 040f 	rsb	r4, r4, #15
 80096bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80096c0:	4652      	mov	r2, sl
 80096c2:	465b      	mov	r3, fp
 80096c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c8:	f7f6 ffb6 	bl	8000638 <__aeabi_dmul>
 80096cc:	9b06      	ldr	r3, [sp, #24]
 80096ce:	1b1c      	subs	r4, r3, r4
 80096d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80096d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096d8:	e78d      	b.n	80095f6 <_strtod_l+0x3c6>
 80096da:	f113 0f16 	cmn.w	r3, #22
 80096de:	dba5      	blt.n	800962c <_strtod_l+0x3fc>
 80096e0:	4a37      	ldr	r2, [pc, #220]	; (80097c0 <_strtod_l+0x590>)
 80096e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80096e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80096ea:	4650      	mov	r0, sl
 80096ec:	4659      	mov	r1, fp
 80096ee:	f7f7 f8cd 	bl	800088c <__aeabi_ddiv>
 80096f2:	e782      	b.n	80095fa <_strtod_l+0x3ca>
 80096f4:	2300      	movs	r3, #0
 80096f6:	4e33      	ldr	r6, [pc, #204]	; (80097c4 <_strtod_l+0x594>)
 80096f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80096fc:	4650      	mov	r0, sl
 80096fe:	4659      	mov	r1, fp
 8009700:	461d      	mov	r5, r3
 8009702:	f1b8 0f01 	cmp.w	r8, #1
 8009706:	dc21      	bgt.n	800974c <_strtod_l+0x51c>
 8009708:	b10b      	cbz	r3, 800970e <_strtod_l+0x4de>
 800970a:	4682      	mov	sl, r0
 800970c:	468b      	mov	fp, r1
 800970e:	4b2d      	ldr	r3, [pc, #180]	; (80097c4 <_strtod_l+0x594>)
 8009710:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009714:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009718:	4652      	mov	r2, sl
 800971a:	465b      	mov	r3, fp
 800971c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009720:	f7f6 ff8a 	bl	8000638 <__aeabi_dmul>
 8009724:	4b28      	ldr	r3, [pc, #160]	; (80097c8 <_strtod_l+0x598>)
 8009726:	460a      	mov	r2, r1
 8009728:	400b      	ands	r3, r1
 800972a:	4928      	ldr	r1, [pc, #160]	; (80097cc <_strtod_l+0x59c>)
 800972c:	428b      	cmp	r3, r1
 800972e:	4682      	mov	sl, r0
 8009730:	d898      	bhi.n	8009664 <_strtod_l+0x434>
 8009732:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009736:	428b      	cmp	r3, r1
 8009738:	bf86      	itte	hi
 800973a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80097d4 <_strtod_l+0x5a4>
 800973e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009742:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009746:	2300      	movs	r3, #0
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	e077      	b.n	800983c <_strtod_l+0x60c>
 800974c:	f018 0f01 	tst.w	r8, #1
 8009750:	d006      	beq.n	8009760 <_strtod_l+0x530>
 8009752:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 ff6d 	bl	8000638 <__aeabi_dmul>
 800975e:	2301      	movs	r3, #1
 8009760:	3501      	adds	r5, #1
 8009762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009766:	e7cc      	b.n	8009702 <_strtod_l+0x4d2>
 8009768:	d0ed      	beq.n	8009746 <_strtod_l+0x516>
 800976a:	f1c8 0800 	rsb	r8, r8, #0
 800976e:	f018 020f 	ands.w	r2, r8, #15
 8009772:	d00a      	beq.n	800978a <_strtod_l+0x55a>
 8009774:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <_strtod_l+0x590>)
 8009776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800977a:	4650      	mov	r0, sl
 800977c:	4659      	mov	r1, fp
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f7 f883 	bl	800088c <__aeabi_ddiv>
 8009786:	4682      	mov	sl, r0
 8009788:	468b      	mov	fp, r1
 800978a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800978e:	d0da      	beq.n	8009746 <_strtod_l+0x516>
 8009790:	f1b8 0f1f 	cmp.w	r8, #31
 8009794:	dd20      	ble.n	80097d8 <_strtod_l+0x5a8>
 8009796:	2400      	movs	r4, #0
 8009798:	46a0      	mov	r8, r4
 800979a:	9407      	str	r4, [sp, #28]
 800979c:	9405      	str	r4, [sp, #20]
 800979e:	2322      	movs	r3, #34	; 0x22
 80097a0:	f04f 0a00 	mov.w	sl, #0
 80097a4:	f04f 0b00 	mov.w	fp, #0
 80097a8:	f8c9 3000 	str.w	r3, [r9]
 80097ac:	e765      	b.n	800967a <_strtod_l+0x44a>
 80097ae:	bf00      	nop
 80097b0:	0800c7e1 	.word	0x0800c7e1
 80097b4:	0800c86b 	.word	0x0800c86b
 80097b8:	0800c7e9 	.word	0x0800c7e9
 80097bc:	0800c82c 	.word	0x0800c82c
 80097c0:	0800c8a8 	.word	0x0800c8a8
 80097c4:	0800c880 	.word	0x0800c880
 80097c8:	7ff00000 	.word	0x7ff00000
 80097cc:	7ca00000 	.word	0x7ca00000
 80097d0:	fff80000 	.word	0xfff80000
 80097d4:	7fefffff 	.word	0x7fefffff
 80097d8:	f018 0310 	ands.w	r3, r8, #16
 80097dc:	bf18      	it	ne
 80097de:	236a      	movne	r3, #106	; 0x6a
 80097e0:	4da0      	ldr	r5, [pc, #640]	; (8009a64 <_strtod_l+0x834>)
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	4650      	mov	r0, sl
 80097e6:	4659      	mov	r1, fp
 80097e8:	2300      	movs	r3, #0
 80097ea:	f1b8 0f00 	cmp.w	r8, #0
 80097ee:	f300 810a 	bgt.w	8009a06 <_strtod_l+0x7d6>
 80097f2:	b10b      	cbz	r3, 80097f8 <_strtod_l+0x5c8>
 80097f4:	4682      	mov	sl, r0
 80097f6:	468b      	mov	fp, r1
 80097f8:	9b04      	ldr	r3, [sp, #16]
 80097fa:	b1bb      	cbz	r3, 800982c <_strtod_l+0x5fc>
 80097fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009804:	2b00      	cmp	r3, #0
 8009806:	4659      	mov	r1, fp
 8009808:	dd10      	ble.n	800982c <_strtod_l+0x5fc>
 800980a:	2b1f      	cmp	r3, #31
 800980c:	f340 8107 	ble.w	8009a1e <_strtod_l+0x7ee>
 8009810:	2b34      	cmp	r3, #52	; 0x34
 8009812:	bfde      	ittt	le
 8009814:	3b20      	suble	r3, #32
 8009816:	f04f 32ff 	movle.w	r2, #4294967295
 800981a:	fa02 f303 	lslle.w	r3, r2, r3
 800981e:	f04f 0a00 	mov.w	sl, #0
 8009822:	bfcc      	ite	gt
 8009824:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009828:	ea03 0b01 	andle.w	fp, r3, r1
 800982c:	2200      	movs	r2, #0
 800982e:	2300      	movs	r3, #0
 8009830:	4650      	mov	r0, sl
 8009832:	4659      	mov	r1, fp
 8009834:	f7f7 f968 	bl	8000b08 <__aeabi_dcmpeq>
 8009838:	2800      	cmp	r0, #0
 800983a:	d1ac      	bne.n	8009796 <_strtod_l+0x566>
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	9a05      	ldr	r2, [sp, #20]
 8009842:	9908      	ldr	r1, [sp, #32]
 8009844:	4623      	mov	r3, r4
 8009846:	4648      	mov	r0, r9
 8009848:	f001 fdaf 	bl	800b3aa <__s2b>
 800984c:	9007      	str	r0, [sp, #28]
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f af08 	beq.w	8009664 <_strtod_l+0x434>
 8009854:	9a06      	ldr	r2, [sp, #24]
 8009856:	9b06      	ldr	r3, [sp, #24]
 8009858:	2a00      	cmp	r2, #0
 800985a:	f1c3 0300 	rsb	r3, r3, #0
 800985e:	bfa8      	it	ge
 8009860:	2300      	movge	r3, #0
 8009862:	930e      	str	r3, [sp, #56]	; 0x38
 8009864:	2400      	movs	r4, #0
 8009866:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800986a:	9316      	str	r3, [sp, #88]	; 0x58
 800986c:	46a0      	mov	r8, r4
 800986e:	9b07      	ldr	r3, [sp, #28]
 8009870:	4648      	mov	r0, r9
 8009872:	6859      	ldr	r1, [r3, #4]
 8009874:	f001 fd13 	bl	800b29e <_Balloc>
 8009878:	9005      	str	r0, [sp, #20]
 800987a:	2800      	cmp	r0, #0
 800987c:	f43f aef6 	beq.w	800966c <_strtod_l+0x43c>
 8009880:	9b07      	ldr	r3, [sp, #28]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	3202      	adds	r2, #2
 8009886:	f103 010c 	add.w	r1, r3, #12
 800988a:	0092      	lsls	r2, r2, #2
 800988c:	300c      	adds	r0, #12
 800988e:	f001 fcfb 	bl	800b288 <memcpy>
 8009892:	aa1e      	add	r2, sp, #120	; 0x78
 8009894:	a91d      	add	r1, sp, #116	; 0x74
 8009896:	ec4b ab10 	vmov	d0, sl, fp
 800989a:	4648      	mov	r0, r9
 800989c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80098a0:	f002 f83e 	bl	800b920 <__d2b>
 80098a4:	901c      	str	r0, [sp, #112]	; 0x70
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f aee0 	beq.w	800966c <_strtod_l+0x43c>
 80098ac:	2101      	movs	r1, #1
 80098ae:	4648      	mov	r0, r9
 80098b0:	f001 fe07 	bl	800b4c2 <__i2b>
 80098b4:	4680      	mov	r8, r0
 80098b6:	2800      	cmp	r0, #0
 80098b8:	f43f aed8 	beq.w	800966c <_strtod_l+0x43c>
 80098bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80098be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098c0:	2e00      	cmp	r6, #0
 80098c2:	bfab      	itete	ge
 80098c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80098c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80098c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80098ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80098cc:	bfac      	ite	ge
 80098ce:	18f7      	addge	r7, r6, r3
 80098d0:	1b9d      	sublt	r5, r3, r6
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	1af6      	subs	r6, r6, r3
 80098d6:	4416      	add	r6, r2
 80098d8:	4b63      	ldr	r3, [pc, #396]	; (8009a68 <_strtod_l+0x838>)
 80098da:	3e01      	subs	r6, #1
 80098dc:	429e      	cmp	r6, r3
 80098de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80098e2:	f280 80af 	bge.w	8009a44 <_strtod_l+0x814>
 80098e6:	1b9b      	subs	r3, r3, r6
 80098e8:	2b1f      	cmp	r3, #31
 80098ea:	eba2 0203 	sub.w	r2, r2, r3
 80098ee:	f04f 0101 	mov.w	r1, #1
 80098f2:	f300 809b 	bgt.w	8009a2c <_strtod_l+0x7fc>
 80098f6:	fa01 f303 	lsl.w	r3, r1, r3
 80098fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80098fc:	2300      	movs	r3, #0
 80098fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009900:	18be      	adds	r6, r7, r2
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	42b7      	cmp	r7, r6
 8009906:	4415      	add	r5, r2
 8009908:	441d      	add	r5, r3
 800990a:	463b      	mov	r3, r7
 800990c:	bfa8      	it	ge
 800990e:	4633      	movge	r3, r6
 8009910:	42ab      	cmp	r3, r5
 8009912:	bfa8      	it	ge
 8009914:	462b      	movge	r3, r5
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfc2      	ittt	gt
 800991a:	1af6      	subgt	r6, r6, r3
 800991c:	1aed      	subgt	r5, r5, r3
 800991e:	1aff      	subgt	r7, r7, r3
 8009920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009922:	b1bb      	cbz	r3, 8009954 <_strtod_l+0x724>
 8009924:	4641      	mov	r1, r8
 8009926:	461a      	mov	r2, r3
 8009928:	4648      	mov	r0, r9
 800992a:	f001 fe69 	bl	800b600 <__pow5mult>
 800992e:	4680      	mov	r8, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	f43f ae9b 	beq.w	800966c <_strtod_l+0x43c>
 8009936:	4601      	mov	r1, r0
 8009938:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800993a:	4648      	mov	r0, r9
 800993c:	f001 fdca 	bl	800b4d4 <__multiply>
 8009940:	900c      	str	r0, [sp, #48]	; 0x30
 8009942:	2800      	cmp	r0, #0
 8009944:	f43f ae92 	beq.w	800966c <_strtod_l+0x43c>
 8009948:	991c      	ldr	r1, [sp, #112]	; 0x70
 800994a:	4648      	mov	r0, r9
 800994c:	f001 fcdb 	bl	800b306 <_Bfree>
 8009950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009952:	931c      	str	r3, [sp, #112]	; 0x70
 8009954:	2e00      	cmp	r6, #0
 8009956:	dc7a      	bgt.n	8009a4e <_strtod_l+0x81e>
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	2b00      	cmp	r3, #0
 800995c:	dd08      	ble.n	8009970 <_strtod_l+0x740>
 800995e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009960:	9905      	ldr	r1, [sp, #20]
 8009962:	4648      	mov	r0, r9
 8009964:	f001 fe4c 	bl	800b600 <__pow5mult>
 8009968:	9005      	str	r0, [sp, #20]
 800996a:	2800      	cmp	r0, #0
 800996c:	f43f ae7e 	beq.w	800966c <_strtod_l+0x43c>
 8009970:	2d00      	cmp	r5, #0
 8009972:	dd08      	ble.n	8009986 <_strtod_l+0x756>
 8009974:	462a      	mov	r2, r5
 8009976:	9905      	ldr	r1, [sp, #20]
 8009978:	4648      	mov	r0, r9
 800997a:	f001 fe8f 	bl	800b69c <__lshift>
 800997e:	9005      	str	r0, [sp, #20]
 8009980:	2800      	cmp	r0, #0
 8009982:	f43f ae73 	beq.w	800966c <_strtod_l+0x43c>
 8009986:	2f00      	cmp	r7, #0
 8009988:	dd08      	ble.n	800999c <_strtod_l+0x76c>
 800998a:	4641      	mov	r1, r8
 800998c:	463a      	mov	r2, r7
 800998e:	4648      	mov	r0, r9
 8009990:	f001 fe84 	bl	800b69c <__lshift>
 8009994:	4680      	mov	r8, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f ae68 	beq.w	800966c <_strtod_l+0x43c>
 800999c:	9a05      	ldr	r2, [sp, #20]
 800999e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099a0:	4648      	mov	r0, r9
 80099a2:	f001 fee9 	bl	800b778 <__mdiff>
 80099a6:	4604      	mov	r4, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f ae5f 	beq.w	800966c <_strtod_l+0x43c>
 80099ae:	68c3      	ldr	r3, [r0, #12]
 80099b0:	930c      	str	r3, [sp, #48]	; 0x30
 80099b2:	2300      	movs	r3, #0
 80099b4:	60c3      	str	r3, [r0, #12]
 80099b6:	4641      	mov	r1, r8
 80099b8:	f001 fec4 	bl	800b744 <__mcmp>
 80099bc:	2800      	cmp	r0, #0
 80099be:	da55      	bge.n	8009a6c <_strtod_l+0x83c>
 80099c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099c2:	b9e3      	cbnz	r3, 80099fe <_strtod_l+0x7ce>
 80099c4:	f1ba 0f00 	cmp.w	sl, #0
 80099c8:	d119      	bne.n	80099fe <_strtod_l+0x7ce>
 80099ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ce:	b9b3      	cbnz	r3, 80099fe <_strtod_l+0x7ce>
 80099d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099d4:	0d1b      	lsrs	r3, r3, #20
 80099d6:	051b      	lsls	r3, r3, #20
 80099d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80099dc:	d90f      	bls.n	80099fe <_strtod_l+0x7ce>
 80099de:	6963      	ldr	r3, [r4, #20]
 80099e0:	b913      	cbnz	r3, 80099e8 <_strtod_l+0x7b8>
 80099e2:	6923      	ldr	r3, [r4, #16]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	dd0a      	ble.n	80099fe <_strtod_l+0x7ce>
 80099e8:	4621      	mov	r1, r4
 80099ea:	2201      	movs	r2, #1
 80099ec:	4648      	mov	r0, r9
 80099ee:	f001 fe55 	bl	800b69c <__lshift>
 80099f2:	4641      	mov	r1, r8
 80099f4:	4604      	mov	r4, r0
 80099f6:	f001 fea5 	bl	800b744 <__mcmp>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	dc67      	bgt.n	8009ace <_strtod_l+0x89e>
 80099fe:	9b04      	ldr	r3, [sp, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d171      	bne.n	8009ae8 <_strtod_l+0x8b8>
 8009a04:	e63d      	b.n	8009682 <_strtod_l+0x452>
 8009a06:	f018 0f01 	tst.w	r8, #1
 8009a0a:	d004      	beq.n	8009a16 <_strtod_l+0x7e6>
 8009a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a10:	f7f6 fe12 	bl	8000638 <__aeabi_dmul>
 8009a14:	2301      	movs	r3, #1
 8009a16:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a1a:	3508      	adds	r5, #8
 8009a1c:	e6e5      	b.n	80097ea <_strtod_l+0x5ba>
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a22:	fa02 f303 	lsl.w	r3, r2, r3
 8009a26:	ea03 0a0a 	and.w	sl, r3, sl
 8009a2a:	e6ff      	b.n	800982c <_strtod_l+0x5fc>
 8009a2c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009a30:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009a34:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009a38:	36e2      	adds	r6, #226	; 0xe2
 8009a3a:	fa01 f306 	lsl.w	r3, r1, r6
 8009a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a40:	910f      	str	r1, [sp, #60]	; 0x3c
 8009a42:	e75d      	b.n	8009900 <_strtod_l+0x6d0>
 8009a44:	2300      	movs	r3, #0
 8009a46:	930a      	str	r3, [sp, #40]	; 0x28
 8009a48:	2301      	movs	r3, #1
 8009a4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a4c:	e758      	b.n	8009900 <_strtod_l+0x6d0>
 8009a4e:	4632      	mov	r2, r6
 8009a50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a52:	4648      	mov	r0, r9
 8009a54:	f001 fe22 	bl	800b69c <__lshift>
 8009a58:	901c      	str	r0, [sp, #112]	; 0x70
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f47f af7c 	bne.w	8009958 <_strtod_l+0x728>
 8009a60:	e604      	b.n	800966c <_strtod_l+0x43c>
 8009a62:	bf00      	nop
 8009a64:	0800c840 	.word	0x0800c840
 8009a68:	fffffc02 	.word	0xfffffc02
 8009a6c:	465d      	mov	r5, fp
 8009a6e:	f040 8086 	bne.w	8009b7e <_strtod_l+0x94e>
 8009a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a78:	b32a      	cbz	r2, 8009ac6 <_strtod_l+0x896>
 8009a7a:	4aaf      	ldr	r2, [pc, #700]	; (8009d38 <_strtod_l+0xb08>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d153      	bne.n	8009b28 <_strtod_l+0x8f8>
 8009a80:	9b04      	ldr	r3, [sp, #16]
 8009a82:	4650      	mov	r0, sl
 8009a84:	b1d3      	cbz	r3, 8009abc <_strtod_l+0x88c>
 8009a86:	4aad      	ldr	r2, [pc, #692]	; (8009d3c <_strtod_l+0xb0c>)
 8009a88:	402a      	ands	r2, r5
 8009a8a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8009a92:	d816      	bhi.n	8009ac2 <_strtod_l+0x892>
 8009a94:	0d12      	lsrs	r2, r2, #20
 8009a96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9e:	4298      	cmp	r0, r3
 8009aa0:	d142      	bne.n	8009b28 <_strtod_l+0x8f8>
 8009aa2:	4ba7      	ldr	r3, [pc, #668]	; (8009d40 <_strtod_l+0xb10>)
 8009aa4:	429d      	cmp	r5, r3
 8009aa6:	d102      	bne.n	8009aae <_strtod_l+0x87e>
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f addf 	beq.w	800966c <_strtod_l+0x43c>
 8009aae:	4ba3      	ldr	r3, [pc, #652]	; (8009d3c <_strtod_l+0xb0c>)
 8009ab0:	402b      	ands	r3, r5
 8009ab2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009ab6:	f04f 0a00 	mov.w	sl, #0
 8009aba:	e7a0      	b.n	80099fe <_strtod_l+0x7ce>
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	e7ed      	b.n	8009a9e <_strtod_l+0x86e>
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	e7eb      	b.n	8009a9e <_strtod_l+0x86e>
 8009ac6:	bb7b      	cbnz	r3, 8009b28 <_strtod_l+0x8f8>
 8009ac8:	f1ba 0f00 	cmp.w	sl, #0
 8009acc:	d12c      	bne.n	8009b28 <_strtod_l+0x8f8>
 8009ace:	9904      	ldr	r1, [sp, #16]
 8009ad0:	4a9a      	ldr	r2, [pc, #616]	; (8009d3c <_strtod_l+0xb0c>)
 8009ad2:	465b      	mov	r3, fp
 8009ad4:	b1f1      	cbz	r1, 8009b14 <_strtod_l+0x8e4>
 8009ad6:	ea02 010b 	and.w	r1, r2, fp
 8009ada:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ade:	dc19      	bgt.n	8009b14 <_strtod_l+0x8e4>
 8009ae0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ae4:	f77f ae5b 	ble.w	800979e <_strtod_l+0x56e>
 8009ae8:	4a96      	ldr	r2, [pc, #600]	; (8009d44 <_strtod_l+0xb14>)
 8009aea:	2300      	movs	r3, #0
 8009aec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009af0:	4650      	mov	r0, sl
 8009af2:	4659      	mov	r1, fp
 8009af4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009af8:	f7f6 fd9e 	bl	8000638 <__aeabi_dmul>
 8009afc:	4682      	mov	sl, r0
 8009afe:	468b      	mov	fp, r1
 8009b00:	2900      	cmp	r1, #0
 8009b02:	f47f adbe 	bne.w	8009682 <_strtod_l+0x452>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f47f adbb 	bne.w	8009682 <_strtod_l+0x452>
 8009b0c:	2322      	movs	r3, #34	; 0x22
 8009b0e:	f8c9 3000 	str.w	r3, [r9]
 8009b12:	e5b6      	b.n	8009682 <_strtod_l+0x452>
 8009b14:	4013      	ands	r3, r2
 8009b16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b22:	f04f 3aff 	mov.w	sl, #4294967295
 8009b26:	e76a      	b.n	80099fe <_strtod_l+0x7ce>
 8009b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2a:	b193      	cbz	r3, 8009b52 <_strtod_l+0x922>
 8009b2c:	422b      	tst	r3, r5
 8009b2e:	f43f af66 	beq.w	80099fe <_strtod_l+0x7ce>
 8009b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b34:	9a04      	ldr	r2, [sp, #16]
 8009b36:	4650      	mov	r0, sl
 8009b38:	4659      	mov	r1, fp
 8009b3a:	b173      	cbz	r3, 8009b5a <_strtod_l+0x92a>
 8009b3c:	f7ff fb5a 	bl	80091f4 <sulp>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b48:	f7f6 fbc0 	bl	80002cc <__adddf3>
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	468b      	mov	fp, r1
 8009b50:	e755      	b.n	80099fe <_strtod_l+0x7ce>
 8009b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b54:	ea13 0f0a 	tst.w	r3, sl
 8009b58:	e7e9      	b.n	8009b2e <_strtod_l+0x8fe>
 8009b5a:	f7ff fb4b 	bl	80091f4 <sulp>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b66:	f7f6 fbaf 	bl	80002c8 <__aeabi_dsub>
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4682      	mov	sl, r0
 8009b70:	468b      	mov	fp, r1
 8009b72:	f7f6 ffc9 	bl	8000b08 <__aeabi_dcmpeq>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f47f ae11 	bne.w	800979e <_strtod_l+0x56e>
 8009b7c:	e73f      	b.n	80099fe <_strtod_l+0x7ce>
 8009b7e:	4641      	mov	r1, r8
 8009b80:	4620      	mov	r0, r4
 8009b82:	f001 ff1c 	bl	800b9be <__ratio>
 8009b86:	ec57 6b10 	vmov	r6, r7, d0
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b90:	ee10 0a10 	vmov	r0, s0
 8009b94:	4639      	mov	r1, r7
 8009b96:	f7f6 ffcb 	bl	8000b30 <__aeabi_dcmple>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d077      	beq.n	8009c8e <_strtod_l+0xa5e>
 8009b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d04a      	beq.n	8009c3a <_strtod_l+0xa0a>
 8009ba4:	4b68      	ldr	r3, [pc, #416]	; (8009d48 <_strtod_l+0xb18>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009bac:	4f66      	ldr	r7, [pc, #408]	; (8009d48 <_strtod_l+0xb18>)
 8009bae:	2600      	movs	r6, #0
 8009bb0:	4b62      	ldr	r3, [pc, #392]	; (8009d3c <_strtod_l+0xb0c>)
 8009bb2:	402b      	ands	r3, r5
 8009bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bb8:	4b64      	ldr	r3, [pc, #400]	; (8009d4c <_strtod_l+0xb1c>)
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	f040 80ce 	bne.w	8009d5c <_strtod_l+0xb2c>
 8009bc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bc8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009bcc:	ec4b ab10 	vmov	d0, sl, fp
 8009bd0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009bd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009bd8:	f001 fe2c 	bl	800b834 <__ulp>
 8009bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009be0:	ec53 2b10 	vmov	r2, r3, d0
 8009be4:	f7f6 fd28 	bl	8000638 <__aeabi_dmul>
 8009be8:	4652      	mov	r2, sl
 8009bea:	465b      	mov	r3, fp
 8009bec:	f7f6 fb6e 	bl	80002cc <__adddf3>
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4952      	ldr	r1, [pc, #328]	; (8009d3c <_strtod_l+0xb0c>)
 8009bf4:	4a56      	ldr	r2, [pc, #344]	; (8009d50 <_strtod_l+0xb20>)
 8009bf6:	4019      	ands	r1, r3
 8009bf8:	4291      	cmp	r1, r2
 8009bfa:	4682      	mov	sl, r0
 8009bfc:	d95b      	bls.n	8009cb6 <_strtod_l+0xa86>
 8009bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c00:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d103      	bne.n	8009c10 <_strtod_l+0x9e0>
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	f43f ad2e 	beq.w	800966c <_strtod_l+0x43c>
 8009c10:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009d40 <_strtod_l+0xb10>
 8009c14:	f04f 3aff 	mov.w	sl, #4294967295
 8009c18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c1a:	4648      	mov	r0, r9
 8009c1c:	f001 fb73 	bl	800b306 <_Bfree>
 8009c20:	9905      	ldr	r1, [sp, #20]
 8009c22:	4648      	mov	r0, r9
 8009c24:	f001 fb6f 	bl	800b306 <_Bfree>
 8009c28:	4641      	mov	r1, r8
 8009c2a:	4648      	mov	r0, r9
 8009c2c:	f001 fb6b 	bl	800b306 <_Bfree>
 8009c30:	4621      	mov	r1, r4
 8009c32:	4648      	mov	r0, r9
 8009c34:	f001 fb67 	bl	800b306 <_Bfree>
 8009c38:	e619      	b.n	800986e <_strtod_l+0x63e>
 8009c3a:	f1ba 0f00 	cmp.w	sl, #0
 8009c3e:	d11a      	bne.n	8009c76 <_strtod_l+0xa46>
 8009c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c44:	b9eb      	cbnz	r3, 8009c82 <_strtod_l+0xa52>
 8009c46:	2200      	movs	r2, #0
 8009c48:	4b3f      	ldr	r3, [pc, #252]	; (8009d48 <_strtod_l+0xb18>)
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 ff65 	bl	8000b1c <__aeabi_dcmplt>
 8009c52:	b9c8      	cbnz	r0, 8009c88 <_strtod_l+0xa58>
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4b3e      	ldr	r3, [pc, #248]	; (8009d54 <_strtod_l+0xb24>)
 8009c5c:	f7f6 fcec 	bl	8000638 <__aeabi_dmul>
 8009c60:	4606      	mov	r6, r0
 8009c62:	460f      	mov	r7, r1
 8009c64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009c68:	9618      	str	r6, [sp, #96]	; 0x60
 8009c6a:	9319      	str	r3, [sp, #100]	; 0x64
 8009c6c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009c70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c74:	e79c      	b.n	8009bb0 <_strtod_l+0x980>
 8009c76:	f1ba 0f01 	cmp.w	sl, #1
 8009c7a:	d102      	bne.n	8009c82 <_strtod_l+0xa52>
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	f43f ad8e 	beq.w	800979e <_strtod_l+0x56e>
 8009c82:	2200      	movs	r2, #0
 8009c84:	4b34      	ldr	r3, [pc, #208]	; (8009d58 <_strtod_l+0xb28>)
 8009c86:	e78f      	b.n	8009ba8 <_strtod_l+0x978>
 8009c88:	2600      	movs	r6, #0
 8009c8a:	4f32      	ldr	r7, [pc, #200]	; (8009d54 <_strtod_l+0xb24>)
 8009c8c:	e7ea      	b.n	8009c64 <_strtod_l+0xa34>
 8009c8e:	4b31      	ldr	r3, [pc, #196]	; (8009d54 <_strtod_l+0xb24>)
 8009c90:	4630      	mov	r0, r6
 8009c92:	4639      	mov	r1, r7
 8009c94:	2200      	movs	r2, #0
 8009c96:	f7f6 fccf 	bl	8000638 <__aeabi_dmul>
 8009c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	460f      	mov	r7, r1
 8009ca0:	b933      	cbnz	r3, 8009cb0 <_strtod_l+0xa80>
 8009ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ca6:	9010      	str	r0, [sp, #64]	; 0x40
 8009ca8:	9311      	str	r3, [sp, #68]	; 0x44
 8009caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cae:	e7df      	b.n	8009c70 <_strtod_l+0xa40>
 8009cb0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009cb4:	e7f9      	b.n	8009caa <_strtod_l+0xa7a>
 8009cb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1ab      	bne.n	8009c18 <_strtod_l+0x9e8>
 8009cc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cc4:	0d1b      	lsrs	r3, r3, #20
 8009cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cc8:	051b      	lsls	r3, r3, #20
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	465d      	mov	r5, fp
 8009cce:	d1a3      	bne.n	8009c18 <_strtod_l+0x9e8>
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7f6 ff60 	bl	8000b98 <__aeabi_d2iz>
 8009cd8:	f7f6 fc44 	bl	8000564 <__aeabi_i2d>
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4602      	mov	r2, r0
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7f6 faf0 	bl	80002c8 <__aeabi_dsub>
 8009ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	b933      	cbnz	r3, 8009cfe <_strtod_l+0xace>
 8009cf0:	f1ba 0f00 	cmp.w	sl, #0
 8009cf4:	d103      	bne.n	8009cfe <_strtod_l+0xace>
 8009cf6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009cfa:	2d00      	cmp	r5, #0
 8009cfc:	d06d      	beq.n	8009dda <_strtod_l+0xbaa>
 8009cfe:	a30a      	add	r3, pc, #40	; (adr r3, 8009d28 <_strtod_l+0xaf8>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	4630      	mov	r0, r6
 8009d06:	4639      	mov	r1, r7
 8009d08:	f7f6 ff08 	bl	8000b1c <__aeabi_dcmplt>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	f47f acb8 	bne.w	8009682 <_strtod_l+0x452>
 8009d12:	a307      	add	r3, pc, #28	; (adr r3, 8009d30 <_strtod_l+0xb00>)
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 ff1c 	bl	8000b58 <__aeabi_dcmpgt>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f43f af79 	beq.w	8009c18 <_strtod_l+0x9e8>
 8009d26:	e4ac      	b.n	8009682 <_strtod_l+0x452>
 8009d28:	94a03595 	.word	0x94a03595
 8009d2c:	3fdfffff 	.word	0x3fdfffff
 8009d30:	35afe535 	.word	0x35afe535
 8009d34:	3fe00000 	.word	0x3fe00000
 8009d38:	000fffff 	.word	0x000fffff
 8009d3c:	7ff00000 	.word	0x7ff00000
 8009d40:	7fefffff 	.word	0x7fefffff
 8009d44:	39500000 	.word	0x39500000
 8009d48:	3ff00000 	.word	0x3ff00000
 8009d4c:	7fe00000 	.word	0x7fe00000
 8009d50:	7c9fffff 	.word	0x7c9fffff
 8009d54:	3fe00000 	.word	0x3fe00000
 8009d58:	bff00000 	.word	0xbff00000
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	b333      	cbz	r3, 8009dae <_strtod_l+0xb7e>
 8009d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d66:	d822      	bhi.n	8009dae <_strtod_l+0xb7e>
 8009d68:	a327      	add	r3, pc, #156	; (adr r3, 8009e08 <_strtod_l+0xbd8>)
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	4630      	mov	r0, r6
 8009d70:	4639      	mov	r1, r7
 8009d72:	f7f6 fedd 	bl	8000b30 <__aeabi_dcmple>
 8009d76:	b1a0      	cbz	r0, 8009da2 <_strtod_l+0xb72>
 8009d78:	4639      	mov	r1, r7
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7f6 ff34 	bl	8000be8 <__aeabi_d2uiz>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	bf08      	it	eq
 8009d84:	2001      	moveq	r0, #1
 8009d86:	f7f6 fbdd 	bl	8000544 <__aeabi_ui2d>
 8009d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	bb03      	cbnz	r3, 8009dd4 <_strtod_l+0xba4>
 8009d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d96:	9012      	str	r0, [sp, #72]	; 0x48
 8009d98:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009d9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009da6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dae:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009db2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009db6:	f001 fd3d 	bl	800b834 <__ulp>
 8009dba:	4650      	mov	r0, sl
 8009dbc:	ec53 2b10 	vmov	r2, r3, d0
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	f7f6 fc39 	bl	8000638 <__aeabi_dmul>
 8009dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dca:	f7f6 fa7f 	bl	80002cc <__adddf3>
 8009dce:	4682      	mov	sl, r0
 8009dd0:	468b      	mov	fp, r1
 8009dd2:	e772      	b.n	8009cba <_strtod_l+0xa8a>
 8009dd4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009dd8:	e7df      	b.n	8009d9a <_strtod_l+0xb6a>
 8009dda:	a30d      	add	r3, pc, #52	; (adr r3, 8009e10 <_strtod_l+0xbe0>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 8009de4:	e79c      	b.n	8009d20 <_strtod_l+0xaf0>
 8009de6:	2300      	movs	r3, #0
 8009de8:	930d      	str	r3, [sp, #52]	; 0x34
 8009dea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	f7ff ba61 	b.w	80092b6 <_strtod_l+0x86>
 8009df4:	2b65      	cmp	r3, #101	; 0x65
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	f43f ab4e 	beq.w	800949a <_strtod_l+0x26a>
 8009dfe:	2101      	movs	r1, #1
 8009e00:	4614      	mov	r4, r2
 8009e02:	9104      	str	r1, [sp, #16]
 8009e04:	f7ff bacb 	b.w	800939e <_strtod_l+0x16e>
 8009e08:	ffc00000 	.word	0xffc00000
 8009e0c:	41dfffff 	.word	0x41dfffff
 8009e10:	94a03595 	.word	0x94a03595
 8009e14:	3fcfffff 	.word	0x3fcfffff

08009e18 <_strtod_r>:
 8009e18:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <_strtod_r+0x18>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	b410      	push	{r4}
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	4c04      	ldr	r4, [pc, #16]	; (8009e34 <_strtod_r+0x1c>)
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bf08      	it	eq
 8009e26:	4623      	moveq	r3, r4
 8009e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e2c:	f7ff ba00 	b.w	8009230 <_strtod_l>
 8009e30:	2000000c 	.word	0x2000000c
 8009e34:	20000070 	.word	0x20000070

08009e38 <_strtol_l.isra.0>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	4689      	mov	r9, r1
 8009e40:	4692      	mov	sl, r2
 8009e42:	461e      	mov	r6, r3
 8009e44:	460f      	mov	r7, r1
 8009e46:	463d      	mov	r5, r7
 8009e48:	9808      	ldr	r0, [sp, #32]
 8009e4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e4e:	f001 f9ed 	bl	800b22c <__locale_ctype_ptr_l>
 8009e52:	4420      	add	r0, r4
 8009e54:	7843      	ldrb	r3, [r0, #1]
 8009e56:	f013 0308 	ands.w	r3, r3, #8
 8009e5a:	d132      	bne.n	8009ec2 <_strtol_l.isra.0+0x8a>
 8009e5c:	2c2d      	cmp	r4, #45	; 0x2d
 8009e5e:	d132      	bne.n	8009ec6 <_strtol_l.isra.0+0x8e>
 8009e60:	787c      	ldrb	r4, [r7, #1]
 8009e62:	1cbd      	adds	r5, r7, #2
 8009e64:	2201      	movs	r2, #1
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d05d      	beq.n	8009f26 <_strtol_l.isra.0+0xee>
 8009e6a:	2e10      	cmp	r6, #16
 8009e6c:	d109      	bne.n	8009e82 <_strtol_l.isra.0+0x4a>
 8009e6e:	2c30      	cmp	r4, #48	; 0x30
 8009e70:	d107      	bne.n	8009e82 <_strtol_l.isra.0+0x4a>
 8009e72:	782b      	ldrb	r3, [r5, #0]
 8009e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e78:	2b58      	cmp	r3, #88	; 0x58
 8009e7a:	d14f      	bne.n	8009f1c <_strtol_l.isra.0+0xe4>
 8009e7c:	786c      	ldrb	r4, [r5, #1]
 8009e7e:	2610      	movs	r6, #16
 8009e80:	3502      	adds	r5, #2
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	bf14      	ite	ne
 8009e86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009e8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009e8e:	2700      	movs	r7, #0
 8009e90:	fbb1 fcf6 	udiv	ip, r1, r6
 8009e94:	4638      	mov	r0, r7
 8009e96:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009e9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009e9e:	2b09      	cmp	r3, #9
 8009ea0:	d817      	bhi.n	8009ed2 <_strtol_l.isra.0+0x9a>
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	dd23      	ble.n	8009ef0 <_strtol_l.isra.0+0xb8>
 8009ea8:	1c7b      	adds	r3, r7, #1
 8009eaa:	d007      	beq.n	8009ebc <_strtol_l.isra.0+0x84>
 8009eac:	4584      	cmp	ip, r0
 8009eae:	d31c      	bcc.n	8009eea <_strtol_l.isra.0+0xb2>
 8009eb0:	d101      	bne.n	8009eb6 <_strtol_l.isra.0+0x7e>
 8009eb2:	45a6      	cmp	lr, r4
 8009eb4:	db19      	blt.n	8009eea <_strtol_l.isra.0+0xb2>
 8009eb6:	fb00 4006 	mla	r0, r0, r6, r4
 8009eba:	2701      	movs	r7, #1
 8009ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ec0:	e7eb      	b.n	8009e9a <_strtol_l.isra.0+0x62>
 8009ec2:	462f      	mov	r7, r5
 8009ec4:	e7bf      	b.n	8009e46 <_strtol_l.isra.0+0xe>
 8009ec6:	2c2b      	cmp	r4, #43	; 0x2b
 8009ec8:	bf04      	itt	eq
 8009eca:	1cbd      	addeq	r5, r7, #2
 8009ecc:	787c      	ldrbeq	r4, [r7, #1]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	e7c9      	b.n	8009e66 <_strtol_l.isra.0+0x2e>
 8009ed2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009ed6:	2b19      	cmp	r3, #25
 8009ed8:	d801      	bhi.n	8009ede <_strtol_l.isra.0+0xa6>
 8009eda:	3c37      	subs	r4, #55	; 0x37
 8009edc:	e7e2      	b.n	8009ea4 <_strtol_l.isra.0+0x6c>
 8009ede:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009ee2:	2b19      	cmp	r3, #25
 8009ee4:	d804      	bhi.n	8009ef0 <_strtol_l.isra.0+0xb8>
 8009ee6:	3c57      	subs	r4, #87	; 0x57
 8009ee8:	e7dc      	b.n	8009ea4 <_strtol_l.isra.0+0x6c>
 8009eea:	f04f 37ff 	mov.w	r7, #4294967295
 8009eee:	e7e5      	b.n	8009ebc <_strtol_l.isra.0+0x84>
 8009ef0:	1c7b      	adds	r3, r7, #1
 8009ef2:	d108      	bne.n	8009f06 <_strtol_l.isra.0+0xce>
 8009ef4:	2322      	movs	r3, #34	; 0x22
 8009ef6:	f8c8 3000 	str.w	r3, [r8]
 8009efa:	4608      	mov	r0, r1
 8009efc:	f1ba 0f00 	cmp.w	sl, #0
 8009f00:	d107      	bne.n	8009f12 <_strtol_l.isra.0+0xda>
 8009f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f06:	b102      	cbz	r2, 8009f0a <_strtol_l.isra.0+0xd2>
 8009f08:	4240      	negs	r0, r0
 8009f0a:	f1ba 0f00 	cmp.w	sl, #0
 8009f0e:	d0f8      	beq.n	8009f02 <_strtol_l.isra.0+0xca>
 8009f10:	b10f      	cbz	r7, 8009f16 <_strtol_l.isra.0+0xde>
 8009f12:	f105 39ff 	add.w	r9, r5, #4294967295
 8009f16:	f8ca 9000 	str.w	r9, [sl]
 8009f1a:	e7f2      	b.n	8009f02 <_strtol_l.isra.0+0xca>
 8009f1c:	2430      	movs	r4, #48	; 0x30
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	d1af      	bne.n	8009e82 <_strtol_l.isra.0+0x4a>
 8009f22:	2608      	movs	r6, #8
 8009f24:	e7ad      	b.n	8009e82 <_strtol_l.isra.0+0x4a>
 8009f26:	2c30      	cmp	r4, #48	; 0x30
 8009f28:	d0a3      	beq.n	8009e72 <_strtol_l.isra.0+0x3a>
 8009f2a:	260a      	movs	r6, #10
 8009f2c:	e7a9      	b.n	8009e82 <_strtol_l.isra.0+0x4a>
	...

08009f30 <_strtol_r>:
 8009f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f32:	4c06      	ldr	r4, [pc, #24]	; (8009f4c <_strtol_r+0x1c>)
 8009f34:	4d06      	ldr	r5, [pc, #24]	; (8009f50 <_strtol_r+0x20>)
 8009f36:	6824      	ldr	r4, [r4, #0]
 8009f38:	6a24      	ldr	r4, [r4, #32]
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	bf08      	it	eq
 8009f3e:	462c      	moveq	r4, r5
 8009f40:	9400      	str	r4, [sp, #0]
 8009f42:	f7ff ff79 	bl	8009e38 <_strtol_l.isra.0>
 8009f46:	b003      	add	sp, #12
 8009f48:	bd30      	pop	{r4, r5, pc}
 8009f4a:	bf00      	nop
 8009f4c:	2000000c 	.word	0x2000000c
 8009f50:	20000070 	.word	0x20000070

08009f54 <quorem>:
 8009f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	6903      	ldr	r3, [r0, #16]
 8009f5a:	690c      	ldr	r4, [r1, #16]
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	4680      	mov	r8, r0
 8009f60:	f2c0 8082 	blt.w	800a068 <quorem+0x114>
 8009f64:	3c01      	subs	r4, #1
 8009f66:	f101 0714 	add.w	r7, r1, #20
 8009f6a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009f6e:	f100 0614 	add.w	r6, r0, #20
 8009f72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f7a:	eb06 030c 	add.w	r3, r6, ip
 8009f7e:	3501      	adds	r5, #1
 8009f80:	eb07 090c 	add.w	r9, r7, ip
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f8a:	b395      	cbz	r5, 8009ff2 <quorem+0x9e>
 8009f8c:	f04f 0a00 	mov.w	sl, #0
 8009f90:	4638      	mov	r0, r7
 8009f92:	46b6      	mov	lr, r6
 8009f94:	46d3      	mov	fp, sl
 8009f96:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f9a:	b293      	uxth	r3, r2
 8009f9c:	fb05 a303 	mla	r3, r5, r3, sl
 8009fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	ebab 0303 	sub.w	r3, fp, r3
 8009faa:	0c12      	lsrs	r2, r2, #16
 8009fac:	f8de b000 	ldr.w	fp, [lr]
 8009fb0:	fb05 a202 	mla	r2, r5, r2, sl
 8009fb4:	fa13 f38b 	uxtah	r3, r3, fp
 8009fb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009fbc:	fa1f fb82 	uxth.w	fp, r2
 8009fc0:	f8de 2000 	ldr.w	r2, [lr]
 8009fc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009fc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd2:	4581      	cmp	r9, r0
 8009fd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009fd8:	f84e 3b04 	str.w	r3, [lr], #4
 8009fdc:	d2db      	bcs.n	8009f96 <quorem+0x42>
 8009fde:	f856 300c 	ldr.w	r3, [r6, ip]
 8009fe2:	b933      	cbnz	r3, 8009ff2 <quorem+0x9e>
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	3b04      	subs	r3, #4
 8009fe8:	429e      	cmp	r6, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	d330      	bcc.n	800a050 <quorem+0xfc>
 8009fee:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f001 fba6 	bl	800b744 <__mcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	db25      	blt.n	800a048 <quorem+0xf4>
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	4630      	mov	r0, r6
 800a000:	f04f 0c00 	mov.w	ip, #0
 800a004:	f857 2b04 	ldr.w	r2, [r7], #4
 800a008:	f8d0 e000 	ldr.w	lr, [r0]
 800a00c:	b293      	uxth	r3, r2
 800a00e:	ebac 0303 	sub.w	r3, ip, r3
 800a012:	0c12      	lsrs	r2, r2, #16
 800a014:	fa13 f38e 	uxtah	r3, r3, lr
 800a018:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a01c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a026:	45b9      	cmp	r9, r7
 800a028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a02c:	f840 3b04 	str.w	r3, [r0], #4
 800a030:	d2e8      	bcs.n	800a004 <quorem+0xb0>
 800a032:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a036:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a03a:	b92a      	cbnz	r2, 800a048 <quorem+0xf4>
 800a03c:	3b04      	subs	r3, #4
 800a03e:	429e      	cmp	r6, r3
 800a040:	461a      	mov	r2, r3
 800a042:	d30b      	bcc.n	800a05c <quorem+0x108>
 800a044:	f8c8 4010 	str.w	r4, [r8, #16]
 800a048:	4628      	mov	r0, r5
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	3b04      	subs	r3, #4
 800a054:	2a00      	cmp	r2, #0
 800a056:	d1ca      	bne.n	8009fee <quorem+0x9a>
 800a058:	3c01      	subs	r4, #1
 800a05a:	e7c5      	b.n	8009fe8 <quorem+0x94>
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	3b04      	subs	r3, #4
 800a060:	2a00      	cmp	r2, #0
 800a062:	d1ef      	bne.n	800a044 <quorem+0xf0>
 800a064:	3c01      	subs	r4, #1
 800a066:	e7ea      	b.n	800a03e <quorem+0xea>
 800a068:	2000      	movs	r0, #0
 800a06a:	e7ee      	b.n	800a04a <quorem+0xf6>
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <_dtoa_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	ec57 6b10 	vmov	r6, r7, d0
 800a078:	b097      	sub	sp, #92	; 0x5c
 800a07a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a07c:	9106      	str	r1, [sp, #24]
 800a07e:	4604      	mov	r4, r0
 800a080:	920b      	str	r2, [sp, #44]	; 0x2c
 800a082:	9312      	str	r3, [sp, #72]	; 0x48
 800a084:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a088:	e9cd 6700 	strd	r6, r7, [sp]
 800a08c:	b93d      	cbnz	r5, 800a09e <_dtoa_r+0x2e>
 800a08e:	2010      	movs	r0, #16
 800a090:	f001 f8e0 	bl	800b254 <malloc>
 800a094:	6260      	str	r0, [r4, #36]	; 0x24
 800a096:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a09a:	6005      	str	r5, [r0, #0]
 800a09c:	60c5      	str	r5, [r0, #12]
 800a09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	b151      	cbz	r1, 800a0ba <_dtoa_r+0x4a>
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	604a      	str	r2, [r1, #4]
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4093      	lsls	r3, r2
 800a0ac:	608b      	str	r3, [r1, #8]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f001 f929 	bl	800b306 <_Bfree>
 800a0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	1e3b      	subs	r3, r7, #0
 800a0bc:	bfbb      	ittet	lt
 800a0be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0c2:	9301      	strlt	r3, [sp, #4]
 800a0c4:	2300      	movge	r3, #0
 800a0c6:	2201      	movlt	r2, #1
 800a0c8:	bfac      	ite	ge
 800a0ca:	f8c8 3000 	strge.w	r3, [r8]
 800a0ce:	f8c8 2000 	strlt.w	r2, [r8]
 800a0d2:	4baf      	ldr	r3, [pc, #700]	; (800a390 <_dtoa_r+0x320>)
 800a0d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0d8:	ea33 0308 	bics.w	r3, r3, r8
 800a0dc:	d114      	bne.n	800a108 <_dtoa_r+0x98>
 800a0de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	9b00      	ldr	r3, [sp, #0]
 800a0e8:	b923      	cbnz	r3, 800a0f4 <_dtoa_r+0x84>
 800a0ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f000 8542 	beq.w	800ab78 <_dtoa_r+0xb08>
 800a0f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a3a4 <_dtoa_r+0x334>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 8544 	beq.w	800ab88 <_dtoa_r+0xb18>
 800a100:	f10b 0303 	add.w	r3, fp, #3
 800a104:	f000 bd3e 	b.w	800ab84 <_dtoa_r+0xb14>
 800a108:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a10c:	2200      	movs	r2, #0
 800a10e:	2300      	movs	r3, #0
 800a110:	4630      	mov	r0, r6
 800a112:	4639      	mov	r1, r7
 800a114:	f7f6 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 800a118:	4681      	mov	r9, r0
 800a11a:	b168      	cbz	r0, 800a138 <_dtoa_r+0xc8>
 800a11c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a11e:	2301      	movs	r3, #1
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 8524 	beq.w	800ab72 <_dtoa_r+0xb02>
 800a12a:	4b9a      	ldr	r3, [pc, #616]	; (800a394 <_dtoa_r+0x324>)
 800a12c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a12e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	f000 bd28 	b.w	800ab88 <_dtoa_r+0xb18>
 800a138:	aa14      	add	r2, sp, #80	; 0x50
 800a13a:	a915      	add	r1, sp, #84	; 0x54
 800a13c:	ec47 6b10 	vmov	d0, r6, r7
 800a140:	4620      	mov	r0, r4
 800a142:	f001 fbed 	bl	800b920 <__d2b>
 800a146:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a14a:	9004      	str	r0, [sp, #16]
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	d07c      	beq.n	800a24a <_dtoa_r+0x1da>
 800a150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a154:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a158:	46b2      	mov	sl, r6
 800a15a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a15e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a162:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a166:	2200      	movs	r2, #0
 800a168:	4b8b      	ldr	r3, [pc, #556]	; (800a398 <_dtoa_r+0x328>)
 800a16a:	4650      	mov	r0, sl
 800a16c:	4659      	mov	r1, fp
 800a16e:	f7f6 f8ab 	bl	80002c8 <__aeabi_dsub>
 800a172:	a381      	add	r3, pc, #516	; (adr r3, 800a378 <_dtoa_r+0x308>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f6 fa5e 	bl	8000638 <__aeabi_dmul>
 800a17c:	a380      	add	r3, pc, #512	; (adr r3, 800a380 <_dtoa_r+0x310>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f8a3 	bl	80002cc <__adddf3>
 800a186:	4606      	mov	r6, r0
 800a188:	4628      	mov	r0, r5
 800a18a:	460f      	mov	r7, r1
 800a18c:	f7f6 f9ea 	bl	8000564 <__aeabi_i2d>
 800a190:	a37d      	add	r3, pc, #500	; (adr r3, 800a388 <_dtoa_r+0x318>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 fa4f 	bl	8000638 <__aeabi_dmul>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 f893 	bl	80002cc <__adddf3>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	f7f6 fcf5 	bl	8000b98 <__aeabi_d2iz>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fcb0 	bl	8000b1c <__aeabi_dcmplt>
 800a1bc:	b148      	cbz	r0, 800a1d2 <_dtoa_r+0x162>
 800a1be:	4650      	mov	r0, sl
 800a1c0:	f7f6 f9d0 	bl	8000564 <__aeabi_i2d>
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	f7f6 fc9e 	bl	8000b08 <__aeabi_dcmpeq>
 800a1cc:	b908      	cbnz	r0, 800a1d2 <_dtoa_r+0x162>
 800a1ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1d2:	f1ba 0f16 	cmp.w	sl, #22
 800a1d6:	d859      	bhi.n	800a28c <_dtoa_r+0x21c>
 800a1d8:	4970      	ldr	r1, [pc, #448]	; (800a39c <_dtoa_r+0x32c>)
 800a1da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e6:	f7f6 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d050      	beq.n	800a290 <_dtoa_r+0x220>
 800a1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1f8:	1b5d      	subs	r5, r3, r5
 800a1fa:	f1b5 0801 	subs.w	r8, r5, #1
 800a1fe:	bf49      	itett	mi
 800a200:	f1c5 0301 	rsbmi	r3, r5, #1
 800a204:	2300      	movpl	r3, #0
 800a206:	9305      	strmi	r3, [sp, #20]
 800a208:	f04f 0800 	movmi.w	r8, #0
 800a20c:	bf58      	it	pl
 800a20e:	9305      	strpl	r3, [sp, #20]
 800a210:	f1ba 0f00 	cmp.w	sl, #0
 800a214:	db3e      	blt.n	800a294 <_dtoa_r+0x224>
 800a216:	2300      	movs	r3, #0
 800a218:	44d0      	add	r8, sl
 800a21a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a21e:	9307      	str	r3, [sp, #28]
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	2b09      	cmp	r3, #9
 800a224:	f200 8090 	bhi.w	800a348 <_dtoa_r+0x2d8>
 800a228:	2b05      	cmp	r3, #5
 800a22a:	bfc4      	itt	gt
 800a22c:	3b04      	subgt	r3, #4
 800a22e:	9306      	strgt	r3, [sp, #24]
 800a230:	9b06      	ldr	r3, [sp, #24]
 800a232:	f1a3 0302 	sub.w	r3, r3, #2
 800a236:	bfcc      	ite	gt
 800a238:	2500      	movgt	r5, #0
 800a23a:	2501      	movle	r5, #1
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	f200 808f 	bhi.w	800a360 <_dtoa_r+0x2f0>
 800a242:	e8df f003 	tbb	[pc, r3]
 800a246:	7f7d      	.short	0x7f7d
 800a248:	7131      	.short	0x7131
 800a24a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a24e:	441d      	add	r5, r3
 800a250:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a254:	2820      	cmp	r0, #32
 800a256:	dd13      	ble.n	800a280 <_dtoa_r+0x210>
 800a258:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a25c:	9b00      	ldr	r3, [sp, #0]
 800a25e:	fa08 f800 	lsl.w	r8, r8, r0
 800a262:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a266:	fa23 f000 	lsr.w	r0, r3, r0
 800a26a:	ea48 0000 	orr.w	r0, r8, r0
 800a26e:	f7f6 f969 	bl	8000544 <__aeabi_ui2d>
 800a272:	2301      	movs	r3, #1
 800a274:	4682      	mov	sl, r0
 800a276:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a27a:	3d01      	subs	r5, #1
 800a27c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a27e:	e772      	b.n	800a166 <_dtoa_r+0xf6>
 800a280:	9b00      	ldr	r3, [sp, #0]
 800a282:	f1c0 0020 	rsb	r0, r0, #32
 800a286:	fa03 f000 	lsl.w	r0, r3, r0
 800a28a:	e7f0      	b.n	800a26e <_dtoa_r+0x1fe>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e7b1      	b.n	800a1f4 <_dtoa_r+0x184>
 800a290:	900f      	str	r0, [sp, #60]	; 0x3c
 800a292:	e7b0      	b.n	800a1f6 <_dtoa_r+0x186>
 800a294:	9b05      	ldr	r3, [sp, #20]
 800a296:	eba3 030a 	sub.w	r3, r3, sl
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	f1ca 0300 	rsb	r3, sl, #0
 800a2a0:	9307      	str	r3, [sp, #28]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a2a6:	e7bb      	b.n	800a220 <_dtoa_r+0x1b0>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd59      	ble.n	800a366 <_dtoa_r+0x2f6>
 800a2b2:	9302      	str	r3, [sp, #8]
 800a2b4:	4699      	mov	r9, r3
 800a2b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	6072      	str	r2, [r6, #4]
 800a2bc:	2204      	movs	r2, #4
 800a2be:	f102 0014 	add.w	r0, r2, #20
 800a2c2:	4298      	cmp	r0, r3
 800a2c4:	6871      	ldr	r1, [r6, #4]
 800a2c6:	d953      	bls.n	800a370 <_dtoa_r+0x300>
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 ffe8 	bl	800b29e <_Balloc>
 800a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d0:	6030      	str	r0, [r6, #0]
 800a2d2:	f1b9 0f0e 	cmp.w	r9, #14
 800a2d6:	f8d3 b000 	ldr.w	fp, [r3]
 800a2da:	f200 80e6 	bhi.w	800a4aa <_dtoa_r+0x43a>
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	f000 80e3 	beq.w	800a4aa <_dtoa_r+0x43a>
 800a2e4:	ed9d 7b00 	vldr	d7, [sp]
 800a2e8:	f1ba 0f00 	cmp.w	sl, #0
 800a2ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a2f0:	dd74      	ble.n	800a3dc <_dtoa_r+0x36c>
 800a2f2:	4a2a      	ldr	r2, [pc, #168]	; (800a39c <_dtoa_r+0x32c>)
 800a2f4:	f00a 030f 	and.w	r3, sl, #15
 800a2f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2fc:	ed93 7b00 	vldr	d7, [r3]
 800a300:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a304:	06f0      	lsls	r0, r6, #27
 800a306:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a30a:	d565      	bpl.n	800a3d8 <_dtoa_r+0x368>
 800a30c:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <_dtoa_r+0x330>)
 800a30e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a312:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a316:	f7f6 fab9 	bl	800088c <__aeabi_ddiv>
 800a31a:	e9cd 0100 	strd	r0, r1, [sp]
 800a31e:	f006 060f 	and.w	r6, r6, #15
 800a322:	2503      	movs	r5, #3
 800a324:	4f1e      	ldr	r7, [pc, #120]	; (800a3a0 <_dtoa_r+0x330>)
 800a326:	e04c      	b.n	800a3c2 <_dtoa_r+0x352>
 800a328:	2301      	movs	r3, #1
 800a32a:	930a      	str	r3, [sp, #40]	; 0x28
 800a32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a32e:	4453      	add	r3, sl
 800a330:	f103 0901 	add.w	r9, r3, #1
 800a334:	9302      	str	r3, [sp, #8]
 800a336:	464b      	mov	r3, r9
 800a338:	2b01      	cmp	r3, #1
 800a33a:	bfb8      	it	lt
 800a33c:	2301      	movlt	r3, #1
 800a33e:	e7ba      	b.n	800a2b6 <_dtoa_r+0x246>
 800a340:	2300      	movs	r3, #0
 800a342:	e7b2      	b.n	800a2aa <_dtoa_r+0x23a>
 800a344:	2300      	movs	r3, #0
 800a346:	e7f0      	b.n	800a32a <_dtoa_r+0x2ba>
 800a348:	2501      	movs	r5, #1
 800a34a:	2300      	movs	r3, #0
 800a34c:	9306      	str	r3, [sp, #24]
 800a34e:	950a      	str	r5, [sp, #40]	; 0x28
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	9302      	str	r3, [sp, #8]
 800a356:	4699      	mov	r9, r3
 800a358:	2200      	movs	r2, #0
 800a35a:	2312      	movs	r3, #18
 800a35c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a35e:	e7aa      	b.n	800a2b6 <_dtoa_r+0x246>
 800a360:	2301      	movs	r3, #1
 800a362:	930a      	str	r3, [sp, #40]	; 0x28
 800a364:	e7f4      	b.n	800a350 <_dtoa_r+0x2e0>
 800a366:	2301      	movs	r3, #1
 800a368:	9302      	str	r3, [sp, #8]
 800a36a:	4699      	mov	r9, r3
 800a36c:	461a      	mov	r2, r3
 800a36e:	e7f5      	b.n	800a35c <_dtoa_r+0x2ec>
 800a370:	3101      	adds	r1, #1
 800a372:	6071      	str	r1, [r6, #4]
 800a374:	0052      	lsls	r2, r2, #1
 800a376:	e7a2      	b.n	800a2be <_dtoa_r+0x24e>
 800a378:	636f4361 	.word	0x636f4361
 800a37c:	3fd287a7 	.word	0x3fd287a7
 800a380:	8b60c8b3 	.word	0x8b60c8b3
 800a384:	3fc68a28 	.word	0x3fc68a28
 800a388:	509f79fb 	.word	0x509f79fb
 800a38c:	3fd34413 	.word	0x3fd34413
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	0800c7ed 	.word	0x0800c7ed
 800a398:	3ff80000 	.word	0x3ff80000
 800a39c:	0800c8a8 	.word	0x0800c8a8
 800a3a0:	0800c880 	.word	0x0800c880
 800a3a4:	0800c871 	.word	0x0800c871
 800a3a8:	07f1      	lsls	r1, r6, #31
 800a3aa:	d508      	bpl.n	800a3be <_dtoa_r+0x34e>
 800a3ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b4:	f7f6 f940 	bl	8000638 <__aeabi_dmul>
 800a3b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3bc:	3501      	adds	r5, #1
 800a3be:	1076      	asrs	r6, r6, #1
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	2e00      	cmp	r6, #0
 800a3c4:	d1f0      	bne.n	800a3a8 <_dtoa_r+0x338>
 800a3c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ce:	f7f6 fa5d 	bl	800088c <__aeabi_ddiv>
 800a3d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a3d6:	e01a      	b.n	800a40e <_dtoa_r+0x39e>
 800a3d8:	2502      	movs	r5, #2
 800a3da:	e7a3      	b.n	800a324 <_dtoa_r+0x2b4>
 800a3dc:	f000 80a0 	beq.w	800a520 <_dtoa_r+0x4b0>
 800a3e0:	f1ca 0600 	rsb	r6, sl, #0
 800a3e4:	4b9f      	ldr	r3, [pc, #636]	; (800a664 <_dtoa_r+0x5f4>)
 800a3e6:	4fa0      	ldr	r7, [pc, #640]	; (800a668 <_dtoa_r+0x5f8>)
 800a3e8:	f006 020f 	and.w	r2, r6, #15
 800a3ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3f8:	f7f6 f91e 	bl	8000638 <__aeabi_dmul>
 800a3fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a400:	1136      	asrs	r6, r6, #4
 800a402:	2300      	movs	r3, #0
 800a404:	2502      	movs	r5, #2
 800a406:	2e00      	cmp	r6, #0
 800a408:	d17f      	bne.n	800a50a <_dtoa_r+0x49a>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e1      	bne.n	800a3d2 <_dtoa_r+0x362>
 800a40e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 8087 	beq.w	800a524 <_dtoa_r+0x4b4>
 800a416:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a41a:	2200      	movs	r2, #0
 800a41c:	4b93      	ldr	r3, [pc, #588]	; (800a66c <_dtoa_r+0x5fc>)
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	f7f6 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 800a426:	2800      	cmp	r0, #0
 800a428:	d07c      	beq.n	800a524 <_dtoa_r+0x4b4>
 800a42a:	f1b9 0f00 	cmp.w	r9, #0
 800a42e:	d079      	beq.n	800a524 <_dtoa_r+0x4b4>
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dd35      	ble.n	800a4a2 <_dtoa_r+0x432>
 800a436:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a43a:	9308      	str	r3, [sp, #32]
 800a43c:	4639      	mov	r1, r7
 800a43e:	2200      	movs	r2, #0
 800a440:	4b8b      	ldr	r3, [pc, #556]	; (800a670 <_dtoa_r+0x600>)
 800a442:	4630      	mov	r0, r6
 800a444:	f7f6 f8f8 	bl	8000638 <__aeabi_dmul>
 800a448:	e9cd 0100 	strd	r0, r1, [sp]
 800a44c:	9f02      	ldr	r7, [sp, #8]
 800a44e:	3501      	adds	r5, #1
 800a450:	4628      	mov	r0, r5
 800a452:	f7f6 f887 	bl	8000564 <__aeabi_i2d>
 800a456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a45a:	f7f6 f8ed 	bl	8000638 <__aeabi_dmul>
 800a45e:	2200      	movs	r2, #0
 800a460:	4b84      	ldr	r3, [pc, #528]	; (800a674 <_dtoa_r+0x604>)
 800a462:	f7f5 ff33 	bl	80002cc <__adddf3>
 800a466:	4605      	mov	r5, r0
 800a468:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	d15d      	bne.n	800a52c <_dtoa_r+0x4bc>
 800a470:	2200      	movs	r2, #0
 800a472:	4b81      	ldr	r3, [pc, #516]	; (800a678 <_dtoa_r+0x608>)
 800a474:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a478:	f7f5 ff26 	bl	80002c8 <__aeabi_dsub>
 800a47c:	462a      	mov	r2, r5
 800a47e:	4633      	mov	r3, r6
 800a480:	e9cd 0100 	strd	r0, r1, [sp]
 800a484:	f7f6 fb68 	bl	8000b58 <__aeabi_dcmpgt>
 800a488:	2800      	cmp	r0, #0
 800a48a:	f040 8288 	bne.w	800a99e <_dtoa_r+0x92e>
 800a48e:	462a      	mov	r2, r5
 800a490:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a498:	f7f6 fb40 	bl	8000b1c <__aeabi_dcmplt>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	f040 827c 	bne.w	800a99a <_dtoa_r+0x92a>
 800a4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4a6:	e9cd 2300 	strd	r2, r3, [sp]
 800a4aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f2c0 8150 	blt.w	800a752 <_dtoa_r+0x6e2>
 800a4b2:	f1ba 0f0e 	cmp.w	sl, #14
 800a4b6:	f300 814c 	bgt.w	800a752 <_dtoa_r+0x6e2>
 800a4ba:	4b6a      	ldr	r3, [pc, #424]	; (800a664 <_dtoa_r+0x5f4>)
 800a4bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4c0:	ed93 7b00 	vldr	d7, [r3]
 800a4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4cc:	f280 80d8 	bge.w	800a680 <_dtoa_r+0x610>
 800a4d0:	f1b9 0f00 	cmp.w	r9, #0
 800a4d4:	f300 80d4 	bgt.w	800a680 <_dtoa_r+0x610>
 800a4d8:	f040 825e 	bne.w	800a998 <_dtoa_r+0x928>
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4b66      	ldr	r3, [pc, #408]	; (800a678 <_dtoa_r+0x608>)
 800a4e0:	ec51 0b17 	vmov	r0, r1, d7
 800a4e4:	f7f6 f8a8 	bl	8000638 <__aeabi_dmul>
 800a4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ec:	f7f6 fb2a 	bl	8000b44 <__aeabi_dcmpge>
 800a4f0:	464f      	mov	r7, r9
 800a4f2:	464e      	mov	r6, r9
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f040 8234 	bne.w	800a962 <_dtoa_r+0x8f2>
 800a4fa:	2331      	movs	r3, #49	; 0x31
 800a4fc:	f10b 0501 	add.w	r5, fp, #1
 800a500:	f88b 3000 	strb.w	r3, [fp]
 800a504:	f10a 0a01 	add.w	sl, sl, #1
 800a508:	e22f      	b.n	800a96a <_dtoa_r+0x8fa>
 800a50a:	07f2      	lsls	r2, r6, #31
 800a50c:	d505      	bpl.n	800a51a <_dtoa_r+0x4aa>
 800a50e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a512:	f7f6 f891 	bl	8000638 <__aeabi_dmul>
 800a516:	3501      	adds	r5, #1
 800a518:	2301      	movs	r3, #1
 800a51a:	1076      	asrs	r6, r6, #1
 800a51c:	3708      	adds	r7, #8
 800a51e:	e772      	b.n	800a406 <_dtoa_r+0x396>
 800a520:	2502      	movs	r5, #2
 800a522:	e774      	b.n	800a40e <_dtoa_r+0x39e>
 800a524:	f8cd a020 	str.w	sl, [sp, #32]
 800a528:	464f      	mov	r7, r9
 800a52a:	e791      	b.n	800a450 <_dtoa_r+0x3e0>
 800a52c:	4b4d      	ldr	r3, [pc, #308]	; (800a664 <_dtoa_r+0x5f4>)
 800a52e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a532:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d047      	beq.n	800a5cc <_dtoa_r+0x55c>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	2000      	movs	r0, #0
 800a542:	494e      	ldr	r1, [pc, #312]	; (800a67c <_dtoa_r+0x60c>)
 800a544:	f7f6 f9a2 	bl	800088c <__aeabi_ddiv>
 800a548:	462a      	mov	r2, r5
 800a54a:	4633      	mov	r3, r6
 800a54c:	f7f5 febc 	bl	80002c8 <__aeabi_dsub>
 800a550:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a554:	465d      	mov	r5, fp
 800a556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a55a:	f7f6 fb1d 	bl	8000b98 <__aeabi_d2iz>
 800a55e:	4606      	mov	r6, r0
 800a560:	f7f6 f800 	bl	8000564 <__aeabi_i2d>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a56c:	f7f5 feac 	bl	80002c8 <__aeabi_dsub>
 800a570:	3630      	adds	r6, #48	; 0x30
 800a572:	f805 6b01 	strb.w	r6, [r5], #1
 800a576:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a57a:	e9cd 0100 	strd	r0, r1, [sp]
 800a57e:	f7f6 facd 	bl	8000b1c <__aeabi_dcmplt>
 800a582:	2800      	cmp	r0, #0
 800a584:	d163      	bne.n	800a64e <_dtoa_r+0x5de>
 800a586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a58a:	2000      	movs	r0, #0
 800a58c:	4937      	ldr	r1, [pc, #220]	; (800a66c <_dtoa_r+0x5fc>)
 800a58e:	f7f5 fe9b 	bl	80002c8 <__aeabi_dsub>
 800a592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a596:	f7f6 fac1 	bl	8000b1c <__aeabi_dcmplt>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f040 80b7 	bne.w	800a70e <_dtoa_r+0x69e>
 800a5a0:	eba5 030b 	sub.w	r3, r5, fp
 800a5a4:	429f      	cmp	r7, r3
 800a5a6:	f77f af7c 	ble.w	800a4a2 <_dtoa_r+0x432>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4b30      	ldr	r3, [pc, #192]	; (800a670 <_dtoa_r+0x600>)
 800a5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5b2:	f7f6 f841 	bl	8000638 <__aeabi_dmul>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5bc:	4b2c      	ldr	r3, [pc, #176]	; (800a670 <_dtoa_r+0x600>)
 800a5be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5c2:	f7f6 f839 	bl	8000638 <__aeabi_dmul>
 800a5c6:	e9cd 0100 	strd	r0, r1, [sp]
 800a5ca:	e7c4      	b.n	800a556 <_dtoa_r+0x4e6>
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	4633      	mov	r3, r6
 800a5d0:	f7f6 f832 	bl	8000638 <__aeabi_dmul>
 800a5d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5d8:	eb0b 0507 	add.w	r5, fp, r7
 800a5dc:	465e      	mov	r6, fp
 800a5de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5e2:	f7f6 fad9 	bl	8000b98 <__aeabi_d2iz>
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	f7f5 ffbc 	bl	8000564 <__aeabi_i2d>
 800a5ec:	3730      	adds	r7, #48	; 0x30
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5f6:	f7f5 fe67 	bl	80002c8 <__aeabi_dsub>
 800a5fa:	f806 7b01 	strb.w	r7, [r6], #1
 800a5fe:	42ae      	cmp	r6, r5
 800a600:	e9cd 0100 	strd	r0, r1, [sp]
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	d126      	bne.n	800a658 <_dtoa_r+0x5e8>
 800a60a:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <_dtoa_r+0x60c>)
 800a60c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a610:	f7f5 fe5c 	bl	80002cc <__adddf3>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a61c:	f7f6 fa9c 	bl	8000b58 <__aeabi_dcmpgt>
 800a620:	2800      	cmp	r0, #0
 800a622:	d174      	bne.n	800a70e <_dtoa_r+0x69e>
 800a624:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a628:	2000      	movs	r0, #0
 800a62a:	4914      	ldr	r1, [pc, #80]	; (800a67c <_dtoa_r+0x60c>)
 800a62c:	f7f5 fe4c 	bl	80002c8 <__aeabi_dsub>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a638:	f7f6 fa70 	bl	8000b1c <__aeabi_dcmplt>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f43f af30 	beq.w	800a4a2 <_dtoa_r+0x432>
 800a642:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a646:	2b30      	cmp	r3, #48	; 0x30
 800a648:	f105 32ff 	add.w	r2, r5, #4294967295
 800a64c:	d002      	beq.n	800a654 <_dtoa_r+0x5e4>
 800a64e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a652:	e04a      	b.n	800a6ea <_dtoa_r+0x67a>
 800a654:	4615      	mov	r5, r2
 800a656:	e7f4      	b.n	800a642 <_dtoa_r+0x5d2>
 800a658:	4b05      	ldr	r3, [pc, #20]	; (800a670 <_dtoa_r+0x600>)
 800a65a:	f7f5 ffed 	bl	8000638 <__aeabi_dmul>
 800a65e:	e9cd 0100 	strd	r0, r1, [sp]
 800a662:	e7bc      	b.n	800a5de <_dtoa_r+0x56e>
 800a664:	0800c8a8 	.word	0x0800c8a8
 800a668:	0800c880 	.word	0x0800c880
 800a66c:	3ff00000 	.word	0x3ff00000
 800a670:	40240000 	.word	0x40240000
 800a674:	401c0000 	.word	0x401c0000
 800a678:	40140000 	.word	0x40140000
 800a67c:	3fe00000 	.word	0x3fe00000
 800a680:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a684:	465d      	mov	r5, fp
 800a686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f6 f8fd 	bl	800088c <__aeabi_ddiv>
 800a692:	f7f6 fa81 	bl	8000b98 <__aeabi_d2iz>
 800a696:	4680      	mov	r8, r0
 800a698:	f7f5 ff64 	bl	8000564 <__aeabi_i2d>
 800a69c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6a0:	f7f5 ffca 	bl	8000638 <__aeabi_dmul>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a6b0:	f7f5 fe0a 	bl	80002c8 <__aeabi_dsub>
 800a6b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6b8:	eba5 060b 	sub.w	r6, r5, fp
 800a6bc:	45b1      	cmp	r9, r6
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	d139      	bne.n	800a738 <_dtoa_r+0x6c8>
 800a6c4:	f7f5 fe02 	bl	80002cc <__adddf3>
 800a6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	f7f6 fa42 	bl	8000b58 <__aeabi_dcmpgt>
 800a6d4:	b9c8      	cbnz	r0, 800a70a <_dtoa_r+0x69a>
 800a6d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6da:	4630      	mov	r0, r6
 800a6dc:	4639      	mov	r1, r7
 800a6de:	f7f6 fa13 	bl	8000b08 <__aeabi_dcmpeq>
 800a6e2:	b110      	cbz	r0, 800a6ea <_dtoa_r+0x67a>
 800a6e4:	f018 0f01 	tst.w	r8, #1
 800a6e8:	d10f      	bne.n	800a70a <_dtoa_r+0x69a>
 800a6ea:	9904      	ldr	r1, [sp, #16]
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 fe0a 	bl	800b306 <_Bfree>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6f6:	702b      	strb	r3, [r5, #0]
 800a6f8:	f10a 0301 	add.w	r3, sl, #1
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 8241 	beq.w	800ab88 <_dtoa_r+0xb18>
 800a706:	601d      	str	r5, [r3, #0]
 800a708:	e23e      	b.n	800ab88 <_dtoa_r+0xb18>
 800a70a:	f8cd a020 	str.w	sl, [sp, #32]
 800a70e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a712:	2a39      	cmp	r2, #57	; 0x39
 800a714:	f105 33ff 	add.w	r3, r5, #4294967295
 800a718:	d108      	bne.n	800a72c <_dtoa_r+0x6bc>
 800a71a:	459b      	cmp	fp, r3
 800a71c:	d10a      	bne.n	800a734 <_dtoa_r+0x6c4>
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	3301      	adds	r3, #1
 800a722:	9308      	str	r3, [sp, #32]
 800a724:	2330      	movs	r3, #48	; 0x30
 800a726:	f88b 3000 	strb.w	r3, [fp]
 800a72a:	465b      	mov	r3, fp
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	3201      	adds	r2, #1
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	e78c      	b.n	800a64e <_dtoa_r+0x5de>
 800a734:	461d      	mov	r5, r3
 800a736:	e7ea      	b.n	800a70e <_dtoa_r+0x69e>
 800a738:	2200      	movs	r2, #0
 800a73a:	4b9b      	ldr	r3, [pc, #620]	; (800a9a8 <_dtoa_r+0x938>)
 800a73c:	f7f5 ff7c 	bl	8000638 <__aeabi_dmul>
 800a740:	2200      	movs	r2, #0
 800a742:	2300      	movs	r3, #0
 800a744:	4606      	mov	r6, r0
 800a746:	460f      	mov	r7, r1
 800a748:	f7f6 f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d09a      	beq.n	800a686 <_dtoa_r+0x616>
 800a750:	e7cb      	b.n	800a6ea <_dtoa_r+0x67a>
 800a752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a754:	2a00      	cmp	r2, #0
 800a756:	f000 808b 	beq.w	800a870 <_dtoa_r+0x800>
 800a75a:	9a06      	ldr	r2, [sp, #24]
 800a75c:	2a01      	cmp	r2, #1
 800a75e:	dc6e      	bgt.n	800a83e <_dtoa_r+0x7ce>
 800a760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a762:	2a00      	cmp	r2, #0
 800a764:	d067      	beq.n	800a836 <_dtoa_r+0x7c6>
 800a766:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a76a:	9f07      	ldr	r7, [sp, #28]
 800a76c:	9d05      	ldr	r5, [sp, #20]
 800a76e:	9a05      	ldr	r2, [sp, #20]
 800a770:	2101      	movs	r1, #1
 800a772:	441a      	add	r2, r3
 800a774:	4620      	mov	r0, r4
 800a776:	9205      	str	r2, [sp, #20]
 800a778:	4498      	add	r8, r3
 800a77a:	f000 fea2 	bl	800b4c2 <__i2b>
 800a77e:	4606      	mov	r6, r0
 800a780:	2d00      	cmp	r5, #0
 800a782:	dd0c      	ble.n	800a79e <_dtoa_r+0x72e>
 800a784:	f1b8 0f00 	cmp.w	r8, #0
 800a788:	dd09      	ble.n	800a79e <_dtoa_r+0x72e>
 800a78a:	4545      	cmp	r5, r8
 800a78c:	9a05      	ldr	r2, [sp, #20]
 800a78e:	462b      	mov	r3, r5
 800a790:	bfa8      	it	ge
 800a792:	4643      	movge	r3, r8
 800a794:	1ad2      	subs	r2, r2, r3
 800a796:	9205      	str	r2, [sp, #20]
 800a798:	1aed      	subs	r5, r5, r3
 800a79a:	eba8 0803 	sub.w	r8, r8, r3
 800a79e:	9b07      	ldr	r3, [sp, #28]
 800a7a0:	b1eb      	cbz	r3, 800a7de <_dtoa_r+0x76e>
 800a7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d067      	beq.n	800a878 <_dtoa_r+0x808>
 800a7a8:	b18f      	cbz	r7, 800a7ce <_dtoa_r+0x75e>
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	463a      	mov	r2, r7
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 ff26 	bl	800b600 <__pow5mult>
 800a7b4:	9a04      	ldr	r2, [sp, #16]
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fe8a 	bl	800b4d4 <__multiply>
 800a7c0:	9904      	ldr	r1, [sp, #16]
 800a7c2:	9008      	str	r0, [sp, #32]
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fd9e 	bl	800b306 <_Bfree>
 800a7ca:	9b08      	ldr	r3, [sp, #32]
 800a7cc:	9304      	str	r3, [sp, #16]
 800a7ce:	9b07      	ldr	r3, [sp, #28]
 800a7d0:	1bda      	subs	r2, r3, r7
 800a7d2:	d004      	beq.n	800a7de <_dtoa_r+0x76e>
 800a7d4:	9904      	ldr	r1, [sp, #16]
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 ff12 	bl	800b600 <__pow5mult>
 800a7dc:	9004      	str	r0, [sp, #16]
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 fe6e 	bl	800b4c2 <__i2b>
 800a7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 81d0 	beq.w	800ab90 <_dtoa_r+0xb20>
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 ff03 	bl	800b600 <__pow5mult>
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	4607      	mov	r7, r0
 800a800:	dc40      	bgt.n	800a884 <_dtoa_r+0x814>
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d139      	bne.n	800a87c <_dtoa_r+0x80c>
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d136      	bne.n	800a880 <_dtoa_r+0x810>
 800a812:	9b01      	ldr	r3, [sp, #4]
 800a814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a818:	0d1b      	lsrs	r3, r3, #20
 800a81a:	051b      	lsls	r3, r3, #20
 800a81c:	b12b      	cbz	r3, 800a82a <_dtoa_r+0x7ba>
 800a81e:	9b05      	ldr	r3, [sp, #20]
 800a820:	3301      	adds	r3, #1
 800a822:	9305      	str	r3, [sp, #20]
 800a824:	f108 0801 	add.w	r8, r8, #1
 800a828:	2301      	movs	r3, #1
 800a82a:	9307      	str	r3, [sp, #28]
 800a82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d12a      	bne.n	800a888 <_dtoa_r+0x818>
 800a832:	2001      	movs	r0, #1
 800a834:	e030      	b.n	800a898 <_dtoa_r+0x828>
 800a836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a838:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a83c:	e795      	b.n	800a76a <_dtoa_r+0x6fa>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	f109 37ff 	add.w	r7, r9, #4294967295
 800a844:	42bb      	cmp	r3, r7
 800a846:	bfbf      	itttt	lt
 800a848:	9b07      	ldrlt	r3, [sp, #28]
 800a84a:	9707      	strlt	r7, [sp, #28]
 800a84c:	1afa      	sublt	r2, r7, r3
 800a84e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a850:	bfbb      	ittet	lt
 800a852:	189b      	addlt	r3, r3, r2
 800a854:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a856:	1bdf      	subge	r7, r3, r7
 800a858:	2700      	movlt	r7, #0
 800a85a:	f1b9 0f00 	cmp.w	r9, #0
 800a85e:	bfb5      	itete	lt
 800a860:	9b05      	ldrlt	r3, [sp, #20]
 800a862:	9d05      	ldrge	r5, [sp, #20]
 800a864:	eba3 0509 	sublt.w	r5, r3, r9
 800a868:	464b      	movge	r3, r9
 800a86a:	bfb8      	it	lt
 800a86c:	2300      	movlt	r3, #0
 800a86e:	e77e      	b.n	800a76e <_dtoa_r+0x6fe>
 800a870:	9f07      	ldr	r7, [sp, #28]
 800a872:	9d05      	ldr	r5, [sp, #20]
 800a874:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a876:	e783      	b.n	800a780 <_dtoa_r+0x710>
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	e7ab      	b.n	800a7d4 <_dtoa_r+0x764>
 800a87c:	2300      	movs	r3, #0
 800a87e:	e7d4      	b.n	800a82a <_dtoa_r+0x7ba>
 800a880:	9b00      	ldr	r3, [sp, #0]
 800a882:	e7d2      	b.n	800a82a <_dtoa_r+0x7ba>
 800a884:	2300      	movs	r3, #0
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a88e:	6918      	ldr	r0, [r3, #16]
 800a890:	f000 fdc9 	bl	800b426 <__hi0bits>
 800a894:	f1c0 0020 	rsb	r0, r0, #32
 800a898:	4440      	add	r0, r8
 800a89a:	f010 001f 	ands.w	r0, r0, #31
 800a89e:	d047      	beq.n	800a930 <_dtoa_r+0x8c0>
 800a8a0:	f1c0 0320 	rsb	r3, r0, #32
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	dd3b      	ble.n	800a920 <_dtoa_r+0x8b0>
 800a8a8:	9b05      	ldr	r3, [sp, #20]
 800a8aa:	f1c0 001c 	rsb	r0, r0, #28
 800a8ae:	4403      	add	r3, r0
 800a8b0:	9305      	str	r3, [sp, #20]
 800a8b2:	4405      	add	r5, r0
 800a8b4:	4480      	add	r8, r0
 800a8b6:	9b05      	ldr	r3, [sp, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dd05      	ble.n	800a8c8 <_dtoa_r+0x858>
 800a8bc:	461a      	mov	r2, r3
 800a8be:	9904      	ldr	r1, [sp, #16]
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 feeb 	bl	800b69c <__lshift>
 800a8c6:	9004      	str	r0, [sp, #16]
 800a8c8:	f1b8 0f00 	cmp.w	r8, #0
 800a8cc:	dd05      	ble.n	800a8da <_dtoa_r+0x86a>
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 fee2 	bl	800b69c <__lshift>
 800a8d8:	4607      	mov	r7, r0
 800a8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8dc:	b353      	cbz	r3, 800a934 <_dtoa_r+0x8c4>
 800a8de:	4639      	mov	r1, r7
 800a8e0:	9804      	ldr	r0, [sp, #16]
 800a8e2:	f000 ff2f 	bl	800b744 <__mcmp>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	da24      	bge.n	800a934 <_dtoa_r+0x8c4>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	9904      	ldr	r1, [sp, #16]
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 fd1f 	bl	800b334 <__multadd>
 800a8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f8:	9004      	str	r0, [sp, #16]
 800a8fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 814d 	beq.w	800ab9e <_dtoa_r+0xb2e>
 800a904:	2300      	movs	r3, #0
 800a906:	4631      	mov	r1, r6
 800a908:	220a      	movs	r2, #10
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 fd12 	bl	800b334 <__multadd>
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	4606      	mov	r6, r0
 800a916:	dc4f      	bgt.n	800a9b8 <_dtoa_r+0x948>
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	dd4c      	ble.n	800a9b8 <_dtoa_r+0x948>
 800a91e:	e011      	b.n	800a944 <_dtoa_r+0x8d4>
 800a920:	d0c9      	beq.n	800a8b6 <_dtoa_r+0x846>
 800a922:	9a05      	ldr	r2, [sp, #20]
 800a924:	331c      	adds	r3, #28
 800a926:	441a      	add	r2, r3
 800a928:	9205      	str	r2, [sp, #20]
 800a92a:	441d      	add	r5, r3
 800a92c:	4498      	add	r8, r3
 800a92e:	e7c2      	b.n	800a8b6 <_dtoa_r+0x846>
 800a930:	4603      	mov	r3, r0
 800a932:	e7f6      	b.n	800a922 <_dtoa_r+0x8b2>
 800a934:	f1b9 0f00 	cmp.w	r9, #0
 800a938:	dc38      	bgt.n	800a9ac <_dtoa_r+0x93c>
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	dd35      	ble.n	800a9ac <_dtoa_r+0x93c>
 800a940:	f8cd 9008 	str.w	r9, [sp, #8]
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	b963      	cbnz	r3, 800a962 <_dtoa_r+0x8f2>
 800a948:	4639      	mov	r1, r7
 800a94a:	2205      	movs	r2, #5
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fcf1 	bl	800b334 <__multadd>
 800a952:	4601      	mov	r1, r0
 800a954:	4607      	mov	r7, r0
 800a956:	9804      	ldr	r0, [sp, #16]
 800a958:	f000 fef4 	bl	800b744 <__mcmp>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f73f adcc 	bgt.w	800a4fa <_dtoa_r+0x48a>
 800a962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a964:	465d      	mov	r5, fp
 800a966:	ea6f 0a03 	mvn.w	sl, r3
 800a96a:	f04f 0900 	mov.w	r9, #0
 800a96e:	4639      	mov	r1, r7
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fcc8 	bl	800b306 <_Bfree>
 800a976:	2e00      	cmp	r6, #0
 800a978:	f43f aeb7 	beq.w	800a6ea <_dtoa_r+0x67a>
 800a97c:	f1b9 0f00 	cmp.w	r9, #0
 800a980:	d005      	beq.n	800a98e <_dtoa_r+0x91e>
 800a982:	45b1      	cmp	r9, r6
 800a984:	d003      	beq.n	800a98e <_dtoa_r+0x91e>
 800a986:	4649      	mov	r1, r9
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fcbc 	bl	800b306 <_Bfree>
 800a98e:	4631      	mov	r1, r6
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fcb8 	bl	800b306 <_Bfree>
 800a996:	e6a8      	b.n	800a6ea <_dtoa_r+0x67a>
 800a998:	2700      	movs	r7, #0
 800a99a:	463e      	mov	r6, r7
 800a99c:	e7e1      	b.n	800a962 <_dtoa_r+0x8f2>
 800a99e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a9a2:	463e      	mov	r6, r7
 800a9a4:	e5a9      	b.n	800a4fa <_dtoa_r+0x48a>
 800a9a6:	bf00      	nop
 800a9a8:	40240000 	.word	0x40240000
 800a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 80fa 	beq.w	800abac <_dtoa_r+0xb3c>
 800a9b8:	2d00      	cmp	r5, #0
 800a9ba:	dd05      	ble.n	800a9c8 <_dtoa_r+0x958>
 800a9bc:	4631      	mov	r1, r6
 800a9be:	462a      	mov	r2, r5
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fe6b 	bl	800b69c <__lshift>
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	9b07      	ldr	r3, [sp, #28]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d04c      	beq.n	800aa68 <_dtoa_r+0x9f8>
 800a9ce:	6871      	ldr	r1, [r6, #4]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fc64 	bl	800b29e <_Balloc>
 800a9d6:	6932      	ldr	r2, [r6, #16]
 800a9d8:	3202      	adds	r2, #2
 800a9da:	4605      	mov	r5, r0
 800a9dc:	0092      	lsls	r2, r2, #2
 800a9de:	f106 010c 	add.w	r1, r6, #12
 800a9e2:	300c      	adds	r0, #12
 800a9e4:	f000 fc50 	bl	800b288 <memcpy>
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fe55 	bl	800b69c <__lshift>
 800a9f2:	9b00      	ldr	r3, [sp, #0]
 800a9f4:	f8cd b014 	str.w	fp, [sp, #20]
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	46b1      	mov	r9, r6
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	4606      	mov	r6, r0
 800aa02:	4639      	mov	r1, r7
 800aa04:	9804      	ldr	r0, [sp, #16]
 800aa06:	f7ff faa5 	bl	8009f54 <quorem>
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aa12:	9804      	ldr	r0, [sp, #16]
 800aa14:	f000 fe96 	bl	800b744 <__mcmp>
 800aa18:	4632      	mov	r2, r6
 800aa1a:	9000      	str	r0, [sp, #0]
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 feaa 	bl	800b778 <__mdiff>
 800aa24:	68c3      	ldr	r3, [r0, #12]
 800aa26:	4602      	mov	r2, r0
 800aa28:	bb03      	cbnz	r3, 800aa6c <_dtoa_r+0x9fc>
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	9008      	str	r0, [sp, #32]
 800aa2e:	9804      	ldr	r0, [sp, #16]
 800aa30:	f000 fe88 	bl	800b744 <__mcmp>
 800aa34:	9a08      	ldr	r2, [sp, #32]
 800aa36:	4603      	mov	r3, r0
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	9308      	str	r3, [sp, #32]
 800aa3e:	f000 fc62 	bl	800b306 <_Bfree>
 800aa42:	9b08      	ldr	r3, [sp, #32]
 800aa44:	b9a3      	cbnz	r3, 800aa70 <_dtoa_r+0xa00>
 800aa46:	9a06      	ldr	r2, [sp, #24]
 800aa48:	b992      	cbnz	r2, 800aa70 <_dtoa_r+0xa00>
 800aa4a:	9a07      	ldr	r2, [sp, #28]
 800aa4c:	b982      	cbnz	r2, 800aa70 <_dtoa_r+0xa00>
 800aa4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa52:	d029      	beq.n	800aaa8 <_dtoa_r+0xa38>
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dd01      	ble.n	800aa5e <_dtoa_r+0x9ee>
 800aa5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aa5e:	9b05      	ldr	r3, [sp, #20]
 800aa60:	1c5d      	adds	r5, r3, #1
 800aa62:	f883 8000 	strb.w	r8, [r3]
 800aa66:	e782      	b.n	800a96e <_dtoa_r+0x8fe>
 800aa68:	4630      	mov	r0, r6
 800aa6a:	e7c2      	b.n	800a9f2 <_dtoa_r+0x982>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e7e3      	b.n	800aa38 <_dtoa_r+0x9c8>
 800aa70:	9a00      	ldr	r2, [sp, #0]
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	db04      	blt.n	800aa80 <_dtoa_r+0xa10>
 800aa76:	d125      	bne.n	800aac4 <_dtoa_r+0xa54>
 800aa78:	9a06      	ldr	r2, [sp, #24]
 800aa7a:	bb1a      	cbnz	r2, 800aac4 <_dtoa_r+0xa54>
 800aa7c:	9a07      	ldr	r2, [sp, #28]
 800aa7e:	bb0a      	cbnz	r2, 800aac4 <_dtoa_r+0xa54>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	ddec      	ble.n	800aa5e <_dtoa_r+0x9ee>
 800aa84:	2201      	movs	r2, #1
 800aa86:	9904      	ldr	r1, [sp, #16]
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 fe07 	bl	800b69c <__lshift>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	9004      	str	r0, [sp, #16]
 800aa92:	f000 fe57 	bl	800b744 <__mcmp>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	dc03      	bgt.n	800aaa2 <_dtoa_r+0xa32>
 800aa9a:	d1e0      	bne.n	800aa5e <_dtoa_r+0x9ee>
 800aa9c:	f018 0f01 	tst.w	r8, #1
 800aaa0:	d0dd      	beq.n	800aa5e <_dtoa_r+0x9ee>
 800aaa2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aaa6:	d1d8      	bne.n	800aa5a <_dtoa_r+0x9ea>
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	9a05      	ldr	r2, [sp, #20]
 800aaac:	1c5d      	adds	r5, r3, #1
 800aaae:	2339      	movs	r3, #57	; 0x39
 800aab0:	7013      	strb	r3, [r2, #0]
 800aab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aab6:	2b39      	cmp	r3, #57	; 0x39
 800aab8:	f105 32ff 	add.w	r2, r5, #4294967295
 800aabc:	d04f      	beq.n	800ab5e <_dtoa_r+0xaee>
 800aabe:	3301      	adds	r3, #1
 800aac0:	7013      	strb	r3, [r2, #0]
 800aac2:	e754      	b.n	800a96e <_dtoa_r+0x8fe>
 800aac4:	9a05      	ldr	r2, [sp, #20]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f102 0501 	add.w	r5, r2, #1
 800aacc:	dd06      	ble.n	800aadc <_dtoa_r+0xa6c>
 800aace:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aad2:	d0e9      	beq.n	800aaa8 <_dtoa_r+0xa38>
 800aad4:	f108 0801 	add.w	r8, r8, #1
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	e7c2      	b.n	800aa62 <_dtoa_r+0x9f2>
 800aadc:	9a02      	ldr	r2, [sp, #8]
 800aade:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aae2:	eba5 030b 	sub.w	r3, r5, fp
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d021      	beq.n	800ab2e <_dtoa_r+0xabe>
 800aaea:	2300      	movs	r3, #0
 800aaec:	220a      	movs	r2, #10
 800aaee:	9904      	ldr	r1, [sp, #16]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fc1f 	bl	800b334 <__multadd>
 800aaf6:	45b1      	cmp	r9, r6
 800aaf8:	9004      	str	r0, [sp, #16]
 800aafa:	f04f 0300 	mov.w	r3, #0
 800aafe:	f04f 020a 	mov.w	r2, #10
 800ab02:	4649      	mov	r1, r9
 800ab04:	4620      	mov	r0, r4
 800ab06:	d105      	bne.n	800ab14 <_dtoa_r+0xaa4>
 800ab08:	f000 fc14 	bl	800b334 <__multadd>
 800ab0c:	4681      	mov	r9, r0
 800ab0e:	4606      	mov	r6, r0
 800ab10:	9505      	str	r5, [sp, #20]
 800ab12:	e776      	b.n	800aa02 <_dtoa_r+0x992>
 800ab14:	f000 fc0e 	bl	800b334 <__multadd>
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4681      	mov	r9, r0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	220a      	movs	r2, #10
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 fc07 	bl	800b334 <__multadd>
 800ab26:	4606      	mov	r6, r0
 800ab28:	e7f2      	b.n	800ab10 <_dtoa_r+0xaa0>
 800ab2a:	f04f 0900 	mov.w	r9, #0
 800ab2e:	2201      	movs	r2, #1
 800ab30:	9904      	ldr	r1, [sp, #16]
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fdb2 	bl	800b69c <__lshift>
 800ab38:	4639      	mov	r1, r7
 800ab3a:	9004      	str	r0, [sp, #16]
 800ab3c:	f000 fe02 	bl	800b744 <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dcb6      	bgt.n	800aab2 <_dtoa_r+0xa42>
 800ab44:	d102      	bne.n	800ab4c <_dtoa_r+0xadc>
 800ab46:	f018 0f01 	tst.w	r8, #1
 800ab4a:	d1b2      	bne.n	800aab2 <_dtoa_r+0xa42>
 800ab4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab50:	2b30      	cmp	r3, #48	; 0x30
 800ab52:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab56:	f47f af0a 	bne.w	800a96e <_dtoa_r+0x8fe>
 800ab5a:	4615      	mov	r5, r2
 800ab5c:	e7f6      	b.n	800ab4c <_dtoa_r+0xadc>
 800ab5e:	4593      	cmp	fp, r2
 800ab60:	d105      	bne.n	800ab6e <_dtoa_r+0xafe>
 800ab62:	2331      	movs	r3, #49	; 0x31
 800ab64:	f10a 0a01 	add.w	sl, sl, #1
 800ab68:	f88b 3000 	strb.w	r3, [fp]
 800ab6c:	e6ff      	b.n	800a96e <_dtoa_r+0x8fe>
 800ab6e:	4615      	mov	r5, r2
 800ab70:	e79f      	b.n	800aab2 <_dtoa_r+0xa42>
 800ab72:	f8df b064 	ldr.w	fp, [pc, #100]	; 800abd8 <_dtoa_r+0xb68>
 800ab76:	e007      	b.n	800ab88 <_dtoa_r+0xb18>
 800ab78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800abdc <_dtoa_r+0xb6c>
 800ab7e:	b11b      	cbz	r3, 800ab88 <_dtoa_r+0xb18>
 800ab80:	f10b 0308 	add.w	r3, fp, #8
 800ab84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	4658      	mov	r0, fp
 800ab8a:	b017      	add	sp, #92	; 0x5c
 800ab8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab90:	9b06      	ldr	r3, [sp, #24]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	f77f ae35 	ble.w	800a802 <_dtoa_r+0x792>
 800ab98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab9a:	9307      	str	r3, [sp, #28]
 800ab9c:	e649      	b.n	800a832 <_dtoa_r+0x7c2>
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	dc03      	bgt.n	800abac <_dtoa_r+0xb3c>
 800aba4:	9b06      	ldr	r3, [sp, #24]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	f73f aecc 	bgt.w	800a944 <_dtoa_r+0x8d4>
 800abac:	465d      	mov	r5, fp
 800abae:	4639      	mov	r1, r7
 800abb0:	9804      	ldr	r0, [sp, #16]
 800abb2:	f7ff f9cf 	bl	8009f54 <quorem>
 800abb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800abba:	f805 8b01 	strb.w	r8, [r5], #1
 800abbe:	9a02      	ldr	r2, [sp, #8]
 800abc0:	eba5 030b 	sub.w	r3, r5, fp
 800abc4:	429a      	cmp	r2, r3
 800abc6:	ddb0      	ble.n	800ab2a <_dtoa_r+0xaba>
 800abc8:	2300      	movs	r3, #0
 800abca:	220a      	movs	r2, #10
 800abcc:	9904      	ldr	r1, [sp, #16]
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 fbb0 	bl	800b334 <__multadd>
 800abd4:	9004      	str	r0, [sp, #16]
 800abd6:	e7ea      	b.n	800abae <_dtoa_r+0xb3e>
 800abd8:	0800c7ec 	.word	0x0800c7ec
 800abdc:	0800c868 	.word	0x0800c868

0800abe0 <rshift>:
 800abe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe2:	6906      	ldr	r6, [r0, #16]
 800abe4:	114b      	asrs	r3, r1, #5
 800abe6:	429e      	cmp	r6, r3
 800abe8:	f100 0414 	add.w	r4, r0, #20
 800abec:	dd30      	ble.n	800ac50 <rshift+0x70>
 800abee:	f011 011f 	ands.w	r1, r1, #31
 800abf2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800abf6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800abfa:	d108      	bne.n	800ac0e <rshift+0x2e>
 800abfc:	4621      	mov	r1, r4
 800abfe:	42b2      	cmp	r2, r6
 800ac00:	460b      	mov	r3, r1
 800ac02:	d211      	bcs.n	800ac28 <rshift+0x48>
 800ac04:	f852 3b04 	ldr.w	r3, [r2], #4
 800ac08:	f841 3b04 	str.w	r3, [r1], #4
 800ac0c:	e7f7      	b.n	800abfe <rshift+0x1e>
 800ac0e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ac12:	f1c1 0c20 	rsb	ip, r1, #32
 800ac16:	40cd      	lsrs	r5, r1
 800ac18:	3204      	adds	r2, #4
 800ac1a:	4623      	mov	r3, r4
 800ac1c:	42b2      	cmp	r2, r6
 800ac1e:	4617      	mov	r7, r2
 800ac20:	d30c      	bcc.n	800ac3c <rshift+0x5c>
 800ac22:	601d      	str	r5, [r3, #0]
 800ac24:	b105      	cbz	r5, 800ac28 <rshift+0x48>
 800ac26:	3304      	adds	r3, #4
 800ac28:	1b1a      	subs	r2, r3, r4
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac30:	bf08      	it	eq
 800ac32:	2300      	moveq	r3, #0
 800ac34:	6102      	str	r2, [r0, #16]
 800ac36:	bf08      	it	eq
 800ac38:	6143      	streq	r3, [r0, #20]
 800ac3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac3c:	683f      	ldr	r7, [r7, #0]
 800ac3e:	fa07 f70c 	lsl.w	r7, r7, ip
 800ac42:	433d      	orrs	r5, r7
 800ac44:	f843 5b04 	str.w	r5, [r3], #4
 800ac48:	f852 5b04 	ldr.w	r5, [r2], #4
 800ac4c:	40cd      	lsrs	r5, r1
 800ac4e:	e7e5      	b.n	800ac1c <rshift+0x3c>
 800ac50:	4623      	mov	r3, r4
 800ac52:	e7e9      	b.n	800ac28 <rshift+0x48>

0800ac54 <__hexdig_fun>:
 800ac54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac58:	2b09      	cmp	r3, #9
 800ac5a:	d802      	bhi.n	800ac62 <__hexdig_fun+0xe>
 800ac5c:	3820      	subs	r0, #32
 800ac5e:	b2c0      	uxtb	r0, r0
 800ac60:	4770      	bx	lr
 800ac62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	d801      	bhi.n	800ac6e <__hexdig_fun+0x1a>
 800ac6a:	3847      	subs	r0, #71	; 0x47
 800ac6c:	e7f7      	b.n	800ac5e <__hexdig_fun+0xa>
 800ac6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	d801      	bhi.n	800ac7a <__hexdig_fun+0x26>
 800ac76:	3827      	subs	r0, #39	; 0x27
 800ac78:	e7f1      	b.n	800ac5e <__hexdig_fun+0xa>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	4770      	bx	lr

0800ac7e <__gethex>:
 800ac7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac82:	b08b      	sub	sp, #44	; 0x2c
 800ac84:	468a      	mov	sl, r1
 800ac86:	9002      	str	r0, [sp, #8]
 800ac88:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ac8a:	9306      	str	r3, [sp, #24]
 800ac8c:	4690      	mov	r8, r2
 800ac8e:	f000 fad0 	bl	800b232 <__localeconv_l>
 800ac92:	6803      	ldr	r3, [r0, #0]
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f5 faba 	bl	8000210 <strlen>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	9001      	str	r0, [sp, #4]
 800aca0:	4403      	add	r3, r0
 800aca2:	f04f 0b00 	mov.w	fp, #0
 800aca6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800acaa:	9307      	str	r3, [sp, #28]
 800acac:	f8da 3000 	ldr.w	r3, [sl]
 800acb0:	3302      	adds	r3, #2
 800acb2:	461f      	mov	r7, r3
 800acb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acb8:	2830      	cmp	r0, #48	; 0x30
 800acba:	d06c      	beq.n	800ad96 <__gethex+0x118>
 800acbc:	f7ff ffca 	bl	800ac54 <__hexdig_fun>
 800acc0:	4604      	mov	r4, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d16a      	bne.n	800ad9c <__gethex+0x11e>
 800acc6:	9a01      	ldr	r2, [sp, #4]
 800acc8:	9903      	ldr	r1, [sp, #12]
 800acca:	4638      	mov	r0, r7
 800accc:	f001 f8fe 	bl	800becc <strncmp>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d166      	bne.n	800ada2 <__gethex+0x124>
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	5cf8      	ldrb	r0, [r7, r3]
 800acd8:	18fe      	adds	r6, r7, r3
 800acda:	f7ff ffbb 	bl	800ac54 <__hexdig_fun>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d062      	beq.n	800ada8 <__gethex+0x12a>
 800ace2:	4633      	mov	r3, r6
 800ace4:	7818      	ldrb	r0, [r3, #0]
 800ace6:	2830      	cmp	r0, #48	; 0x30
 800ace8:	461f      	mov	r7, r3
 800acea:	f103 0301 	add.w	r3, r3, #1
 800acee:	d0f9      	beq.n	800ace4 <__gethex+0x66>
 800acf0:	f7ff ffb0 	bl	800ac54 <__hexdig_fun>
 800acf4:	fab0 f580 	clz	r5, r0
 800acf8:	096d      	lsrs	r5, r5, #5
 800acfa:	4634      	mov	r4, r6
 800acfc:	f04f 0b01 	mov.w	fp, #1
 800ad00:	463a      	mov	r2, r7
 800ad02:	4616      	mov	r6, r2
 800ad04:	3201      	adds	r2, #1
 800ad06:	7830      	ldrb	r0, [r6, #0]
 800ad08:	f7ff ffa4 	bl	800ac54 <__hexdig_fun>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	d1f8      	bne.n	800ad02 <__gethex+0x84>
 800ad10:	9a01      	ldr	r2, [sp, #4]
 800ad12:	9903      	ldr	r1, [sp, #12]
 800ad14:	4630      	mov	r0, r6
 800ad16:	f001 f8d9 	bl	800becc <strncmp>
 800ad1a:	b950      	cbnz	r0, 800ad32 <__gethex+0xb4>
 800ad1c:	b954      	cbnz	r4, 800ad34 <__gethex+0xb6>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	18f4      	adds	r4, r6, r3
 800ad22:	4622      	mov	r2, r4
 800ad24:	4616      	mov	r6, r2
 800ad26:	3201      	adds	r2, #1
 800ad28:	7830      	ldrb	r0, [r6, #0]
 800ad2a:	f7ff ff93 	bl	800ac54 <__hexdig_fun>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d1f8      	bne.n	800ad24 <__gethex+0xa6>
 800ad32:	b10c      	cbz	r4, 800ad38 <__gethex+0xba>
 800ad34:	1ba4      	subs	r4, r4, r6
 800ad36:	00a4      	lsls	r4, r4, #2
 800ad38:	7833      	ldrb	r3, [r6, #0]
 800ad3a:	2b50      	cmp	r3, #80	; 0x50
 800ad3c:	d001      	beq.n	800ad42 <__gethex+0xc4>
 800ad3e:	2b70      	cmp	r3, #112	; 0x70
 800ad40:	d140      	bne.n	800adc4 <__gethex+0x146>
 800ad42:	7873      	ldrb	r3, [r6, #1]
 800ad44:	2b2b      	cmp	r3, #43	; 0x2b
 800ad46:	d031      	beq.n	800adac <__gethex+0x12e>
 800ad48:	2b2d      	cmp	r3, #45	; 0x2d
 800ad4a:	d033      	beq.n	800adb4 <__gethex+0x136>
 800ad4c:	1c71      	adds	r1, r6, #1
 800ad4e:	f04f 0900 	mov.w	r9, #0
 800ad52:	7808      	ldrb	r0, [r1, #0]
 800ad54:	f7ff ff7e 	bl	800ac54 <__hexdig_fun>
 800ad58:	1e43      	subs	r3, r0, #1
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b18      	cmp	r3, #24
 800ad5e:	d831      	bhi.n	800adc4 <__gethex+0x146>
 800ad60:	f1a0 0210 	sub.w	r2, r0, #16
 800ad64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad68:	f7ff ff74 	bl	800ac54 <__hexdig_fun>
 800ad6c:	1e43      	subs	r3, r0, #1
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b18      	cmp	r3, #24
 800ad72:	d922      	bls.n	800adba <__gethex+0x13c>
 800ad74:	f1b9 0f00 	cmp.w	r9, #0
 800ad78:	d000      	beq.n	800ad7c <__gethex+0xfe>
 800ad7a:	4252      	negs	r2, r2
 800ad7c:	4414      	add	r4, r2
 800ad7e:	f8ca 1000 	str.w	r1, [sl]
 800ad82:	b30d      	cbz	r5, 800adc8 <__gethex+0x14a>
 800ad84:	f1bb 0f00 	cmp.w	fp, #0
 800ad88:	bf0c      	ite	eq
 800ad8a:	2706      	moveq	r7, #6
 800ad8c:	2700      	movne	r7, #0
 800ad8e:	4638      	mov	r0, r7
 800ad90:	b00b      	add	sp, #44	; 0x2c
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	f10b 0b01 	add.w	fp, fp, #1
 800ad9a:	e78a      	b.n	800acb2 <__gethex+0x34>
 800ad9c:	2500      	movs	r5, #0
 800ad9e:	462c      	mov	r4, r5
 800ada0:	e7ae      	b.n	800ad00 <__gethex+0x82>
 800ada2:	463e      	mov	r6, r7
 800ada4:	2501      	movs	r5, #1
 800ada6:	e7c7      	b.n	800ad38 <__gethex+0xba>
 800ada8:	4604      	mov	r4, r0
 800adaa:	e7fb      	b.n	800ada4 <__gethex+0x126>
 800adac:	f04f 0900 	mov.w	r9, #0
 800adb0:	1cb1      	adds	r1, r6, #2
 800adb2:	e7ce      	b.n	800ad52 <__gethex+0xd4>
 800adb4:	f04f 0901 	mov.w	r9, #1
 800adb8:	e7fa      	b.n	800adb0 <__gethex+0x132>
 800adba:	230a      	movs	r3, #10
 800adbc:	fb03 0202 	mla	r2, r3, r2, r0
 800adc0:	3a10      	subs	r2, #16
 800adc2:	e7cf      	b.n	800ad64 <__gethex+0xe6>
 800adc4:	4631      	mov	r1, r6
 800adc6:	e7da      	b.n	800ad7e <__gethex+0x100>
 800adc8:	1bf3      	subs	r3, r6, r7
 800adca:	3b01      	subs	r3, #1
 800adcc:	4629      	mov	r1, r5
 800adce:	2b07      	cmp	r3, #7
 800add0:	dc49      	bgt.n	800ae66 <__gethex+0x1e8>
 800add2:	9802      	ldr	r0, [sp, #8]
 800add4:	f000 fa63 	bl	800b29e <_Balloc>
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	f100 0914 	add.w	r9, r0, #20
 800adde:	f04f 0b00 	mov.w	fp, #0
 800ade2:	f1c3 0301 	rsb	r3, r3, #1
 800ade6:	4605      	mov	r5, r0
 800ade8:	f8cd 9010 	str.w	r9, [sp, #16]
 800adec:	46da      	mov	sl, fp
 800adee:	9308      	str	r3, [sp, #32]
 800adf0:	42b7      	cmp	r7, r6
 800adf2:	d33b      	bcc.n	800ae6c <__gethex+0x1ee>
 800adf4:	9804      	ldr	r0, [sp, #16]
 800adf6:	f840 ab04 	str.w	sl, [r0], #4
 800adfa:	eba0 0009 	sub.w	r0, r0, r9
 800adfe:	1080      	asrs	r0, r0, #2
 800ae00:	6128      	str	r0, [r5, #16]
 800ae02:	0147      	lsls	r7, r0, #5
 800ae04:	4650      	mov	r0, sl
 800ae06:	f000 fb0e 	bl	800b426 <__hi0bits>
 800ae0a:	f8d8 6000 	ldr.w	r6, [r8]
 800ae0e:	1a3f      	subs	r7, r7, r0
 800ae10:	42b7      	cmp	r7, r6
 800ae12:	dd64      	ble.n	800aede <__gethex+0x260>
 800ae14:	1bbf      	subs	r7, r7, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 fe1d 	bl	800ba58 <__any_on>
 800ae1e:	4682      	mov	sl, r0
 800ae20:	b178      	cbz	r0, 800ae42 <__gethex+0x1c4>
 800ae22:	1e7b      	subs	r3, r7, #1
 800ae24:	1159      	asrs	r1, r3, #5
 800ae26:	f003 021f 	and.w	r2, r3, #31
 800ae2a:	f04f 0a01 	mov.w	sl, #1
 800ae2e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae32:	fa0a f202 	lsl.w	r2, sl, r2
 800ae36:	420a      	tst	r2, r1
 800ae38:	d003      	beq.n	800ae42 <__gethex+0x1c4>
 800ae3a:	4553      	cmp	r3, sl
 800ae3c:	dc46      	bgt.n	800aecc <__gethex+0x24e>
 800ae3e:	f04f 0a02 	mov.w	sl, #2
 800ae42:	4639      	mov	r1, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	f7ff fecb 	bl	800abe0 <rshift>
 800ae4a:	443c      	add	r4, r7
 800ae4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	da52      	bge.n	800aefa <__gethex+0x27c>
 800ae54:	4629      	mov	r1, r5
 800ae56:	9802      	ldr	r0, [sp, #8]
 800ae58:	f000 fa55 	bl	800b306 <_Bfree>
 800ae5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	27a3      	movs	r7, #163	; 0xa3
 800ae64:	e793      	b.n	800ad8e <__gethex+0x110>
 800ae66:	3101      	adds	r1, #1
 800ae68:	105b      	asrs	r3, r3, #1
 800ae6a:	e7b0      	b.n	800adce <__gethex+0x150>
 800ae6c:	1e73      	subs	r3, r6, #1
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	9a07      	ldr	r2, [sp, #28]
 800ae72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d018      	beq.n	800aeac <__gethex+0x22e>
 800ae7a:	f1bb 0f20 	cmp.w	fp, #32
 800ae7e:	d107      	bne.n	800ae90 <__gethex+0x212>
 800ae80:	9b04      	ldr	r3, [sp, #16]
 800ae82:	f8c3 a000 	str.w	sl, [r3]
 800ae86:	3304      	adds	r3, #4
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	46d3      	mov	fp, sl
 800ae90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae94:	f7ff fede 	bl	800ac54 <__hexdig_fun>
 800ae98:	f000 000f 	and.w	r0, r0, #15
 800ae9c:	fa00 f00b 	lsl.w	r0, r0, fp
 800aea0:	ea4a 0a00 	orr.w	sl, sl, r0
 800aea4:	f10b 0b04 	add.w	fp, fp, #4
 800aea8:	9b05      	ldr	r3, [sp, #20]
 800aeaa:	e00d      	b.n	800aec8 <__gethex+0x24a>
 800aeac:	9b05      	ldr	r3, [sp, #20]
 800aeae:	9a08      	ldr	r2, [sp, #32]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	42bb      	cmp	r3, r7
 800aeb4:	d3e1      	bcc.n	800ae7a <__gethex+0x1fc>
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	9a01      	ldr	r2, [sp, #4]
 800aeba:	9903      	ldr	r1, [sp, #12]
 800aebc:	9309      	str	r3, [sp, #36]	; 0x24
 800aebe:	f001 f805 	bl	800becc <strncmp>
 800aec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d1d8      	bne.n	800ae7a <__gethex+0x1fc>
 800aec8:	461e      	mov	r6, r3
 800aeca:	e791      	b.n	800adf0 <__gethex+0x172>
 800aecc:	1eb9      	subs	r1, r7, #2
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 fdc2 	bl	800ba58 <__any_on>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d0b2      	beq.n	800ae3e <__gethex+0x1c0>
 800aed8:	f04f 0a03 	mov.w	sl, #3
 800aedc:	e7b1      	b.n	800ae42 <__gethex+0x1c4>
 800aede:	da09      	bge.n	800aef4 <__gethex+0x276>
 800aee0:	1bf7      	subs	r7, r6, r7
 800aee2:	4629      	mov	r1, r5
 800aee4:	463a      	mov	r2, r7
 800aee6:	9802      	ldr	r0, [sp, #8]
 800aee8:	f000 fbd8 	bl	800b69c <__lshift>
 800aeec:	1be4      	subs	r4, r4, r7
 800aeee:	4605      	mov	r5, r0
 800aef0:	f100 0914 	add.w	r9, r0, #20
 800aef4:	f04f 0a00 	mov.w	sl, #0
 800aef8:	e7a8      	b.n	800ae4c <__gethex+0x1ce>
 800aefa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aefe:	42a0      	cmp	r0, r4
 800af00:	dd6a      	ble.n	800afd8 <__gethex+0x35a>
 800af02:	1b04      	subs	r4, r0, r4
 800af04:	42a6      	cmp	r6, r4
 800af06:	dc2e      	bgt.n	800af66 <__gethex+0x2e8>
 800af08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d022      	beq.n	800af56 <__gethex+0x2d8>
 800af10:	2b03      	cmp	r3, #3
 800af12:	d024      	beq.n	800af5e <__gethex+0x2e0>
 800af14:	2b01      	cmp	r3, #1
 800af16:	d115      	bne.n	800af44 <__gethex+0x2c6>
 800af18:	42a6      	cmp	r6, r4
 800af1a:	d113      	bne.n	800af44 <__gethex+0x2c6>
 800af1c:	2e01      	cmp	r6, #1
 800af1e:	dc0b      	bgt.n	800af38 <__gethex+0x2ba>
 800af20:	9a06      	ldr	r2, [sp, #24]
 800af22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	2301      	movs	r3, #1
 800af2a:	612b      	str	r3, [r5, #16]
 800af2c:	f8c9 3000 	str.w	r3, [r9]
 800af30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af32:	2762      	movs	r7, #98	; 0x62
 800af34:	601d      	str	r5, [r3, #0]
 800af36:	e72a      	b.n	800ad8e <__gethex+0x110>
 800af38:	1e71      	subs	r1, r6, #1
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 fd8c 	bl	800ba58 <__any_on>
 800af40:	2800      	cmp	r0, #0
 800af42:	d1ed      	bne.n	800af20 <__gethex+0x2a2>
 800af44:	4629      	mov	r1, r5
 800af46:	9802      	ldr	r0, [sp, #8]
 800af48:	f000 f9dd 	bl	800b306 <_Bfree>
 800af4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af4e:	2300      	movs	r3, #0
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	2750      	movs	r7, #80	; 0x50
 800af54:	e71b      	b.n	800ad8e <__gethex+0x110>
 800af56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0e1      	beq.n	800af20 <__gethex+0x2a2>
 800af5c:	e7f2      	b.n	800af44 <__gethex+0x2c6>
 800af5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1dd      	bne.n	800af20 <__gethex+0x2a2>
 800af64:	e7ee      	b.n	800af44 <__gethex+0x2c6>
 800af66:	1e67      	subs	r7, r4, #1
 800af68:	f1ba 0f00 	cmp.w	sl, #0
 800af6c:	d131      	bne.n	800afd2 <__gethex+0x354>
 800af6e:	b127      	cbz	r7, 800af7a <__gethex+0x2fc>
 800af70:	4639      	mov	r1, r7
 800af72:	4628      	mov	r0, r5
 800af74:	f000 fd70 	bl	800ba58 <__any_on>
 800af78:	4682      	mov	sl, r0
 800af7a:	117a      	asrs	r2, r7, #5
 800af7c:	2301      	movs	r3, #1
 800af7e:	f007 071f 	and.w	r7, r7, #31
 800af82:	fa03 f707 	lsl.w	r7, r3, r7
 800af86:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800af8a:	4621      	mov	r1, r4
 800af8c:	421f      	tst	r7, r3
 800af8e:	4628      	mov	r0, r5
 800af90:	bf18      	it	ne
 800af92:	f04a 0a02 	orrne.w	sl, sl, #2
 800af96:	1b36      	subs	r6, r6, r4
 800af98:	f7ff fe22 	bl	800abe0 <rshift>
 800af9c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800afa0:	2702      	movs	r7, #2
 800afa2:	f1ba 0f00 	cmp.w	sl, #0
 800afa6:	d048      	beq.n	800b03a <__gethex+0x3bc>
 800afa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afac:	2b02      	cmp	r3, #2
 800afae:	d015      	beq.n	800afdc <__gethex+0x35e>
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d017      	beq.n	800afe4 <__gethex+0x366>
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d109      	bne.n	800afcc <__gethex+0x34e>
 800afb8:	f01a 0f02 	tst.w	sl, #2
 800afbc:	d006      	beq.n	800afcc <__gethex+0x34e>
 800afbe:	f8d9 3000 	ldr.w	r3, [r9]
 800afc2:	ea4a 0a03 	orr.w	sl, sl, r3
 800afc6:	f01a 0f01 	tst.w	sl, #1
 800afca:	d10e      	bne.n	800afea <__gethex+0x36c>
 800afcc:	f047 0710 	orr.w	r7, r7, #16
 800afd0:	e033      	b.n	800b03a <__gethex+0x3bc>
 800afd2:	f04f 0a01 	mov.w	sl, #1
 800afd6:	e7d0      	b.n	800af7a <__gethex+0x2fc>
 800afd8:	2701      	movs	r7, #1
 800afda:	e7e2      	b.n	800afa2 <__gethex+0x324>
 800afdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afde:	f1c3 0301 	rsb	r3, r3, #1
 800afe2:	9315      	str	r3, [sp, #84]	; 0x54
 800afe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0f0      	beq.n	800afcc <__gethex+0x34e>
 800afea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800afee:	f105 0314 	add.w	r3, r5, #20
 800aff2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800aff6:	eb03 010a 	add.w	r1, r3, sl
 800affa:	f04f 0c00 	mov.w	ip, #0
 800affe:	4618      	mov	r0, r3
 800b000:	f853 2b04 	ldr.w	r2, [r3], #4
 800b004:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b008:	d01c      	beq.n	800b044 <__gethex+0x3c6>
 800b00a:	3201      	adds	r2, #1
 800b00c:	6002      	str	r2, [r0, #0]
 800b00e:	2f02      	cmp	r7, #2
 800b010:	f105 0314 	add.w	r3, r5, #20
 800b014:	d138      	bne.n	800b088 <__gethex+0x40a>
 800b016:	f8d8 2000 	ldr.w	r2, [r8]
 800b01a:	3a01      	subs	r2, #1
 800b01c:	42b2      	cmp	r2, r6
 800b01e:	d10a      	bne.n	800b036 <__gethex+0x3b8>
 800b020:	1171      	asrs	r1, r6, #5
 800b022:	2201      	movs	r2, #1
 800b024:	f006 061f 	and.w	r6, r6, #31
 800b028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b02c:	fa02 f606 	lsl.w	r6, r2, r6
 800b030:	421e      	tst	r6, r3
 800b032:	bf18      	it	ne
 800b034:	4617      	movne	r7, r2
 800b036:	f047 0720 	orr.w	r7, r7, #32
 800b03a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b03c:	601d      	str	r5, [r3, #0]
 800b03e:	9b06      	ldr	r3, [sp, #24]
 800b040:	601c      	str	r4, [r3, #0]
 800b042:	e6a4      	b.n	800ad8e <__gethex+0x110>
 800b044:	4299      	cmp	r1, r3
 800b046:	f843 cc04 	str.w	ip, [r3, #-4]
 800b04a:	d8d8      	bhi.n	800affe <__gethex+0x380>
 800b04c:	68ab      	ldr	r3, [r5, #8]
 800b04e:	4599      	cmp	r9, r3
 800b050:	db12      	blt.n	800b078 <__gethex+0x3fa>
 800b052:	6869      	ldr	r1, [r5, #4]
 800b054:	9802      	ldr	r0, [sp, #8]
 800b056:	3101      	adds	r1, #1
 800b058:	f000 f921 	bl	800b29e <_Balloc>
 800b05c:	692a      	ldr	r2, [r5, #16]
 800b05e:	3202      	adds	r2, #2
 800b060:	f105 010c 	add.w	r1, r5, #12
 800b064:	4683      	mov	fp, r0
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	300c      	adds	r0, #12
 800b06a:	f000 f90d 	bl	800b288 <memcpy>
 800b06e:	4629      	mov	r1, r5
 800b070:	9802      	ldr	r0, [sp, #8]
 800b072:	f000 f948 	bl	800b306 <_Bfree>
 800b076:	465d      	mov	r5, fp
 800b078:	692b      	ldr	r3, [r5, #16]
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b080:	612a      	str	r2, [r5, #16]
 800b082:	2201      	movs	r2, #1
 800b084:	615a      	str	r2, [r3, #20]
 800b086:	e7c2      	b.n	800b00e <__gethex+0x390>
 800b088:	692a      	ldr	r2, [r5, #16]
 800b08a:	454a      	cmp	r2, r9
 800b08c:	dd0b      	ble.n	800b0a6 <__gethex+0x428>
 800b08e:	2101      	movs	r1, #1
 800b090:	4628      	mov	r0, r5
 800b092:	f7ff fda5 	bl	800abe0 <rshift>
 800b096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b09a:	3401      	adds	r4, #1
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	f6ff aed9 	blt.w	800ae54 <__gethex+0x1d6>
 800b0a2:	2701      	movs	r7, #1
 800b0a4:	e7c7      	b.n	800b036 <__gethex+0x3b8>
 800b0a6:	f016 061f 	ands.w	r6, r6, #31
 800b0aa:	d0fa      	beq.n	800b0a2 <__gethex+0x424>
 800b0ac:	449a      	add	sl, r3
 800b0ae:	f1c6 0620 	rsb	r6, r6, #32
 800b0b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b0b6:	f000 f9b6 	bl	800b426 <__hi0bits>
 800b0ba:	42b0      	cmp	r0, r6
 800b0bc:	dbe7      	blt.n	800b08e <__gethex+0x410>
 800b0be:	e7f0      	b.n	800b0a2 <__gethex+0x424>

0800b0c0 <L_shift>:
 800b0c0:	f1c2 0208 	rsb	r2, r2, #8
 800b0c4:	0092      	lsls	r2, r2, #2
 800b0c6:	b570      	push	{r4, r5, r6, lr}
 800b0c8:	f1c2 0620 	rsb	r6, r2, #32
 800b0cc:	6843      	ldr	r3, [r0, #4]
 800b0ce:	6804      	ldr	r4, [r0, #0]
 800b0d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b0d4:	432c      	orrs	r4, r5
 800b0d6:	40d3      	lsrs	r3, r2
 800b0d8:	6004      	str	r4, [r0, #0]
 800b0da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0de:	4288      	cmp	r0, r1
 800b0e0:	d3f4      	bcc.n	800b0cc <L_shift+0xc>
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}

0800b0e4 <__match>:
 800b0e4:	b530      	push	{r4, r5, lr}
 800b0e6:	6803      	ldr	r3, [r0, #0]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ee:	b914      	cbnz	r4, 800b0f6 <__match+0x12>
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	bd30      	pop	{r4, r5, pc}
 800b0f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0fe:	2d19      	cmp	r5, #25
 800b100:	bf98      	it	ls
 800b102:	3220      	addls	r2, #32
 800b104:	42a2      	cmp	r2, r4
 800b106:	d0f0      	beq.n	800b0ea <__match+0x6>
 800b108:	2000      	movs	r0, #0
 800b10a:	e7f3      	b.n	800b0f4 <__match+0x10>

0800b10c <__hexnan>:
 800b10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b110:	680b      	ldr	r3, [r1, #0]
 800b112:	6801      	ldr	r1, [r0, #0]
 800b114:	115f      	asrs	r7, r3, #5
 800b116:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b11a:	f013 031f 	ands.w	r3, r3, #31
 800b11e:	b087      	sub	sp, #28
 800b120:	bf18      	it	ne
 800b122:	3704      	addne	r7, #4
 800b124:	2500      	movs	r5, #0
 800b126:	1f3e      	subs	r6, r7, #4
 800b128:	4682      	mov	sl, r0
 800b12a:	4690      	mov	r8, r2
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	f847 5c04 	str.w	r5, [r7, #-4]
 800b132:	46b1      	mov	r9, r6
 800b134:	4634      	mov	r4, r6
 800b136:	9502      	str	r5, [sp, #8]
 800b138:	46ab      	mov	fp, r5
 800b13a:	784a      	ldrb	r2, [r1, #1]
 800b13c:	1c4b      	adds	r3, r1, #1
 800b13e:	9303      	str	r3, [sp, #12]
 800b140:	b342      	cbz	r2, 800b194 <__hexnan+0x88>
 800b142:	4610      	mov	r0, r2
 800b144:	9105      	str	r1, [sp, #20]
 800b146:	9204      	str	r2, [sp, #16]
 800b148:	f7ff fd84 	bl	800ac54 <__hexdig_fun>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d143      	bne.n	800b1d8 <__hexnan+0xcc>
 800b150:	9a04      	ldr	r2, [sp, #16]
 800b152:	9905      	ldr	r1, [sp, #20]
 800b154:	2a20      	cmp	r2, #32
 800b156:	d818      	bhi.n	800b18a <__hexnan+0x7e>
 800b158:	9b02      	ldr	r3, [sp, #8]
 800b15a:	459b      	cmp	fp, r3
 800b15c:	dd13      	ble.n	800b186 <__hexnan+0x7a>
 800b15e:	454c      	cmp	r4, r9
 800b160:	d206      	bcs.n	800b170 <__hexnan+0x64>
 800b162:	2d07      	cmp	r5, #7
 800b164:	dc04      	bgt.n	800b170 <__hexnan+0x64>
 800b166:	462a      	mov	r2, r5
 800b168:	4649      	mov	r1, r9
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7ff ffa8 	bl	800b0c0 <L_shift>
 800b170:	4544      	cmp	r4, r8
 800b172:	d944      	bls.n	800b1fe <__hexnan+0xf2>
 800b174:	2300      	movs	r3, #0
 800b176:	f1a4 0904 	sub.w	r9, r4, #4
 800b17a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b17e:	f8cd b008 	str.w	fp, [sp, #8]
 800b182:	464c      	mov	r4, r9
 800b184:	461d      	mov	r5, r3
 800b186:	9903      	ldr	r1, [sp, #12]
 800b188:	e7d7      	b.n	800b13a <__hexnan+0x2e>
 800b18a:	2a29      	cmp	r2, #41	; 0x29
 800b18c:	d14a      	bne.n	800b224 <__hexnan+0x118>
 800b18e:	3102      	adds	r1, #2
 800b190:	f8ca 1000 	str.w	r1, [sl]
 800b194:	f1bb 0f00 	cmp.w	fp, #0
 800b198:	d044      	beq.n	800b224 <__hexnan+0x118>
 800b19a:	454c      	cmp	r4, r9
 800b19c:	d206      	bcs.n	800b1ac <__hexnan+0xa0>
 800b19e:	2d07      	cmp	r5, #7
 800b1a0:	dc04      	bgt.n	800b1ac <__hexnan+0xa0>
 800b1a2:	462a      	mov	r2, r5
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f7ff ff8a 	bl	800b0c0 <L_shift>
 800b1ac:	4544      	cmp	r4, r8
 800b1ae:	d928      	bls.n	800b202 <__hexnan+0xf6>
 800b1b0:	4643      	mov	r3, r8
 800b1b2:	f854 2b04 	ldr.w	r2, [r4], #4
 800b1b6:	f843 2b04 	str.w	r2, [r3], #4
 800b1ba:	42a6      	cmp	r6, r4
 800b1bc:	d2f9      	bcs.n	800b1b2 <__hexnan+0xa6>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f843 2b04 	str.w	r2, [r3], #4
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	d2fb      	bcs.n	800b1c0 <__hexnan+0xb4>
 800b1c8:	6833      	ldr	r3, [r6, #0]
 800b1ca:	b91b      	cbnz	r3, 800b1d4 <__hexnan+0xc8>
 800b1cc:	4546      	cmp	r6, r8
 800b1ce:	d127      	bne.n	800b220 <__hexnan+0x114>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	6033      	str	r3, [r6, #0]
 800b1d4:	2005      	movs	r0, #5
 800b1d6:	e026      	b.n	800b226 <__hexnan+0x11a>
 800b1d8:	3501      	adds	r5, #1
 800b1da:	2d08      	cmp	r5, #8
 800b1dc:	f10b 0b01 	add.w	fp, fp, #1
 800b1e0:	dd06      	ble.n	800b1f0 <__hexnan+0xe4>
 800b1e2:	4544      	cmp	r4, r8
 800b1e4:	d9cf      	bls.n	800b186 <__hexnan+0x7a>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1ec:	2501      	movs	r5, #1
 800b1ee:	3c04      	subs	r4, #4
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	f000 000f 	and.w	r0, r0, #15
 800b1f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1fa:	6020      	str	r0, [r4, #0]
 800b1fc:	e7c3      	b.n	800b186 <__hexnan+0x7a>
 800b1fe:	2508      	movs	r5, #8
 800b200:	e7c1      	b.n	800b186 <__hexnan+0x7a>
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0df      	beq.n	800b1c8 <__hexnan+0xbc>
 800b208:	f04f 32ff 	mov.w	r2, #4294967295
 800b20c:	f1c3 0320 	rsb	r3, r3, #32
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
 800b214:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b218:	401a      	ands	r2, r3
 800b21a:	f847 2c04 	str.w	r2, [r7, #-4]
 800b21e:	e7d3      	b.n	800b1c8 <__hexnan+0xbc>
 800b220:	3e04      	subs	r6, #4
 800b222:	e7d1      	b.n	800b1c8 <__hexnan+0xbc>
 800b224:	2004      	movs	r0, #4
 800b226:	b007      	add	sp, #28
 800b228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b22c <__locale_ctype_ptr_l>:
 800b22c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b230:	4770      	bx	lr

0800b232 <__localeconv_l>:
 800b232:	30f0      	adds	r0, #240	; 0xf0
 800b234:	4770      	bx	lr
	...

0800b238 <_localeconv_r>:
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <_localeconv_r+0x14>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6a18      	ldr	r0, [r3, #32]
 800b23e:	4b04      	ldr	r3, [pc, #16]	; (800b250 <_localeconv_r+0x18>)
 800b240:	2800      	cmp	r0, #0
 800b242:	bf08      	it	eq
 800b244:	4618      	moveq	r0, r3
 800b246:	30f0      	adds	r0, #240	; 0xf0
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	2000000c 	.word	0x2000000c
 800b250:	20000070 	.word	0x20000070

0800b254 <malloc>:
 800b254:	4b02      	ldr	r3, [pc, #8]	; (800b260 <malloc+0xc>)
 800b256:	4601      	mov	r1, r0
 800b258:	6818      	ldr	r0, [r3, #0]
 800b25a:	f000 bc7b 	b.w	800bb54 <_malloc_r>
 800b25e:	bf00      	nop
 800b260:	2000000c 	.word	0x2000000c

0800b264 <__ascii_mbtowc>:
 800b264:	b082      	sub	sp, #8
 800b266:	b901      	cbnz	r1, 800b26a <__ascii_mbtowc+0x6>
 800b268:	a901      	add	r1, sp, #4
 800b26a:	b142      	cbz	r2, 800b27e <__ascii_mbtowc+0x1a>
 800b26c:	b14b      	cbz	r3, 800b282 <__ascii_mbtowc+0x1e>
 800b26e:	7813      	ldrb	r3, [r2, #0]
 800b270:	600b      	str	r3, [r1, #0]
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	1c10      	adds	r0, r2, #0
 800b276:	bf18      	it	ne
 800b278:	2001      	movne	r0, #1
 800b27a:	b002      	add	sp, #8
 800b27c:	4770      	bx	lr
 800b27e:	4610      	mov	r0, r2
 800b280:	e7fb      	b.n	800b27a <__ascii_mbtowc+0x16>
 800b282:	f06f 0001 	mvn.w	r0, #1
 800b286:	e7f8      	b.n	800b27a <__ascii_mbtowc+0x16>

0800b288 <memcpy>:
 800b288:	b510      	push	{r4, lr}
 800b28a:	1e43      	subs	r3, r0, #1
 800b28c:	440a      	add	r2, r1
 800b28e:	4291      	cmp	r1, r2
 800b290:	d100      	bne.n	800b294 <memcpy+0xc>
 800b292:	bd10      	pop	{r4, pc}
 800b294:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b29c:	e7f7      	b.n	800b28e <memcpy+0x6>

0800b29e <_Balloc>:
 800b29e:	b570      	push	{r4, r5, r6, lr}
 800b2a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	460e      	mov	r6, r1
 800b2a6:	b93d      	cbnz	r5, 800b2b8 <_Balloc+0x1a>
 800b2a8:	2010      	movs	r0, #16
 800b2aa:	f7ff ffd3 	bl	800b254 <malloc>
 800b2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b2b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2b4:	6005      	str	r5, [r0, #0]
 800b2b6:	60c5      	str	r5, [r0, #12]
 800b2b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b2ba:	68eb      	ldr	r3, [r5, #12]
 800b2bc:	b183      	cbz	r3, 800b2e0 <_Balloc+0x42>
 800b2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2c6:	b9b8      	cbnz	r0, 800b2f8 <_Balloc+0x5a>
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	fa01 f506 	lsl.w	r5, r1, r6
 800b2ce:	1d6a      	adds	r2, r5, #5
 800b2d0:	0092      	lsls	r2, r2, #2
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fbe1 	bl	800ba9a <_calloc_r>
 800b2d8:	b160      	cbz	r0, 800b2f4 <_Balloc+0x56>
 800b2da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b2de:	e00e      	b.n	800b2fe <_Balloc+0x60>
 800b2e0:	2221      	movs	r2, #33	; 0x21
 800b2e2:	2104      	movs	r1, #4
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fbd8 	bl	800ba9a <_calloc_r>
 800b2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ec:	60e8      	str	r0, [r5, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1e4      	bne.n	800b2be <_Balloc+0x20>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	6802      	ldr	r2, [r0, #0]
 800b2fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b2fe:	2300      	movs	r3, #0
 800b300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b304:	e7f7      	b.n	800b2f6 <_Balloc+0x58>

0800b306 <_Bfree>:
 800b306:	b570      	push	{r4, r5, r6, lr}
 800b308:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b30a:	4606      	mov	r6, r0
 800b30c:	460d      	mov	r5, r1
 800b30e:	b93c      	cbnz	r4, 800b320 <_Bfree+0x1a>
 800b310:	2010      	movs	r0, #16
 800b312:	f7ff ff9f 	bl	800b254 <malloc>
 800b316:	6270      	str	r0, [r6, #36]	; 0x24
 800b318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	60c4      	str	r4, [r0, #12]
 800b320:	b13d      	cbz	r5, 800b332 <_Bfree+0x2c>
 800b322:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b324:	686a      	ldr	r2, [r5, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b32c:	6029      	str	r1, [r5, #0]
 800b32e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b332:	bd70      	pop	{r4, r5, r6, pc}

0800b334 <__multadd>:
 800b334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b338:	690d      	ldr	r5, [r1, #16]
 800b33a:	461f      	mov	r7, r3
 800b33c:	4606      	mov	r6, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	f101 0c14 	add.w	ip, r1, #20
 800b344:	2300      	movs	r3, #0
 800b346:	f8dc 0000 	ldr.w	r0, [ip]
 800b34a:	b281      	uxth	r1, r0
 800b34c:	fb02 7101 	mla	r1, r2, r1, r7
 800b350:	0c0f      	lsrs	r7, r1, #16
 800b352:	0c00      	lsrs	r0, r0, #16
 800b354:	fb02 7000 	mla	r0, r2, r0, r7
 800b358:	b289      	uxth	r1, r1
 800b35a:	3301      	adds	r3, #1
 800b35c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b360:	429d      	cmp	r5, r3
 800b362:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b366:	f84c 1b04 	str.w	r1, [ip], #4
 800b36a:	dcec      	bgt.n	800b346 <__multadd+0x12>
 800b36c:	b1d7      	cbz	r7, 800b3a4 <__multadd+0x70>
 800b36e:	68a3      	ldr	r3, [r4, #8]
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc12      	bgt.n	800b39a <__multadd+0x66>
 800b374:	6861      	ldr	r1, [r4, #4]
 800b376:	4630      	mov	r0, r6
 800b378:	3101      	adds	r1, #1
 800b37a:	f7ff ff90 	bl	800b29e <_Balloc>
 800b37e:	6922      	ldr	r2, [r4, #16]
 800b380:	3202      	adds	r2, #2
 800b382:	f104 010c 	add.w	r1, r4, #12
 800b386:	4680      	mov	r8, r0
 800b388:	0092      	lsls	r2, r2, #2
 800b38a:	300c      	adds	r0, #12
 800b38c:	f7ff ff7c 	bl	800b288 <memcpy>
 800b390:	4621      	mov	r1, r4
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ffb7 	bl	800b306 <_Bfree>
 800b398:	4644      	mov	r4, r8
 800b39a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b39e:	3501      	adds	r5, #1
 800b3a0:	615f      	str	r7, [r3, #20]
 800b3a2:	6125      	str	r5, [r4, #16]
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3aa <__s2b>:
 800b3aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	4615      	mov	r5, r2
 800b3b2:	461f      	mov	r7, r3
 800b3b4:	2209      	movs	r2, #9
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3be:	2100      	movs	r1, #0
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	db20      	blt.n	800b408 <__s2b+0x5e>
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ff69 	bl	800b29e <_Balloc>
 800b3cc:	9b08      	ldr	r3, [sp, #32]
 800b3ce:	6143      	str	r3, [r0, #20]
 800b3d0:	2d09      	cmp	r5, #9
 800b3d2:	f04f 0301 	mov.w	r3, #1
 800b3d6:	6103      	str	r3, [r0, #16]
 800b3d8:	dd19      	ble.n	800b40e <__s2b+0x64>
 800b3da:	f104 0809 	add.w	r8, r4, #9
 800b3de:	46c1      	mov	r9, r8
 800b3e0:	442c      	add	r4, r5
 800b3e2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	3b30      	subs	r3, #48	; 0x30
 800b3ea:	220a      	movs	r2, #10
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7ff ffa1 	bl	800b334 <__multadd>
 800b3f2:	45a1      	cmp	r9, r4
 800b3f4:	d1f5      	bne.n	800b3e2 <__s2b+0x38>
 800b3f6:	eb08 0405 	add.w	r4, r8, r5
 800b3fa:	3c08      	subs	r4, #8
 800b3fc:	1b2d      	subs	r5, r5, r4
 800b3fe:	1963      	adds	r3, r4, r5
 800b400:	42bb      	cmp	r3, r7
 800b402:	db07      	blt.n	800b414 <__s2b+0x6a>
 800b404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b408:	0052      	lsls	r2, r2, #1
 800b40a:	3101      	adds	r1, #1
 800b40c:	e7d9      	b.n	800b3c2 <__s2b+0x18>
 800b40e:	340a      	adds	r4, #10
 800b410:	2509      	movs	r5, #9
 800b412:	e7f3      	b.n	800b3fc <__s2b+0x52>
 800b414:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b418:	4601      	mov	r1, r0
 800b41a:	3b30      	subs	r3, #48	; 0x30
 800b41c:	220a      	movs	r2, #10
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ff88 	bl	800b334 <__multadd>
 800b424:	e7eb      	b.n	800b3fe <__s2b+0x54>

0800b426 <__hi0bits>:
 800b426:	0c02      	lsrs	r2, r0, #16
 800b428:	0412      	lsls	r2, r2, #16
 800b42a:	4603      	mov	r3, r0
 800b42c:	b9b2      	cbnz	r2, 800b45c <__hi0bits+0x36>
 800b42e:	0403      	lsls	r3, r0, #16
 800b430:	2010      	movs	r0, #16
 800b432:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b436:	bf04      	itt	eq
 800b438:	021b      	lsleq	r3, r3, #8
 800b43a:	3008      	addeq	r0, #8
 800b43c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b440:	bf04      	itt	eq
 800b442:	011b      	lsleq	r3, r3, #4
 800b444:	3004      	addeq	r0, #4
 800b446:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b44a:	bf04      	itt	eq
 800b44c:	009b      	lsleq	r3, r3, #2
 800b44e:	3002      	addeq	r0, #2
 800b450:	2b00      	cmp	r3, #0
 800b452:	db06      	blt.n	800b462 <__hi0bits+0x3c>
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	d503      	bpl.n	800b460 <__hi0bits+0x3a>
 800b458:	3001      	adds	r0, #1
 800b45a:	4770      	bx	lr
 800b45c:	2000      	movs	r0, #0
 800b45e:	e7e8      	b.n	800b432 <__hi0bits+0xc>
 800b460:	2020      	movs	r0, #32
 800b462:	4770      	bx	lr

0800b464 <__lo0bits>:
 800b464:	6803      	ldr	r3, [r0, #0]
 800b466:	f013 0207 	ands.w	r2, r3, #7
 800b46a:	4601      	mov	r1, r0
 800b46c:	d00b      	beq.n	800b486 <__lo0bits+0x22>
 800b46e:	07da      	lsls	r2, r3, #31
 800b470:	d423      	bmi.n	800b4ba <__lo0bits+0x56>
 800b472:	0798      	lsls	r0, r3, #30
 800b474:	bf49      	itett	mi
 800b476:	085b      	lsrmi	r3, r3, #1
 800b478:	089b      	lsrpl	r3, r3, #2
 800b47a:	2001      	movmi	r0, #1
 800b47c:	600b      	strmi	r3, [r1, #0]
 800b47e:	bf5c      	itt	pl
 800b480:	600b      	strpl	r3, [r1, #0]
 800b482:	2002      	movpl	r0, #2
 800b484:	4770      	bx	lr
 800b486:	b298      	uxth	r0, r3
 800b488:	b9a8      	cbnz	r0, 800b4b6 <__lo0bits+0x52>
 800b48a:	0c1b      	lsrs	r3, r3, #16
 800b48c:	2010      	movs	r0, #16
 800b48e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b492:	bf04      	itt	eq
 800b494:	0a1b      	lsreq	r3, r3, #8
 800b496:	3008      	addeq	r0, #8
 800b498:	071a      	lsls	r2, r3, #28
 800b49a:	bf04      	itt	eq
 800b49c:	091b      	lsreq	r3, r3, #4
 800b49e:	3004      	addeq	r0, #4
 800b4a0:	079a      	lsls	r2, r3, #30
 800b4a2:	bf04      	itt	eq
 800b4a4:	089b      	lsreq	r3, r3, #2
 800b4a6:	3002      	addeq	r0, #2
 800b4a8:	07da      	lsls	r2, r3, #31
 800b4aa:	d402      	bmi.n	800b4b2 <__lo0bits+0x4e>
 800b4ac:	085b      	lsrs	r3, r3, #1
 800b4ae:	d006      	beq.n	800b4be <__lo0bits+0x5a>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	600b      	str	r3, [r1, #0]
 800b4b4:	4770      	bx	lr
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	e7e9      	b.n	800b48e <__lo0bits+0x2a>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	4770      	bx	lr
 800b4be:	2020      	movs	r0, #32
 800b4c0:	4770      	bx	lr

0800b4c2 <__i2b>:
 800b4c2:	b510      	push	{r4, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	f7ff fee9 	bl	800b29e <_Balloc>
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	6144      	str	r4, [r0, #20]
 800b4d0:	6102      	str	r2, [r0, #16]
 800b4d2:	bd10      	pop	{r4, pc}

0800b4d4 <__multiply>:
 800b4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	4614      	mov	r4, r2
 800b4da:	690a      	ldr	r2, [r1, #16]
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	bfb8      	it	lt
 800b4e2:	460b      	movlt	r3, r1
 800b4e4:	4688      	mov	r8, r1
 800b4e6:	bfbc      	itt	lt
 800b4e8:	46a0      	movlt	r8, r4
 800b4ea:	461c      	movlt	r4, r3
 800b4ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4fc:	eb07 0609 	add.w	r6, r7, r9
 800b500:	42b3      	cmp	r3, r6
 800b502:	bfb8      	it	lt
 800b504:	3101      	addlt	r1, #1
 800b506:	f7ff feca 	bl	800b29e <_Balloc>
 800b50a:	f100 0514 	add.w	r5, r0, #20
 800b50e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b512:	462b      	mov	r3, r5
 800b514:	2200      	movs	r2, #0
 800b516:	4573      	cmp	r3, lr
 800b518:	d316      	bcc.n	800b548 <__multiply+0x74>
 800b51a:	f104 0214 	add.w	r2, r4, #20
 800b51e:	f108 0114 	add.w	r1, r8, #20
 800b522:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b526:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	9b00      	ldr	r3, [sp, #0]
 800b52e:	9201      	str	r2, [sp, #4]
 800b530:	4293      	cmp	r3, r2
 800b532:	d80c      	bhi.n	800b54e <__multiply+0x7a>
 800b534:	2e00      	cmp	r6, #0
 800b536:	dd03      	ble.n	800b540 <__multiply+0x6c>
 800b538:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d05d      	beq.n	800b5fc <__multiply+0x128>
 800b540:	6106      	str	r6, [r0, #16]
 800b542:	b003      	add	sp, #12
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	f843 2b04 	str.w	r2, [r3], #4
 800b54c:	e7e3      	b.n	800b516 <__multiply+0x42>
 800b54e:	f8b2 b000 	ldrh.w	fp, [r2]
 800b552:	f1bb 0f00 	cmp.w	fp, #0
 800b556:	d023      	beq.n	800b5a0 <__multiply+0xcc>
 800b558:	4689      	mov	r9, r1
 800b55a:	46ac      	mov	ip, r5
 800b55c:	f04f 0800 	mov.w	r8, #0
 800b560:	f859 4b04 	ldr.w	r4, [r9], #4
 800b564:	f8dc a000 	ldr.w	sl, [ip]
 800b568:	b2a3      	uxth	r3, r4
 800b56a:	fa1f fa8a 	uxth.w	sl, sl
 800b56e:	fb0b a303 	mla	r3, fp, r3, sl
 800b572:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b576:	f8dc 4000 	ldr.w	r4, [ip]
 800b57a:	4443      	add	r3, r8
 800b57c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b580:	fb0b 840a 	mla	r4, fp, sl, r8
 800b584:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b588:	46e2      	mov	sl, ip
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b590:	454f      	cmp	r7, r9
 800b592:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b596:	f84a 3b04 	str.w	r3, [sl], #4
 800b59a:	d82b      	bhi.n	800b5f4 <__multiply+0x120>
 800b59c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b5a6:	3204      	adds	r2, #4
 800b5a8:	f1ba 0f00 	cmp.w	sl, #0
 800b5ac:	d020      	beq.n	800b5f0 <__multiply+0x11c>
 800b5ae:	682b      	ldr	r3, [r5, #0]
 800b5b0:	4689      	mov	r9, r1
 800b5b2:	46a8      	mov	r8, r5
 800b5b4:	f04f 0b00 	mov.w	fp, #0
 800b5b8:	f8b9 c000 	ldrh.w	ip, [r9]
 800b5bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b5c0:	fb0a 440c 	mla	r4, sl, ip, r4
 800b5c4:	445c      	add	r4, fp
 800b5c6:	46c4      	mov	ip, r8
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b5ce:	f84c 3b04 	str.w	r3, [ip], #4
 800b5d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b5da:	0c1b      	lsrs	r3, r3, #16
 800b5dc:	fb0a b303 	mla	r3, sl, r3, fp
 800b5e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b5e4:	454f      	cmp	r7, r9
 800b5e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b5ea:	d805      	bhi.n	800b5f8 <__multiply+0x124>
 800b5ec:	f8c8 3004 	str.w	r3, [r8, #4]
 800b5f0:	3504      	adds	r5, #4
 800b5f2:	e79b      	b.n	800b52c <__multiply+0x58>
 800b5f4:	46d4      	mov	ip, sl
 800b5f6:	e7b3      	b.n	800b560 <__multiply+0x8c>
 800b5f8:	46e0      	mov	r8, ip
 800b5fa:	e7dd      	b.n	800b5b8 <__multiply+0xe4>
 800b5fc:	3e01      	subs	r6, #1
 800b5fe:	e799      	b.n	800b534 <__multiply+0x60>

0800b600 <__pow5mult>:
 800b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b604:	4615      	mov	r5, r2
 800b606:	f012 0203 	ands.w	r2, r2, #3
 800b60a:	4606      	mov	r6, r0
 800b60c:	460f      	mov	r7, r1
 800b60e:	d007      	beq.n	800b620 <__pow5mult+0x20>
 800b610:	3a01      	subs	r2, #1
 800b612:	4c21      	ldr	r4, [pc, #132]	; (800b698 <__pow5mult+0x98>)
 800b614:	2300      	movs	r3, #0
 800b616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b61a:	f7ff fe8b 	bl	800b334 <__multadd>
 800b61e:	4607      	mov	r7, r0
 800b620:	10ad      	asrs	r5, r5, #2
 800b622:	d035      	beq.n	800b690 <__pow5mult+0x90>
 800b624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b626:	b93c      	cbnz	r4, 800b638 <__pow5mult+0x38>
 800b628:	2010      	movs	r0, #16
 800b62a:	f7ff fe13 	bl	800b254 <malloc>
 800b62e:	6270      	str	r0, [r6, #36]	; 0x24
 800b630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b634:	6004      	str	r4, [r0, #0]
 800b636:	60c4      	str	r4, [r0, #12]
 800b638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b640:	b94c      	cbnz	r4, 800b656 <__pow5mult+0x56>
 800b642:	f240 2171 	movw	r1, #625	; 0x271
 800b646:	4630      	mov	r0, r6
 800b648:	f7ff ff3b 	bl	800b4c2 <__i2b>
 800b64c:	2300      	movs	r3, #0
 800b64e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b652:	4604      	mov	r4, r0
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	f04f 0800 	mov.w	r8, #0
 800b65a:	07eb      	lsls	r3, r5, #31
 800b65c:	d50a      	bpl.n	800b674 <__pow5mult+0x74>
 800b65e:	4639      	mov	r1, r7
 800b660:	4622      	mov	r2, r4
 800b662:	4630      	mov	r0, r6
 800b664:	f7ff ff36 	bl	800b4d4 <__multiply>
 800b668:	4639      	mov	r1, r7
 800b66a:	4681      	mov	r9, r0
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7ff fe4a 	bl	800b306 <_Bfree>
 800b672:	464f      	mov	r7, r9
 800b674:	106d      	asrs	r5, r5, #1
 800b676:	d00b      	beq.n	800b690 <__pow5mult+0x90>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	b938      	cbnz	r0, 800b68c <__pow5mult+0x8c>
 800b67c:	4622      	mov	r2, r4
 800b67e:	4621      	mov	r1, r4
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ff27 	bl	800b4d4 <__multiply>
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	f8c0 8000 	str.w	r8, [r0]
 800b68c:	4604      	mov	r4, r0
 800b68e:	e7e4      	b.n	800b65a <__pow5mult+0x5a>
 800b690:	4638      	mov	r0, r7
 800b692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b696:	bf00      	nop
 800b698:	0800c970 	.word	0x0800c970

0800b69c <__lshift>:
 800b69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	6849      	ldr	r1, [r1, #4]
 800b6aa:	eb0a 0903 	add.w	r9, sl, r3
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	4616      	mov	r6, r2
 800b6b4:	f109 0501 	add.w	r5, r9, #1
 800b6b8:	42ab      	cmp	r3, r5
 800b6ba:	db32      	blt.n	800b722 <__lshift+0x86>
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff fdee 	bl	800b29e <_Balloc>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	f100 0114 	add.w	r1, r0, #20
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	4553      	cmp	r3, sl
 800b6ce:	db2b      	blt.n	800b728 <__lshift+0x8c>
 800b6d0:	6920      	ldr	r0, [r4, #16]
 800b6d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6d6:	f104 0314 	add.w	r3, r4, #20
 800b6da:	f016 021f 	ands.w	r2, r6, #31
 800b6de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6e6:	d025      	beq.n	800b734 <__lshift+0x98>
 800b6e8:	f1c2 0e20 	rsb	lr, r2, #32
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	681e      	ldr	r6, [r3, #0]
 800b6f0:	468a      	mov	sl, r1
 800b6f2:	4096      	lsls	r6, r2
 800b6f4:	4330      	orrs	r0, r6
 800b6f6:	f84a 0b04 	str.w	r0, [sl], #4
 800b6fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800b6fe:	459c      	cmp	ip, r3
 800b700:	fa20 f00e 	lsr.w	r0, r0, lr
 800b704:	d814      	bhi.n	800b730 <__lshift+0x94>
 800b706:	6048      	str	r0, [r1, #4]
 800b708:	b108      	cbz	r0, 800b70e <__lshift+0x72>
 800b70a:	f109 0502 	add.w	r5, r9, #2
 800b70e:	3d01      	subs	r5, #1
 800b710:	4638      	mov	r0, r7
 800b712:	f8c8 5010 	str.w	r5, [r8, #16]
 800b716:	4621      	mov	r1, r4
 800b718:	f7ff fdf5 	bl	800b306 <_Bfree>
 800b71c:	4640      	mov	r0, r8
 800b71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b722:	3101      	adds	r1, #1
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	e7c7      	b.n	800b6b8 <__lshift+0x1c>
 800b728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b72c:	3301      	adds	r3, #1
 800b72e:	e7cd      	b.n	800b6cc <__lshift+0x30>
 800b730:	4651      	mov	r1, sl
 800b732:	e7dc      	b.n	800b6ee <__lshift+0x52>
 800b734:	3904      	subs	r1, #4
 800b736:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b73e:	459c      	cmp	ip, r3
 800b740:	d8f9      	bhi.n	800b736 <__lshift+0x9a>
 800b742:	e7e4      	b.n	800b70e <__lshift+0x72>

0800b744 <__mcmp>:
 800b744:	6903      	ldr	r3, [r0, #16]
 800b746:	690a      	ldr	r2, [r1, #16]
 800b748:	1a9b      	subs	r3, r3, r2
 800b74a:	b530      	push	{r4, r5, lr}
 800b74c:	d10c      	bne.n	800b768 <__mcmp+0x24>
 800b74e:	0092      	lsls	r2, r2, #2
 800b750:	3014      	adds	r0, #20
 800b752:	3114      	adds	r1, #20
 800b754:	1884      	adds	r4, r0, r2
 800b756:	4411      	add	r1, r2
 800b758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b75c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b760:	4295      	cmp	r5, r2
 800b762:	d003      	beq.n	800b76c <__mcmp+0x28>
 800b764:	d305      	bcc.n	800b772 <__mcmp+0x2e>
 800b766:	2301      	movs	r3, #1
 800b768:	4618      	mov	r0, r3
 800b76a:	bd30      	pop	{r4, r5, pc}
 800b76c:	42a0      	cmp	r0, r4
 800b76e:	d3f3      	bcc.n	800b758 <__mcmp+0x14>
 800b770:	e7fa      	b.n	800b768 <__mcmp+0x24>
 800b772:	f04f 33ff 	mov.w	r3, #4294967295
 800b776:	e7f7      	b.n	800b768 <__mcmp+0x24>

0800b778 <__mdiff>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	460d      	mov	r5, r1
 800b77e:	4607      	mov	r7, r0
 800b780:	4611      	mov	r1, r2
 800b782:	4628      	mov	r0, r5
 800b784:	4614      	mov	r4, r2
 800b786:	f7ff ffdd 	bl	800b744 <__mcmp>
 800b78a:	1e06      	subs	r6, r0, #0
 800b78c:	d108      	bne.n	800b7a0 <__mdiff+0x28>
 800b78e:	4631      	mov	r1, r6
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff fd84 	bl	800b29e <_Balloc>
 800b796:	2301      	movs	r3, #1
 800b798:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a0:	bfa4      	itt	ge
 800b7a2:	4623      	movge	r3, r4
 800b7a4:	462c      	movge	r4, r5
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	6861      	ldr	r1, [r4, #4]
 800b7aa:	bfa6      	itte	ge
 800b7ac:	461d      	movge	r5, r3
 800b7ae:	2600      	movge	r6, #0
 800b7b0:	2601      	movlt	r6, #1
 800b7b2:	f7ff fd74 	bl	800b29e <_Balloc>
 800b7b6:	692b      	ldr	r3, [r5, #16]
 800b7b8:	60c6      	str	r6, [r0, #12]
 800b7ba:	6926      	ldr	r6, [r4, #16]
 800b7bc:	f105 0914 	add.w	r9, r5, #20
 800b7c0:	f104 0214 	add.w	r2, r4, #20
 800b7c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b7c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b7cc:	f100 0514 	add.w	r5, r0, #20
 800b7d0:	f04f 0e00 	mov.w	lr, #0
 800b7d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b7d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b7dc:	fa1e f18a 	uxtah	r1, lr, sl
 800b7e0:	b2a3      	uxth	r3, r4
 800b7e2:	1ac9      	subs	r1, r1, r3
 800b7e4:	0c23      	lsrs	r3, r4, #16
 800b7e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b7ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b7ee:	b289      	uxth	r1, r1
 800b7f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b7f4:	45c8      	cmp	r8, r9
 800b7f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b7fa:	4694      	mov	ip, r2
 800b7fc:	f845 3b04 	str.w	r3, [r5], #4
 800b800:	d8e8      	bhi.n	800b7d4 <__mdiff+0x5c>
 800b802:	45bc      	cmp	ip, r7
 800b804:	d304      	bcc.n	800b810 <__mdiff+0x98>
 800b806:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b80a:	b183      	cbz	r3, 800b82e <__mdiff+0xb6>
 800b80c:	6106      	str	r6, [r0, #16]
 800b80e:	e7c5      	b.n	800b79c <__mdiff+0x24>
 800b810:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b814:	fa1e f381 	uxtah	r3, lr, r1
 800b818:	141a      	asrs	r2, r3, #16
 800b81a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b81e:	b29b      	uxth	r3, r3
 800b820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b824:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b828:	f845 3b04 	str.w	r3, [r5], #4
 800b82c:	e7e9      	b.n	800b802 <__mdiff+0x8a>
 800b82e:	3e01      	subs	r6, #1
 800b830:	e7e9      	b.n	800b806 <__mdiff+0x8e>
	...

0800b834 <__ulp>:
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <__ulp+0x4c>)
 800b836:	ee10 2a90 	vmov	r2, s1
 800b83a:	401a      	ands	r2, r3
 800b83c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b840:	2b00      	cmp	r3, #0
 800b842:	dd04      	ble.n	800b84e <__ulp+0x1a>
 800b844:	2000      	movs	r0, #0
 800b846:	4619      	mov	r1, r3
 800b848:	ec41 0b10 	vmov	d0, r0, r1
 800b84c:	4770      	bx	lr
 800b84e:	425b      	negs	r3, r3
 800b850:	151b      	asrs	r3, r3, #20
 800b852:	2b13      	cmp	r3, #19
 800b854:	f04f 0000 	mov.w	r0, #0
 800b858:	f04f 0100 	mov.w	r1, #0
 800b85c:	dc04      	bgt.n	800b868 <__ulp+0x34>
 800b85e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b862:	fa42 f103 	asr.w	r1, r2, r3
 800b866:	e7ef      	b.n	800b848 <__ulp+0x14>
 800b868:	3b14      	subs	r3, #20
 800b86a:	2b1e      	cmp	r3, #30
 800b86c:	f04f 0201 	mov.w	r2, #1
 800b870:	bfda      	itte	le
 800b872:	f1c3 031f 	rsble	r3, r3, #31
 800b876:	fa02 f303 	lslle.w	r3, r2, r3
 800b87a:	4613      	movgt	r3, r2
 800b87c:	4618      	mov	r0, r3
 800b87e:	e7e3      	b.n	800b848 <__ulp+0x14>
 800b880:	7ff00000 	.word	0x7ff00000

0800b884 <__b2d>:
 800b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b886:	6905      	ldr	r5, [r0, #16]
 800b888:	f100 0714 	add.w	r7, r0, #20
 800b88c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b890:	1f2e      	subs	r6, r5, #4
 800b892:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b896:	4620      	mov	r0, r4
 800b898:	f7ff fdc5 	bl	800b426 <__hi0bits>
 800b89c:	f1c0 0320 	rsb	r3, r0, #32
 800b8a0:	280a      	cmp	r0, #10
 800b8a2:	600b      	str	r3, [r1, #0]
 800b8a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b91c <__b2d+0x98>
 800b8a8:	dc14      	bgt.n	800b8d4 <__b2d+0x50>
 800b8aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800b8ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800b8b2:	42b7      	cmp	r7, r6
 800b8b4:	ea41 030c 	orr.w	r3, r1, ip
 800b8b8:	bf34      	ite	cc
 800b8ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8be:	2100      	movcs	r1, #0
 800b8c0:	3015      	adds	r0, #21
 800b8c2:	fa04 f000 	lsl.w	r0, r4, r0
 800b8c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b8ca:	ea40 0201 	orr.w	r2, r0, r1
 800b8ce:	ec43 2b10 	vmov	d0, r2, r3
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d4:	42b7      	cmp	r7, r6
 800b8d6:	bf3a      	itte	cc
 800b8d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8e0:	2100      	movcs	r1, #0
 800b8e2:	380b      	subs	r0, #11
 800b8e4:	d015      	beq.n	800b912 <__b2d+0x8e>
 800b8e6:	4084      	lsls	r4, r0
 800b8e8:	f1c0 0520 	rsb	r5, r0, #32
 800b8ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b8f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b8f4:	42be      	cmp	r6, r7
 800b8f6:	fa21 fc05 	lsr.w	ip, r1, r5
 800b8fa:	ea44 030c 	orr.w	r3, r4, ip
 800b8fe:	bf8c      	ite	hi
 800b900:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b904:	2400      	movls	r4, #0
 800b906:	fa01 f000 	lsl.w	r0, r1, r0
 800b90a:	40ec      	lsrs	r4, r5
 800b90c:	ea40 0204 	orr.w	r2, r0, r4
 800b910:	e7dd      	b.n	800b8ce <__b2d+0x4a>
 800b912:	ea44 030c 	orr.w	r3, r4, ip
 800b916:	460a      	mov	r2, r1
 800b918:	e7d9      	b.n	800b8ce <__b2d+0x4a>
 800b91a:	bf00      	nop
 800b91c:	3ff00000 	.word	0x3ff00000

0800b920 <__d2b>:
 800b920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b924:	460e      	mov	r6, r1
 800b926:	2101      	movs	r1, #1
 800b928:	ec59 8b10 	vmov	r8, r9, d0
 800b92c:	4615      	mov	r5, r2
 800b92e:	f7ff fcb6 	bl	800b29e <_Balloc>
 800b932:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b936:	4607      	mov	r7, r0
 800b938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b93c:	bb34      	cbnz	r4, 800b98c <__d2b+0x6c>
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	f1b8 0300 	subs.w	r3, r8, #0
 800b944:	d027      	beq.n	800b996 <__d2b+0x76>
 800b946:	a802      	add	r0, sp, #8
 800b948:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b94c:	f7ff fd8a 	bl	800b464 <__lo0bits>
 800b950:	9900      	ldr	r1, [sp, #0]
 800b952:	b1f0      	cbz	r0, 800b992 <__d2b+0x72>
 800b954:	9a01      	ldr	r2, [sp, #4]
 800b956:	f1c0 0320 	rsb	r3, r0, #32
 800b95a:	fa02 f303 	lsl.w	r3, r2, r3
 800b95e:	430b      	orrs	r3, r1
 800b960:	40c2      	lsrs	r2, r0
 800b962:	617b      	str	r3, [r7, #20]
 800b964:	9201      	str	r2, [sp, #4]
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	61bb      	str	r3, [r7, #24]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	bf14      	ite	ne
 800b96e:	2102      	movne	r1, #2
 800b970:	2101      	moveq	r1, #1
 800b972:	6139      	str	r1, [r7, #16]
 800b974:	b1c4      	cbz	r4, 800b9a8 <__d2b+0x88>
 800b976:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b97a:	4404      	add	r4, r0
 800b97c:	6034      	str	r4, [r6, #0]
 800b97e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b982:	6028      	str	r0, [r5, #0]
 800b984:	4638      	mov	r0, r7
 800b986:	b003      	add	sp, #12
 800b988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b98c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b990:	e7d5      	b.n	800b93e <__d2b+0x1e>
 800b992:	6179      	str	r1, [r7, #20]
 800b994:	e7e7      	b.n	800b966 <__d2b+0x46>
 800b996:	a801      	add	r0, sp, #4
 800b998:	f7ff fd64 	bl	800b464 <__lo0bits>
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	6139      	str	r1, [r7, #16]
 800b9a4:	3020      	adds	r0, #32
 800b9a6:	e7e5      	b.n	800b974 <__d2b+0x54>
 800b9a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b9ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9b0:	6030      	str	r0, [r6, #0]
 800b9b2:	6918      	ldr	r0, [r3, #16]
 800b9b4:	f7ff fd37 	bl	800b426 <__hi0bits>
 800b9b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9bc:	e7e1      	b.n	800b982 <__d2b+0x62>

0800b9be <__ratio>:
 800b9be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c2:	4688      	mov	r8, r1
 800b9c4:	4669      	mov	r1, sp
 800b9c6:	4681      	mov	r9, r0
 800b9c8:	f7ff ff5c 	bl	800b884 <__b2d>
 800b9cc:	a901      	add	r1, sp, #4
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	ec57 6b10 	vmov	r6, r7, d0
 800b9d4:	f7ff ff56 	bl	800b884 <__b2d>
 800b9d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b9e0:	eba3 0c02 	sub.w	ip, r3, r2
 800b9e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9e8:	1a9b      	subs	r3, r3, r2
 800b9ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b9ee:	ec5b ab10 	vmov	sl, fp, d0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bfce      	itee	gt
 800b9f6:	463a      	movgt	r2, r7
 800b9f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9fc:	465a      	movle	r2, fp
 800b9fe:	4659      	mov	r1, fp
 800ba00:	463d      	mov	r5, r7
 800ba02:	bfd4      	ite	le
 800ba04:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ba08:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	ee10 2a10 	vmov	r2, s0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7f4 ff39 	bl	800088c <__aeabi_ddiv>
 800ba1a:	ec41 0b10 	vmov	d0, r0, r1
 800ba1e:	b003      	add	sp, #12
 800ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba24 <__copybits>:
 800ba24:	3901      	subs	r1, #1
 800ba26:	b510      	push	{r4, lr}
 800ba28:	1149      	asrs	r1, r1, #5
 800ba2a:	6914      	ldr	r4, [r2, #16]
 800ba2c:	3101      	adds	r1, #1
 800ba2e:	f102 0314 	add.w	r3, r2, #20
 800ba32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	d303      	bcc.n	800ba48 <__copybits+0x24>
 800ba40:	2300      	movs	r3, #0
 800ba42:	428a      	cmp	r2, r1
 800ba44:	d305      	bcc.n	800ba52 <__copybits+0x2e>
 800ba46:	bd10      	pop	{r4, pc}
 800ba48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba4c:	f840 2b04 	str.w	r2, [r0], #4
 800ba50:	e7f3      	b.n	800ba3a <__copybits+0x16>
 800ba52:	f842 3b04 	str.w	r3, [r2], #4
 800ba56:	e7f4      	b.n	800ba42 <__copybits+0x1e>

0800ba58 <__any_on>:
 800ba58:	f100 0214 	add.w	r2, r0, #20
 800ba5c:	6900      	ldr	r0, [r0, #16]
 800ba5e:	114b      	asrs	r3, r1, #5
 800ba60:	4298      	cmp	r0, r3
 800ba62:	b510      	push	{r4, lr}
 800ba64:	db11      	blt.n	800ba8a <__any_on+0x32>
 800ba66:	dd0a      	ble.n	800ba7e <__any_on+0x26>
 800ba68:	f011 011f 	ands.w	r1, r1, #31
 800ba6c:	d007      	beq.n	800ba7e <__any_on+0x26>
 800ba6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba72:	fa24 f001 	lsr.w	r0, r4, r1
 800ba76:	fa00 f101 	lsl.w	r1, r0, r1
 800ba7a:	428c      	cmp	r4, r1
 800ba7c:	d10b      	bne.n	800ba96 <__any_on+0x3e>
 800ba7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d803      	bhi.n	800ba8e <__any_on+0x36>
 800ba86:	2000      	movs	r0, #0
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	e7f7      	b.n	800ba7e <__any_on+0x26>
 800ba8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba92:	2900      	cmp	r1, #0
 800ba94:	d0f5      	beq.n	800ba82 <__any_on+0x2a>
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7f6      	b.n	800ba88 <__any_on+0x30>

0800ba9a <_calloc_r>:
 800ba9a:	b538      	push	{r3, r4, r5, lr}
 800ba9c:	fb02 f401 	mul.w	r4, r2, r1
 800baa0:	4621      	mov	r1, r4
 800baa2:	f000 f857 	bl	800bb54 <_malloc_r>
 800baa6:	4605      	mov	r5, r0
 800baa8:	b118      	cbz	r0, 800bab2 <_calloc_r+0x18>
 800baaa:	4622      	mov	r2, r4
 800baac:	2100      	movs	r1, #0
 800baae:	f7fc fd35 	bl	800851c <memset>
 800bab2:	4628      	mov	r0, r5
 800bab4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bab8 <_free_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4605      	mov	r5, r0
 800babc:	2900      	cmp	r1, #0
 800babe:	d045      	beq.n	800bb4c <_free_r+0x94>
 800bac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac4:	1f0c      	subs	r4, r1, #4
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	bfb8      	it	lt
 800baca:	18e4      	addlt	r4, r4, r3
 800bacc:	f000 fa36 	bl	800bf3c <__malloc_lock>
 800bad0:	4a1f      	ldr	r2, [pc, #124]	; (800bb50 <_free_r+0x98>)
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	4610      	mov	r0, r2
 800bad6:	b933      	cbnz	r3, 800bae6 <_free_r+0x2e>
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	6014      	str	r4, [r2, #0]
 800badc:	4628      	mov	r0, r5
 800bade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae2:	f000 ba2c 	b.w	800bf3e <__malloc_unlock>
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	d90c      	bls.n	800bb04 <_free_r+0x4c>
 800baea:	6821      	ldr	r1, [r4, #0]
 800baec:	1862      	adds	r2, r4, r1
 800baee:	4293      	cmp	r3, r2
 800baf0:	bf04      	itt	eq
 800baf2:	681a      	ldreq	r2, [r3, #0]
 800baf4:	685b      	ldreq	r3, [r3, #4]
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	bf04      	itt	eq
 800bafa:	1852      	addeq	r2, r2, r1
 800bafc:	6022      	streq	r2, [r4, #0]
 800bafe:	6004      	str	r4, [r0, #0]
 800bb00:	e7ec      	b.n	800badc <_free_r+0x24>
 800bb02:	4613      	mov	r3, r2
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	b10a      	cbz	r2, 800bb0c <_free_r+0x54>
 800bb08:	42a2      	cmp	r2, r4
 800bb0a:	d9fa      	bls.n	800bb02 <_free_r+0x4a>
 800bb0c:	6819      	ldr	r1, [r3, #0]
 800bb0e:	1858      	adds	r0, r3, r1
 800bb10:	42a0      	cmp	r0, r4
 800bb12:	d10b      	bne.n	800bb2c <_free_r+0x74>
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	4401      	add	r1, r0
 800bb18:	1858      	adds	r0, r3, r1
 800bb1a:	4282      	cmp	r2, r0
 800bb1c:	6019      	str	r1, [r3, #0]
 800bb1e:	d1dd      	bne.n	800badc <_free_r+0x24>
 800bb20:	6810      	ldr	r0, [r2, #0]
 800bb22:	6852      	ldr	r2, [r2, #4]
 800bb24:	605a      	str	r2, [r3, #4]
 800bb26:	4401      	add	r1, r0
 800bb28:	6019      	str	r1, [r3, #0]
 800bb2a:	e7d7      	b.n	800badc <_free_r+0x24>
 800bb2c:	d902      	bls.n	800bb34 <_free_r+0x7c>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	e7d3      	b.n	800badc <_free_r+0x24>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	1821      	adds	r1, r4, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	bf04      	itt	eq
 800bb3c:	6811      	ldreq	r1, [r2, #0]
 800bb3e:	6852      	ldreq	r2, [r2, #4]
 800bb40:	6062      	str	r2, [r4, #4]
 800bb42:	bf04      	itt	eq
 800bb44:	1809      	addeq	r1, r1, r0
 800bb46:	6021      	streq	r1, [r4, #0]
 800bb48:	605c      	str	r4, [r3, #4]
 800bb4a:	e7c7      	b.n	800badc <_free_r+0x24>
 800bb4c:	bd38      	pop	{r3, r4, r5, pc}
 800bb4e:	bf00      	nop
 800bb50:	20000200 	.word	0x20000200

0800bb54 <_malloc_r>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	1ccd      	adds	r5, r1, #3
 800bb58:	f025 0503 	bic.w	r5, r5, #3
 800bb5c:	3508      	adds	r5, #8
 800bb5e:	2d0c      	cmp	r5, #12
 800bb60:	bf38      	it	cc
 800bb62:	250c      	movcc	r5, #12
 800bb64:	2d00      	cmp	r5, #0
 800bb66:	4606      	mov	r6, r0
 800bb68:	db01      	blt.n	800bb6e <_malloc_r+0x1a>
 800bb6a:	42a9      	cmp	r1, r5
 800bb6c:	d903      	bls.n	800bb76 <_malloc_r+0x22>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	6033      	str	r3, [r6, #0]
 800bb72:	2000      	movs	r0, #0
 800bb74:	bd70      	pop	{r4, r5, r6, pc}
 800bb76:	f000 f9e1 	bl	800bf3c <__malloc_lock>
 800bb7a:	4a21      	ldr	r2, [pc, #132]	; (800bc00 <_malloc_r+0xac>)
 800bb7c:	6814      	ldr	r4, [r2, #0]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	b991      	cbnz	r1, 800bba8 <_malloc_r+0x54>
 800bb82:	4c20      	ldr	r4, [pc, #128]	; (800bc04 <_malloc_r+0xb0>)
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	b91b      	cbnz	r3, 800bb90 <_malloc_r+0x3c>
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f000 f98f 	bl	800beac <_sbrk_r>
 800bb8e:	6020      	str	r0, [r4, #0]
 800bb90:	4629      	mov	r1, r5
 800bb92:	4630      	mov	r0, r6
 800bb94:	f000 f98a 	bl	800beac <_sbrk_r>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d124      	bne.n	800bbe6 <_malloc_r+0x92>
 800bb9c:	230c      	movs	r3, #12
 800bb9e:	6033      	str	r3, [r6, #0]
 800bba0:	4630      	mov	r0, r6
 800bba2:	f000 f9cc 	bl	800bf3e <__malloc_unlock>
 800bba6:	e7e4      	b.n	800bb72 <_malloc_r+0x1e>
 800bba8:	680b      	ldr	r3, [r1, #0]
 800bbaa:	1b5b      	subs	r3, r3, r5
 800bbac:	d418      	bmi.n	800bbe0 <_malloc_r+0x8c>
 800bbae:	2b0b      	cmp	r3, #11
 800bbb0:	d90f      	bls.n	800bbd2 <_malloc_r+0x7e>
 800bbb2:	600b      	str	r3, [r1, #0]
 800bbb4:	50cd      	str	r5, [r1, r3]
 800bbb6:	18cc      	adds	r4, r1, r3
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f000 f9c0 	bl	800bf3e <__malloc_unlock>
 800bbbe:	f104 000b 	add.w	r0, r4, #11
 800bbc2:	1d23      	adds	r3, r4, #4
 800bbc4:	f020 0007 	bic.w	r0, r0, #7
 800bbc8:	1ac3      	subs	r3, r0, r3
 800bbca:	d0d3      	beq.n	800bb74 <_malloc_r+0x20>
 800bbcc:	425a      	negs	r2, r3
 800bbce:	50e2      	str	r2, [r4, r3]
 800bbd0:	e7d0      	b.n	800bb74 <_malloc_r+0x20>
 800bbd2:	428c      	cmp	r4, r1
 800bbd4:	684b      	ldr	r3, [r1, #4]
 800bbd6:	bf16      	itet	ne
 800bbd8:	6063      	strne	r3, [r4, #4]
 800bbda:	6013      	streq	r3, [r2, #0]
 800bbdc:	460c      	movne	r4, r1
 800bbde:	e7eb      	b.n	800bbb8 <_malloc_r+0x64>
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	6849      	ldr	r1, [r1, #4]
 800bbe4:	e7cc      	b.n	800bb80 <_malloc_r+0x2c>
 800bbe6:	1cc4      	adds	r4, r0, #3
 800bbe8:	f024 0403 	bic.w	r4, r4, #3
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d005      	beq.n	800bbfc <_malloc_r+0xa8>
 800bbf0:	1a21      	subs	r1, r4, r0
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f000 f95a 	bl	800beac <_sbrk_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d0cf      	beq.n	800bb9c <_malloc_r+0x48>
 800bbfc:	6025      	str	r5, [r4, #0]
 800bbfe:	e7db      	b.n	800bbb8 <_malloc_r+0x64>
 800bc00:	20000200 	.word	0x20000200
 800bc04:	20000204 	.word	0x20000204

0800bc08 <__ssputs_r>:
 800bc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0c:	688e      	ldr	r6, [r1, #8]
 800bc0e:	429e      	cmp	r6, r3
 800bc10:	4682      	mov	sl, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	4690      	mov	r8, r2
 800bc16:	4699      	mov	r9, r3
 800bc18:	d837      	bhi.n	800bc8a <__ssputs_r+0x82>
 800bc1a:	898a      	ldrh	r2, [r1, #12]
 800bc1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc20:	d031      	beq.n	800bc86 <__ssputs_r+0x7e>
 800bc22:	6825      	ldr	r5, [r4, #0]
 800bc24:	6909      	ldr	r1, [r1, #16]
 800bc26:	1a6f      	subs	r7, r5, r1
 800bc28:	6965      	ldr	r5, [r4, #20]
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc30:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc34:	f109 0301 	add.w	r3, r9, #1
 800bc38:	443b      	add	r3, r7
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	bf38      	it	cc
 800bc3e:	461d      	movcc	r5, r3
 800bc40:	0553      	lsls	r3, r2, #21
 800bc42:	d530      	bpl.n	800bca6 <__ssputs_r+0x9e>
 800bc44:	4629      	mov	r1, r5
 800bc46:	f7ff ff85 	bl	800bb54 <_malloc_r>
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	b950      	cbnz	r0, 800bc64 <__ssputs_r+0x5c>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	f8ca 3000 	str.w	r3, [sl]
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc5a:	81a3      	strh	r3, [r4, #12]
 800bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc64:	463a      	mov	r2, r7
 800bc66:	6921      	ldr	r1, [r4, #16]
 800bc68:	f7ff fb0e 	bl	800b288 <memcpy>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	6126      	str	r6, [r4, #16]
 800bc7a:	6165      	str	r5, [r4, #20]
 800bc7c:	443e      	add	r6, r7
 800bc7e:	1bed      	subs	r5, r5, r7
 800bc80:	6026      	str	r6, [r4, #0]
 800bc82:	60a5      	str	r5, [r4, #8]
 800bc84:	464e      	mov	r6, r9
 800bc86:	454e      	cmp	r6, r9
 800bc88:	d900      	bls.n	800bc8c <__ssputs_r+0x84>
 800bc8a:	464e      	mov	r6, r9
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	4641      	mov	r1, r8
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	f000 f93a 	bl	800bf0a <memmove>
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	1b9b      	subs	r3, r3, r6
 800bc9a:	60a3      	str	r3, [r4, #8]
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	441e      	add	r6, r3
 800bca0:	6026      	str	r6, [r4, #0]
 800bca2:	2000      	movs	r0, #0
 800bca4:	e7dc      	b.n	800bc60 <__ssputs_r+0x58>
 800bca6:	462a      	mov	r2, r5
 800bca8:	f000 f94a 	bl	800bf40 <_realloc_r>
 800bcac:	4606      	mov	r6, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d1e2      	bne.n	800bc78 <__ssputs_r+0x70>
 800bcb2:	6921      	ldr	r1, [r4, #16]
 800bcb4:	4650      	mov	r0, sl
 800bcb6:	f7ff feff 	bl	800bab8 <_free_r>
 800bcba:	e7c8      	b.n	800bc4e <__ssputs_r+0x46>

0800bcbc <_svfiprintf_r>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	461d      	mov	r5, r3
 800bcc2:	898b      	ldrh	r3, [r1, #12]
 800bcc4:	061f      	lsls	r7, r3, #24
 800bcc6:	b09d      	sub	sp, #116	; 0x74
 800bcc8:	4680      	mov	r8, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4616      	mov	r6, r2
 800bcce:	d50f      	bpl.n	800bcf0 <_svfiprintf_r+0x34>
 800bcd0:	690b      	ldr	r3, [r1, #16]
 800bcd2:	b96b      	cbnz	r3, 800bcf0 <_svfiprintf_r+0x34>
 800bcd4:	2140      	movs	r1, #64	; 0x40
 800bcd6:	f7ff ff3d 	bl	800bb54 <_malloc_r>
 800bcda:	6020      	str	r0, [r4, #0]
 800bcdc:	6120      	str	r0, [r4, #16]
 800bcde:	b928      	cbnz	r0, 800bcec <_svfiprintf_r+0x30>
 800bce0:	230c      	movs	r3, #12
 800bce2:	f8c8 3000 	str.w	r3, [r8]
 800bce6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcea:	e0c8      	b.n	800be7e <_svfiprintf_r+0x1c2>
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	6163      	str	r3, [r4, #20]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf4:	2320      	movs	r3, #32
 800bcf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcfa:	2330      	movs	r3, #48	; 0x30
 800bcfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd00:	9503      	str	r5, [sp, #12]
 800bd02:	f04f 0b01 	mov.w	fp, #1
 800bd06:	4637      	mov	r7, r6
 800bd08:	463d      	mov	r5, r7
 800bd0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd0e:	b10b      	cbz	r3, 800bd14 <_svfiprintf_r+0x58>
 800bd10:	2b25      	cmp	r3, #37	; 0x25
 800bd12:	d13e      	bne.n	800bd92 <_svfiprintf_r+0xd6>
 800bd14:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd18:	d00b      	beq.n	800bd32 <_svfiprintf_r+0x76>
 800bd1a:	4653      	mov	r3, sl
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4640      	mov	r0, r8
 800bd22:	f7ff ff71 	bl	800bc08 <__ssputs_r>
 800bd26:	3001      	adds	r0, #1
 800bd28:	f000 80a4 	beq.w	800be74 <_svfiprintf_r+0x1b8>
 800bd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd2e:	4453      	add	r3, sl
 800bd30:	9309      	str	r3, [sp, #36]	; 0x24
 800bd32:	783b      	ldrb	r3, [r7, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 809d 	beq.w	800be74 <_svfiprintf_r+0x1b8>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	9307      	str	r3, [sp, #28]
 800bd48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd4c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd4e:	462f      	mov	r7, r5
 800bd50:	2205      	movs	r2, #5
 800bd52:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bd56:	4850      	ldr	r0, [pc, #320]	; (800be98 <_svfiprintf_r+0x1dc>)
 800bd58:	f7f4 fa62 	bl	8000220 <memchr>
 800bd5c:	9b04      	ldr	r3, [sp, #16]
 800bd5e:	b9d0      	cbnz	r0, 800bd96 <_svfiprintf_r+0xda>
 800bd60:	06d9      	lsls	r1, r3, #27
 800bd62:	bf44      	itt	mi
 800bd64:	2220      	movmi	r2, #32
 800bd66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd6a:	071a      	lsls	r2, r3, #28
 800bd6c:	bf44      	itt	mi
 800bd6e:	222b      	movmi	r2, #43	; 0x2b
 800bd70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd74:	782a      	ldrb	r2, [r5, #0]
 800bd76:	2a2a      	cmp	r2, #42	; 0x2a
 800bd78:	d015      	beq.n	800bda6 <_svfiprintf_r+0xea>
 800bd7a:	9a07      	ldr	r2, [sp, #28]
 800bd7c:	462f      	mov	r7, r5
 800bd7e:	2000      	movs	r0, #0
 800bd80:	250a      	movs	r5, #10
 800bd82:	4639      	mov	r1, r7
 800bd84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd88:	3b30      	subs	r3, #48	; 0x30
 800bd8a:	2b09      	cmp	r3, #9
 800bd8c:	d94d      	bls.n	800be2a <_svfiprintf_r+0x16e>
 800bd8e:	b1b8      	cbz	r0, 800bdc0 <_svfiprintf_r+0x104>
 800bd90:	e00f      	b.n	800bdb2 <_svfiprintf_r+0xf6>
 800bd92:	462f      	mov	r7, r5
 800bd94:	e7b8      	b.n	800bd08 <_svfiprintf_r+0x4c>
 800bd96:	4a40      	ldr	r2, [pc, #256]	; (800be98 <_svfiprintf_r+0x1dc>)
 800bd98:	1a80      	subs	r0, r0, r2
 800bd9a:	fa0b f000 	lsl.w	r0, fp, r0
 800bd9e:	4318      	orrs	r0, r3
 800bda0:	9004      	str	r0, [sp, #16]
 800bda2:	463d      	mov	r5, r7
 800bda4:	e7d3      	b.n	800bd4e <_svfiprintf_r+0x92>
 800bda6:	9a03      	ldr	r2, [sp, #12]
 800bda8:	1d11      	adds	r1, r2, #4
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	9103      	str	r1, [sp, #12]
 800bdae:	2a00      	cmp	r2, #0
 800bdb0:	db01      	blt.n	800bdb6 <_svfiprintf_r+0xfa>
 800bdb2:	9207      	str	r2, [sp, #28]
 800bdb4:	e004      	b.n	800bdc0 <_svfiprintf_r+0x104>
 800bdb6:	4252      	negs	r2, r2
 800bdb8:	f043 0302 	orr.w	r3, r3, #2
 800bdbc:	9207      	str	r2, [sp, #28]
 800bdbe:	9304      	str	r3, [sp, #16]
 800bdc0:	783b      	ldrb	r3, [r7, #0]
 800bdc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdc4:	d10c      	bne.n	800bde0 <_svfiprintf_r+0x124>
 800bdc6:	787b      	ldrb	r3, [r7, #1]
 800bdc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdca:	d133      	bne.n	800be34 <_svfiprintf_r+0x178>
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	9203      	str	r2, [sp, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	bfb8      	it	lt
 800bdd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bddc:	3702      	adds	r7, #2
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	4d2e      	ldr	r5, [pc, #184]	; (800be9c <_svfiprintf_r+0x1e0>)
 800bde2:	7839      	ldrb	r1, [r7, #0]
 800bde4:	2203      	movs	r2, #3
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7f4 fa1a 	bl	8000220 <memchr>
 800bdec:	b138      	cbz	r0, 800bdfe <_svfiprintf_r+0x142>
 800bdee:	2340      	movs	r3, #64	; 0x40
 800bdf0:	1b40      	subs	r0, r0, r5
 800bdf2:	fa03 f000 	lsl.w	r0, r3, r0
 800bdf6:	9b04      	ldr	r3, [sp, #16]
 800bdf8:	4303      	orrs	r3, r0
 800bdfa:	3701      	adds	r7, #1
 800bdfc:	9304      	str	r3, [sp, #16]
 800bdfe:	7839      	ldrb	r1, [r7, #0]
 800be00:	4827      	ldr	r0, [pc, #156]	; (800bea0 <_svfiprintf_r+0x1e4>)
 800be02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be06:	2206      	movs	r2, #6
 800be08:	1c7e      	adds	r6, r7, #1
 800be0a:	f7f4 fa09 	bl	8000220 <memchr>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d038      	beq.n	800be84 <_svfiprintf_r+0x1c8>
 800be12:	4b24      	ldr	r3, [pc, #144]	; (800bea4 <_svfiprintf_r+0x1e8>)
 800be14:	bb13      	cbnz	r3, 800be5c <_svfiprintf_r+0x1a0>
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	3307      	adds	r3, #7
 800be1a:	f023 0307 	bic.w	r3, r3, #7
 800be1e:	3308      	adds	r3, #8
 800be20:	9303      	str	r3, [sp, #12]
 800be22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be24:	444b      	add	r3, r9
 800be26:	9309      	str	r3, [sp, #36]	; 0x24
 800be28:	e76d      	b.n	800bd06 <_svfiprintf_r+0x4a>
 800be2a:	fb05 3202 	mla	r2, r5, r2, r3
 800be2e:	2001      	movs	r0, #1
 800be30:	460f      	mov	r7, r1
 800be32:	e7a6      	b.n	800bd82 <_svfiprintf_r+0xc6>
 800be34:	2300      	movs	r3, #0
 800be36:	3701      	adds	r7, #1
 800be38:	9305      	str	r3, [sp, #20]
 800be3a:	4619      	mov	r1, r3
 800be3c:	250a      	movs	r5, #10
 800be3e:	4638      	mov	r0, r7
 800be40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be44:	3a30      	subs	r2, #48	; 0x30
 800be46:	2a09      	cmp	r2, #9
 800be48:	d903      	bls.n	800be52 <_svfiprintf_r+0x196>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0c8      	beq.n	800bde0 <_svfiprintf_r+0x124>
 800be4e:	9105      	str	r1, [sp, #20]
 800be50:	e7c6      	b.n	800bde0 <_svfiprintf_r+0x124>
 800be52:	fb05 2101 	mla	r1, r5, r1, r2
 800be56:	2301      	movs	r3, #1
 800be58:	4607      	mov	r7, r0
 800be5a:	e7f0      	b.n	800be3e <_svfiprintf_r+0x182>
 800be5c:	ab03      	add	r3, sp, #12
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	4622      	mov	r2, r4
 800be62:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <_svfiprintf_r+0x1ec>)
 800be64:	a904      	add	r1, sp, #16
 800be66:	4640      	mov	r0, r8
 800be68:	f7fc fbf4 	bl	8008654 <_printf_float>
 800be6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be70:	4681      	mov	r9, r0
 800be72:	d1d6      	bne.n	800be22 <_svfiprintf_r+0x166>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	065b      	lsls	r3, r3, #25
 800be78:	f53f af35 	bmi.w	800bce6 <_svfiprintf_r+0x2a>
 800be7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be7e:	b01d      	add	sp, #116	; 0x74
 800be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be84:	ab03      	add	r3, sp, #12
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	4622      	mov	r2, r4
 800be8a:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <_svfiprintf_r+0x1ec>)
 800be8c:	a904      	add	r1, sp, #16
 800be8e:	4640      	mov	r0, r8
 800be90:	f7fc fe96 	bl	8008bc0 <_printf_i>
 800be94:	e7ea      	b.n	800be6c <_svfiprintf_r+0x1b0>
 800be96:	bf00      	nop
 800be98:	0800c97c 	.word	0x0800c97c
 800be9c:	0800c982 	.word	0x0800c982
 800bea0:	0800c986 	.word	0x0800c986
 800bea4:	08008655 	.word	0x08008655
 800bea8:	0800bc09 	.word	0x0800bc09

0800beac <_sbrk_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4c06      	ldr	r4, [pc, #24]	; (800bec8 <_sbrk_r+0x1c>)
 800beb0:	2300      	movs	r3, #0
 800beb2:	4605      	mov	r5, r0
 800beb4:	4608      	mov	r0, r1
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	f7f5 fe88 	bl	8001bcc <_sbrk>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d102      	bne.n	800bec6 <_sbrk_r+0x1a>
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	b103      	cbz	r3, 800bec6 <_sbrk_r+0x1a>
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	200095fc 	.word	0x200095fc

0800becc <strncmp>:
 800becc:	b510      	push	{r4, lr}
 800bece:	b16a      	cbz	r2, 800beec <strncmp+0x20>
 800bed0:	3901      	subs	r1, #1
 800bed2:	1884      	adds	r4, r0, r2
 800bed4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bed8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bedc:	4293      	cmp	r3, r2
 800bede:	d103      	bne.n	800bee8 <strncmp+0x1c>
 800bee0:	42a0      	cmp	r0, r4
 800bee2:	d001      	beq.n	800bee8 <strncmp+0x1c>
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1f5      	bne.n	800bed4 <strncmp+0x8>
 800bee8:	1a98      	subs	r0, r3, r2
 800beea:	bd10      	pop	{r4, pc}
 800beec:	4610      	mov	r0, r2
 800beee:	e7fc      	b.n	800beea <strncmp+0x1e>

0800bef0 <__ascii_wctomb>:
 800bef0:	b149      	cbz	r1, 800bf06 <__ascii_wctomb+0x16>
 800bef2:	2aff      	cmp	r2, #255	; 0xff
 800bef4:	bf85      	ittet	hi
 800bef6:	238a      	movhi	r3, #138	; 0x8a
 800bef8:	6003      	strhi	r3, [r0, #0]
 800befa:	700a      	strbls	r2, [r1, #0]
 800befc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf00:	bf98      	it	ls
 800bf02:	2001      	movls	r0, #1
 800bf04:	4770      	bx	lr
 800bf06:	4608      	mov	r0, r1
 800bf08:	4770      	bx	lr

0800bf0a <memmove>:
 800bf0a:	4288      	cmp	r0, r1
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	eb01 0302 	add.w	r3, r1, r2
 800bf12:	d807      	bhi.n	800bf24 <memmove+0x1a>
 800bf14:	1e42      	subs	r2, r0, #1
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d00a      	beq.n	800bf30 <memmove+0x26>
 800bf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bf22:	e7f8      	b.n	800bf16 <memmove+0xc>
 800bf24:	4283      	cmp	r3, r0
 800bf26:	d9f5      	bls.n	800bf14 <memmove+0xa>
 800bf28:	1881      	adds	r1, r0, r2
 800bf2a:	1ad2      	subs	r2, r2, r3
 800bf2c:	42d3      	cmn	r3, r2
 800bf2e:	d100      	bne.n	800bf32 <memmove+0x28>
 800bf30:	bd10      	pop	{r4, pc}
 800bf32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bf3a:	e7f7      	b.n	800bf2c <memmove+0x22>

0800bf3c <__malloc_lock>:
 800bf3c:	4770      	bx	lr

0800bf3e <__malloc_unlock>:
 800bf3e:	4770      	bx	lr

0800bf40 <_realloc_r>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	4607      	mov	r7, r0
 800bf44:	4614      	mov	r4, r2
 800bf46:	460e      	mov	r6, r1
 800bf48:	b921      	cbnz	r1, 800bf54 <_realloc_r+0x14>
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf50:	f7ff be00 	b.w	800bb54 <_malloc_r>
 800bf54:	b922      	cbnz	r2, 800bf60 <_realloc_r+0x20>
 800bf56:	f7ff fdaf 	bl	800bab8 <_free_r>
 800bf5a:	4625      	mov	r5, r4
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf60:	f000 f814 	bl	800bf8c <_malloc_usable_size_r>
 800bf64:	42a0      	cmp	r0, r4
 800bf66:	d20f      	bcs.n	800bf88 <_realloc_r+0x48>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	f7ff fdf2 	bl	800bb54 <_malloc_r>
 800bf70:	4605      	mov	r5, r0
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d0f2      	beq.n	800bf5c <_realloc_r+0x1c>
 800bf76:	4631      	mov	r1, r6
 800bf78:	4622      	mov	r2, r4
 800bf7a:	f7ff f985 	bl	800b288 <memcpy>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4638      	mov	r0, r7
 800bf82:	f7ff fd99 	bl	800bab8 <_free_r>
 800bf86:	e7e9      	b.n	800bf5c <_realloc_r+0x1c>
 800bf88:	4635      	mov	r5, r6
 800bf8a:	e7e7      	b.n	800bf5c <_realloc_r+0x1c>

0800bf8c <_malloc_usable_size_r>:
 800bf8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf90:	1f18      	subs	r0, r3, #4
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	bfbc      	itt	lt
 800bf96:	580b      	ldrlt	r3, [r1, r0]
 800bf98:	18c0      	addlt	r0, r0, r3
 800bf9a:	4770      	bx	lr

0800bf9c <_init>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	bf00      	nop
 800bfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa2:	bc08      	pop	{r3}
 800bfa4:	469e      	mov	lr, r3
 800bfa6:	4770      	bx	lr

0800bfa8 <_fini>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	bf00      	nop
 800bfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfae:	bc08      	pop	{r3}
 800bfb0:	469e      	mov	lr, r3
 800bfb2:	4770      	bx	lr
